{"version":3,"sources":["components/InputRow.tsx","components/Table.tsx","utils/API.tsx","utils/db.tsx","components/AddExpensesForm.tsx","components/AddIncomeForm.tsx","components/AppBar.tsx","components/PivotTable.tsx","components/Form.tsx","components/Chart.tsx","components/Edit.tsx","pages/Home.tsx","components/Signup.tsx","pages/Login.tsx","components/Alert.tsx","components/SnackBar.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["StyledTableCell","withStyles","theme","createStyles","body","fontSize","padding","maxWidth","TableCell","StyledTableRow","root","backgroundColor","palette","background","default","blueGrey","paddingLeft","TableRow","InputRow","props","useState","amount","state","setState","makeDataList","propsState","id","map","entry","value","name","handleInputRowChange","event","target","useEffect","fields","filter","column","includes","TextField","onBlur","e","handleChange","i","onChange","className","inputProps","list","InputProps","startAdornment","InputAdornment","position","disableUnderline","style","width","dataLists","persons","narrow_categories","broad_categories","IconButton","color","onClick","handleUpdate","aria-label","deleteEntry","ReportTable","head","primary","main","common","white","classes","makeStyles","table","minWidth","useStyles","myRef","createRef","current","scrollIntoView","behavior","TableContainer","component","Paper","Table","ref","TableHead","schema","textTransform","replace","TableBody","data","checkStatus","res","parseMethod","status","Error","json","text","blob","db","API","addCategories","token","fetch","method","headers","JSON","stringify","then","getCategories","expenses","yearMonthObj","year","month","postExpenses","postBatchExpenses","postIncome","postBatchIncome","deleteExpenses","updateExpenses","income","updateIncome","deleteIncome","pivot","wallchart","dataList","signup","login","checkAuth","downloadFile","filename","start","end","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","openDB","upgrade","createObjectStore","autoIncrement","navigator","onLine","checkDatabase","saveRecord","record","put","saveCategories","categories","Object","keys","category","clear","c","loadCategories","getAll","saveWallChartData","loadWallChartData","localStorage","getItem","pendingExpenses","length","pendingIncome","console","error","addEventListener","AddRecordsForm","React","useContext","AuthContext","Auth","setAuth","setAlertState","initialFormState","date","Date","now","NaN","person_id","broad_category_id","narrow_category_id","vendor","notes","formState","setFormState","currentBroadCategory","setCurrentBroadCategory","currentNarrowCategories","setCurrentNarrowCategories","handleFormChange","narrowCategories","preventDefault","severity","message","open","formStateConvertedDate","toLocaleDateString","setOpenBackdrop","reloadWallChart","type","DialogContent","close","handleClose","Typography","variant","onSubmit","utils","DateFnsUtils","disableToolbar","fullWidth","format","margin","label","KeyboardButtonProps","InputLabelProps","shrink","step","FormControl","formControl","InputLabel","htmlFor","Select","labelId","MenuItem","person","Button","source","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","borderRadius","shape","fade","marginLeft","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","sectionDesktop","sectionMobile","MyAppBar","setEditOpen","anchorEl","setAnchorEl","isMenuOpen","Boolean","edit","user","handleMenuClose","logout","emptyDatabase","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","AppBar","Toolbar","noWrap","aria-controls","aria-haspopup","currentTarget","DarkTableRow","cursor","LightTableRow","ExtraLightTableRow","PivotTable","show","setShow","pivotState","reduce","b","broad_category","total","parseFloat","narrow_category","log","showState","bCat","newShow","toggleShowRow","toFixed","nCat","Form","handleFormSubmit","Container","Card","form","WallChart","options","maintainAspectRatio","Edit","has_person","checked","updatedCategories","setCategories","card","CardContent","FormControlLabel","control","Checkbox","Home","useTheme","getUTCFullYear","getUTCMonth","incomeTableState","setIncomeTableState","expensesTableState","setExpensesTableState","categoriesState","setCategoriesState","useReducer","action","labels","datasets","fill","borderColor","secondary","wallChartData","setWallChartData","formatDates","toString","day","getUTCDate","dateString","route","response","assignId","dataListItem","index","newExpensesTableStateData","updatedRow","err","newIncomeTableStateData","reloadWallChartData","home","selectEmpty","marginTop","flexWrap","down","logoutBtn","top","right","downloadBtn","editBtn","left","offline","textAlign","speedDial","bottom","dialog","datePicker","speedDialOpen","setSpeedDialOpen","actions","icon","setAddExpensesOpen","operation","setAddIncomeOpen","addExpensesOpen","addIncomeOpen","editOpen","setOffline","Box","Dialog","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","onMouseLeave","SpeedDialAction","tooltipTitle","tooltipOpen","heading","fontFamily","Signup","username","password","signupFormState","setSignupFormState","formSubmit","signupBtn","float","sidebar","link","Login","loginFormState","setLoginFormState","signupOpen","setSignupOpen","inputChange","newToken","payload","loggedIn","to","Grid","container","item","xs","gutterBottom","Alert","elevation","snackbar","CustomizedSnackbar","reason","Snackbar","autoHideDuration","defaultTheme","createMuiTheme","green","purple","overrides","MuiPickersBasePicker","MuiCard","MuiDialogContent","MuiPickersCalendarHeader","iconButton","ProtectedRoute","Component","rest","render","createContext","App","backdrop","zIndex","setItem","undefined","alertState","openBackdrop","catch","testDatabase","ThemeProvider","CssBaseline","Provider","path","setLoggedIn","exact","Backdrop","CircularProgress","disableShrink","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","process","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.eb65d8b6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DataListStateType, TableDataEntry, AllDataListsType } from '../interfaces/Interfaces'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { IconButton, TableCell, TableRow, TextField, InputAdornment } from '@material-ui/core'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { blueGrey } from '@material-ui/core/colors';\n\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n    createStyles({\n        body: {\n            fontSize: 14,\n            padding: 0,\n            maxWidth: '10ch',\n        },\n    }),\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.background.default,\n            },\n            '&:nth-of-type(even)': {\n                backgroundColor: blueGrey[800],\n            },\n            '& input': {\n                backgroundColor: 'inherit',\n                paddingLeft: 0,\n            }\n        },\n    }),\n)(TableRow);\n\nexport default function InputRow(props:\n    {\n        entry: TableDataEntry,\n        i: number,\n        fields: { name: string }[],\n        dataLists?: AllDataListsType\n        handleChange: Function,\n        handleUpdate: Function,\n        deleteEntry: Function\n    }) {\n\n    const [state, setState] = useState<TableDataEntry>({ amount: \"\" })\n\n    function makeDataList(propsState: DataListStateType[], id: string) {\n        return (\n            <datalist id={id}>\n                {propsState.map((entry: DataListStateType) => {\n                    return (\n                        <option\n                            value={entry.name}\n                            key={entry.id}\n                        />\n                    )\n                })}\n            </datalist>\n        )\n    }\n\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\n        let { name, value } = event.target;\n        setState({ ...state, [name]: value })\n    }\n\n    useEffect(() => {\n        setState(props.entry)\n    }, [props.entry])\n\n    return (\n        <StyledTableRow>\n            {props.fields\n                .filter(column => !column.name.includes(\"id\"))\n                .map(column => {\n                    return (\n                        <StyledTableCell\n\n                        >\n                            <TextField\n                                name={column.name}\n                                onBlur={(e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n                                    props.handleChange(e, props.i)\n                                }}\n                                onChange={handleInputRowChange}\n                                className=\"tableInput\"\n                                value={state[column.name as keyof TableDataEntry] || \"\"}\n                                inputProps={{\n                                    list: column.name\n                                }}\n                                InputProps={\n                                     {\n                                    startAdornment: <InputAdornment position=\"start\">{column.name === 'amount' ? \"$\" : null}</InputAdornment>,\n                                    disableUnderline: true\n                                }\n                            }\n                                style={{ width: '80%' }}\n                            />\n                            {column.name === 'person' && props.dataLists?.persons ? (\n                                makeDataList(props.dataLists?.persons, column.name)\n                            ) : null}\n                            {column.name === 'narrow_category' && props.dataLists?.narrow_categories ? (\n                                makeDataList(props.dataLists?.narrow_categories, column.name)\n                            ) : null}\n                            {column.name === 'broad_category' && props.dataLists?.broad_categories ? (\n                                makeDataList(props.dataLists?.broad_categories, column.name)\n                            ) : null}\n                        </StyledTableCell>\n                    )\n                })}\n            <StyledTableCell>\n                <IconButton\n                    color=\"primary\"\n                    onClick={() => props.handleUpdate(props.i)}\n                >\n                    <SaveIcon />\n                </IconButton>\n            </StyledTableCell>\n            <StyledTableCell>\n                <IconButton\n                    aria-label=\"delete\"\n                    color=\"secondary\"\n                    onClick={() => props.deleteEntry(state.id)}\n                >\n                    <DeleteIcon />\n                </IconButton>\n            </StyledTableCell>\n        </StyledTableRow>\n    )\n}","import React, {useEffect, createRef} from 'react'\nimport InputRow from './InputRow'\nimport type { TableDataEntry, AllDataListsType } from \"../interfaces/Interfaces\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { makeStyles, createStyles, withStyles, Theme } from '@material-ui/core/styles';\n\nexport default function ReportTable(props:\n    {\n        state:\n        {\n            schema:\n            {\n                fields: { name: string }[]\n            },\n            data: TableDataEntry[]\n\n        },\n        dataLists?: AllDataListsType\n        handleChange: Function,\n        handleUpdate: Function,\n        deleteEntry: Function,\n        form?: string\n    }) {\n\n        const StyledTableCell = withStyles((theme: Theme) =>\n        createStyles({\n            head: {\n                backgroundColor: theme.palette.primary.main,\n                color: theme.palette.common.white,\n                padding: 10,\n                fontSize: 16\n            },\n        }),\n        )(TableCell);\n\n        const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            table: {\n                minWidth: 650,\n                padding: '0 1em'\n            },\n        })\n        );\n        const classes = useStyles();\n\n        // Component scrolls into view on mount\n        const myRef = createRef<HTMLTableElement>()\n        const executeScroll = () => {\n            if (myRef.current) {\n                myRef.current.scrollIntoView({behavior: 'smooth'})\n            }\n        }\n    \n        useEffect(() => {\n            executeScroll()\n        })\n    return (\n        <TableContainer component={Paper} >\n            <Table className={classes.table} ref={myRef}>\n                <TableHead>\n                    <TableRow>\n                        {props.state.schema.fields\n                            .filter(column => !column.name.includes(\"id\"))\n                            .map(column => {\n                                return (\n                                    <StyledTableCell key={column.name} style={{textTransform: 'capitalize'}}>\n                                        {column.name.replace(\"_\", \" \")}\n                                    </StyledTableCell>\n                                )\n                            })}\n                        <StyledTableCell><span>Save</span></StyledTableCell>\n                        <StyledTableCell><span>Delete</span></StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody className=\"tableBody\">\n                    {(props.state.data).map((entry: TableDataEntry, i: number) => (\n                            <InputRow\n                                entry={entry}\n                                i={i}\n                                key={i}\n                                fields={props.state.schema.fields}\n                                handleChange={props.handleChange}\n                                handleUpdate={props.handleUpdate}\n                                dataLists={props.dataLists}\n                                deleteEntry={props.deleteEntry}\n                            />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import type {\n    AllDataListsType, \n    FormStateType, \n    TableDataEntry, \n    TableType,\n    ExpensesFormType,\n    IncomeFormType,\n    EditFormType,\n    WallChartDataType} from '../interfaces/Interfaces'\n\n\nfunction checkStatus<T>(res: Response, parseMethod: string): Promise<T> {\n    if (res.status === 401) {\n        throw new Error(\"Unauthorized\")\n    }\n    if (res.status === 404) {\n        throw new Error(\"No Data\")\n    }\n    if (res.status !== 200) {\n        throw new Error(\"Error! \" + res.status)\n    }\n    if (parseMethod === 'json'){\n        return res.json() as Promise<T>\n    } else if (parseMethod === 'text'){\n        return res.text() as unknown as Promise<T>\n    } else {\n        return res.blob() as unknown as Promise<T>\n    }\n}\n\nconst API = {\n    addCategories: function (token: string | null, data: EditFormType): Promise<Response | string> {\n        return fetch(`/api/categories/`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    getCategories: function (token: string | null): Promise<AllDataListsType> {\n        return fetch(`/api/categories/`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n            },\n        }).then(res=>checkStatus<AllDataListsType>(res, 'json'))\n    },\n    expenses: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<TableType>(res, 'json'))\n    },\n    postExpenses: function (token: string | null, data:ExpensesFormType): Promise<Response | string> {\n        return fetch(`/api/expenses/`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    postBatchExpenses: function (token: string | null, data:ExpensesFormType[]): Promise<Response | string> {\n        return fetch(`/api/expenses/batch`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    postIncome: function (token: string | null, data:IncomeFormType): Promise<Response | string> {\n        return fetch(`/api/income/`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    postBatchIncome: function (token: string | null, data:IncomeFormType[]): Promise<Response | string> {\n        return fetch(`/api/income/batch`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    deleteExpenses: function (token: string | null, id: number | undefined): Promise<Response | string> {\n        return fetch(`/api/expenses/${id}`, {\n            method: 'DELETE',\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    updateExpenses: function (token: string | null, data: TableDataEntry): Promise<Response | string> {\n        return fetch(`/api/expenses/${data.id}`, {\n            method: 'PUT',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    income: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\n        return fetch(`/api/income/${yearMonthObj.year}/${yearMonthObj.month}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<TableType>(res, 'json'))\n    },\n    updateIncome: function (token: string | null, data: TableDataEntry): Promise<Response | string> {\n        return fetch(`/api/income/${data.id}`, {\n            method: 'PUT',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    deleteIncome: function (token: string | null, id: number | undefined): Promise<Response | string> {\n        return fetch(`/api/income/${id}`, {\n            method: 'DELETE',\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    pivot: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<TableType>(res, 'json'))\n    },\n    wallchart: function (token: string | null): Promise<WallChartDataType> {\n        return fetch(`/wallchart`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<WallChartDataType>(res, 'json'))\n    },\n\n    dataList: function (token: string | null): Promise<AllDataListsType> {\n        return fetch(`/api/datalists`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res => checkStatus<AllDataListsType>(res, 'json'))\n    },\n    signup: function (data: { username: string, password: string }): Promise<Response | string> {\n        return fetch('/auth/signup', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res => checkStatus<string>(res, 'text'))\n    },\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\n        return fetch('/auth/login', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res => checkStatus<{ token: string }>(res, 'json'))\n    },\n    checkAuth: function (token: string | null): Promise<{username: string, token: string}> {\n        return fetch(`/auth/checkAuth`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res =>checkStatus<{username: string, token: string}>(res, 'json'))\n    },\n    downloadFile: function (token: string | null, filename: string, start: string, end: string): void {\n        fetch(`/api/expenses/file/${start}/${end}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res => checkStatus<Blob>(res, 'blob'))\n            .then(blob => {\n                var url = window.URL.createObjectURL(blob);\n                var a = document.createElement('a');\n                a.href = url;\n                a.download = filename;\n                document.body.appendChild(a);\n                a.click();\n                a.remove();      \n            });\n    }\n}\n\nexport default API","import { openDB, DBSchema, IDBPDatabase } from 'idb'\nimport { AllDataListsType, ExpensesFormType, IncomeFormType, WallChartDataType } from '../interfaces/Interfaces';\nimport API from './API';\n\ninterface financesDB extends DBSchema {\n  expenses: {\n    value: {\n      amount: number,\n      date: Date | null,\n      person_id: number,\n      vendor: string,\n      broad_category_id: number,\n      narrow_category_id: number,\n      notes: string\n    },\n    key: string\n  },\n  income: {\n    value: {\n      date: Date | null,\n      amount: number,\n      person_id: number,\n      source: string,\n    },\n    key: string\n  },\n  broad_categories: {\n    value: {\n      name: string,\n      id: number,\n      person: boolean\n    },\n    key: string\n  },\n  narrow_categories: {\n    value: {\n      name: string,\n      id: number,\n      broad_category_id: number\n    },\n    key: string\n  },\n  persons: {\n    value: {\n      name: string,\n      id: number\n    },\n    key: string\n  },\n  wallchart: {\n    value: {\n      labels: string[],\n      income: number[],\n      expenses: number[]\n    },\n    key: string\n  },\n}\n\n\nlet db: IDBPDatabase<financesDB>;\nexport async function testDatabase() {\n  db = await openDB<financesDB>(\"finances\", 1, {\n    async upgrade(db) {\n      db.createObjectStore('expenses', { autoIncrement: true })\n      db.createObjectStore('income', { autoIncrement: true })\n      db.createObjectStore('broad_categories', { autoIncrement: true })\n      db.createObjectStore('narrow_categories', { autoIncrement: true })\n      db.createObjectStore('persons', { autoIncrement: true })\n      db.createObjectStore('wallchart', { autoIncrement: true })\n    }\n  });\n\n  if (navigator.onLine) {\n    checkDatabase();\n  }\n}\n\nexport async function saveRecord(table: 'income' | 'expenses', record: ExpensesFormType | IncomeFormType) {\n  await db.put(table, record);\n}\n\nexport async function saveCategories(categories: AllDataListsType) {\n  (Object.keys(categories) as Array<keyof AllDataListsType>).map((category: keyof AllDataListsType) => {\n    db.clear(category)\n    categories[category as keyof AllDataListsType]?.map(c => {\n      db.put(category, c)\n    })\n  })\n}\n\nexport async function loadCategories() {\n  let tables: Array<keyof AllDataListsType> = ['broad_categories', 'narrow_categories', 'persons']\n  let categories: AllDataListsType = {\n    'broad_categories': [],\n    'narrow_categories': [],\n    'persons': []\n  };\n  tables.map(async table => {\n    let category = await db.getAll(table)\n    categories[table] = category\n  })\n  return categories\n}\n\nexport async function saveWallChartData(data: WallChartDataType) {\n  await db.clear('wallchart');\n  db.put('wallchart', data);\n}\n\nexport async function loadWallChartData(): Promise<WallChartDataType> {\n  let data = await db.getAll('wallchart');\n  return data[0];\n}\n\nexport async function emptyDatabase(): Promise<string> {\n  try {\n    await db.clear('expenses')\n    await db.clear('income')\n    return \"pendingFinances cleared!\"\n  } catch (err) {\n    return err\n  }\n}\n\nasync function checkDatabase() {\n  let token = localStorage.getItem('token')\n  try {\n    const pendingExpenses = await db.getAll(\"expenses\");\n    if (pendingExpenses.length > 0) {\n      await API.postBatchExpenses(token, pendingExpenses)\n      // delete records if successful\n      db.clear('expenses')\n    }\n    const pendingIncome = await db.getAll(\"income\");\n    if (pendingIncome.length > 0) {\n      await API.postBatchIncome(token, pendingIncome)\n      // delete records if successful\n      db.clear('income')\n    }\n  } catch (err) {\n    console.error(err)\n  }\n}\n\n// listen for app coming back online\nwindow.addEventListener(\"online\", checkDatabase);","import React, { useState } from 'react'\nimport API from '../utils/API'\nimport { saveRecord } from '../utils/db'\nimport { AuthContext } from '../App'\nimport { ExpensesFormType, AllDataListsType, DataListStateType } from '../interfaces/Interfaces'\nimport {\n    Button,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    InputAdornment,\n    Typography,\n    DialogContent,\n    IconButton\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close'\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\n\n\nexport default function AddRecordsForm(props: {\n    classes: { root: string, formControl: string, close: string },\n    handleClose: Function,\n    categories: AllDataListsType,\n    setOpenBackdrop: Function,\n    reloadWallChart: Function\n}) {\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\n\n    const initialFormState = {\n        date: new Date(Date.now()),\n        amount: NaN,\n        person_id: NaN,\n        broad_category_id: NaN,\n        narrow_category_id: NaN,\n        vendor: \"\",\n        notes: \"\"\n    }\n\n    // Form control state\n    const [formState, setFormState] = useState<ExpensesFormType>(initialFormState)\n\n    // State to hold category info\n    const [currentBroadCategory, setCurrentBroadCategory] = useState<DataListStateType>({\n        name: \"\",\n        id: NaN,\n    })\n\n    const [currentNarrowCategories, setCurrentNarrowCategories] = useState<DataListStateType[]>([])\n\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\n        let name = event.target.name as keyof typeof formState\n        setFormState({ ...formState, [name]: event.target.value })\n        if (name === 'broad_category_id') {\n            let category = props.categories.broad_categories.filter(i => i.id === event.target.value)[0]\n            setCurrentBroadCategory(category)\n            let narrowCategories = props.categories.narrow_categories.filter(i => i.broad_category_id === category.id)\n            setCurrentNarrowCategories(narrowCategories)\n        }\n    }\n\n    function handleDateChange(date: Date | null) {\n        setFormState({ ...formState, date: date });\n    };\n\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n        event.preventDefault()\n        if (!formState.date || !formState.amount || !formState.broad_category_id || !formState.vendor) {\n            setAlertState({\n                severity: \"error\",\n                message: \"Please fill out all fields\",\n                open: true\n            })\n            return\n        }\n        let formStateConvertedDate: any = { ...formState }\n        formStateConvertedDate.date = formStateConvertedDate.date?.toLocaleDateString(\"en-US\")\n        try {\n            props.setOpenBackdrop(true)\n            await API.postExpenses(Auth.token, formStateConvertedDate)\n            props.setOpenBackdrop(false)\n            setAlertState({\n                severity: \"success\",\n                message: \"Record Saved!\",\n                open: true\n            })\n            props.reloadWallChart()\n        } catch (err) {\n            props.setOpenBackdrop(false)\n            if (err.message === \"Error! 500\") {\n                setAlertState({\n                    severity: \"error\",\n                    message: \"Server Error! Contact Eli\",\n                    open: true\n                })\n                return\n            } else {\n                saveRecord('expenses', formStateConvertedDate)\n                if (err.message === \"Unauthorized\") {\n                    setAuth({ type: 'LOGOUT' })\n                }\n                setAlertState({\n                    severity: \"warning\",\n                    message: \"Record Saved Locally\",\n                    open: true\n                })\n            }\n        } finally {\n            setFormState(initialFormState)\n            setCurrentBroadCategory({\n                name: \"\",\n                id: NaN\n            })\n        }\n    }\n\n    return (\n        <DialogContent>\n            <IconButton\n                className={props.classes.close}\n                onClick={() => {\n                    setFormState(initialFormState)\n                    props.handleClose()\n                }}><CloseIcon /></IconButton>\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Log Expense</Typography>\n            <form className={props.classes.root} onSubmit={handleFormSubmit}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        fullWidth\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        name=\"Date\"\n                        label=\"Date\"\n                        value={formState.date}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.vendor}\n                    label=\"Vendor\"\n                    name=\"vendor\"\n                    type=\"string\"\n                    InputLabelProps={{ shrink: true }}\n                />\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.amount}\n                    label=\"Amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    inputProps={{ step: \"0.01\" }}\n                />\n                <FormControl\n                    className={props.classes.formControl}>\n                    <InputLabel htmlFor=\"broad_category\">Broad Category</InputLabel>\n                    <Select\n                        onChange={handleFormChange}\n                        value={formState.broad_category_id}\n                        name=\"broad_category_id\"\n                        labelId=\"broad_category\"\n                        label=\"Broad Category\"\n                    >\n                        {props.categories.broad_categories.map(i => (\n                            <MenuItem value={i.id}>{i.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                {currentNarrowCategories.length > 0 ? (\n                    <FormControl className={props.classes.formControl}>\n                        <InputLabel htmlFor=\"narrow_category\">Narrow Category</InputLabel>\n                        <Select\n                            onChange={handleFormChange}\n                            value={formState.narrow_category_id}\n                            name=\"narrow_category_id\"\n                            labelId=\"narrow_category\"\n                            label=\"Narrow Category\"\n                        >\n                            {/* Get the list of narrow categories corresponding to the selected broad category */}\n                            {currentNarrowCategories?.map(i => (\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                ) : null}\n                {currentBroadCategory.person ? (\n\n                    <FormControl className={props.classes.formControl}>\n                        <InputLabel htmlFor=\"person_id\">Person</InputLabel>\n                        <Select\n                            onChange={handleFormChange}\n                            value={formState.person_id}\n                            name=\"person_id\"\n                            labelId=\"person_id\"\n                            label=\"Person\"\n                        >\n                            {props.categories.persons.map(i => (\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                ) : null}\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.notes}\n                    label=\"Notes\"\n                    name=\"notes\"\n                    type=\"string\"\n                    InputLabelProps={{ shrink: true }}\n                />\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                >Submit</Button>\n            </form>\n        </DialogContent>\n    )\n}","import React, { useState } from 'react'\nimport API from '../utils/API'\nimport { AuthContext } from '../App'\nimport type { IncomeFormType, AllDataListsType } from '../interfaces/Interfaces'\nimport {\n    Button,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    InputAdornment,\n    Typography,\n    DialogContent,\n    IconButton\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close'\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { saveRecord } from '../utils/db';\n\n\nexport default function AddRecordsForm(props: {\n    classes: { root: string, formControl: string, close: string },\n    handleClose: Function,\n    categories: AllDataListsType,\n    setOpenBackdrop: Function,\n    reloadWallChart: Function\n}) {\n\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\n\n    const initialFormState = {\n        date: new Date(Date.now()),\n        amount: NaN,\n        person_id: NaN,\n        source: \"\",\n    }\n\n    // Form control state\n    const [formState, setFormState] = useState<IncomeFormType>(initialFormState)\n\n\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\n        let name = event.target.name as keyof typeof formState\n        setFormState({ ...formState, [name]: event.target.value })\n    }\n\n    function handleDateChange(date: Date | null) {\n        setFormState({ ...formState, date: date });\n    };\n\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n        event.preventDefault()\n        if (!formState.date || !formState.amount || !formState.person_id || !formState.source) {\n            setAlertState({\n                severity: \"error\",\n                message: \"Please fill out all fields\",\n                open: true\n            })\n            return\n        }\n        let formStateConvertedDate: any = { ...formState }\n        try {\n            formStateConvertedDate.date = formStateConvertedDate.date?.toLocaleDateString(\"en-US\")\n            props.setOpenBackdrop(true)\n            await API.postIncome(Auth.token, formStateConvertedDate)\n            props.setOpenBackdrop(false)\n            setAlertState({\n                severity: \"success\",\n                message: \"Record Saved!\",\n                open: true\n            })\n            props.reloadWallChart()\n        } catch (err) {\n            props.setOpenBackdrop(false)\n            if (err.message === \"Error! 500\") {\n                setAlertState({\n                    severity: \"error\",\n                    message: \"Server Error!\",\n                    open: true\n                })\n                return\n            } else {\n                saveRecord('income', formStateConvertedDate)\n                setAlertState({\n                    severity: \"warning\",\n                    message: \"Record Saved Locally\",\n                    open: true\n                })\n                if (err.message === \"Unauthorized\") {\n                    setAuth({ type: 'LOGOUT' })\n                }\n            }\n        } finally {\n            setFormState(initialFormState)\n        }\n    }\n\n    return (\n        <DialogContent>\n            <IconButton\n                className={props.classes.close}\n                onClick={() => {\n                    setFormState(initialFormState)\n                    props.handleClose()\n                }}><CloseIcon /></IconButton>\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Log Income</Typography>\n            <form className={props.classes.root} onSubmit={handleFormSubmit}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        name=\"Date\"\n                        label=\"Date\"\n                        value={formState.date}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.source}\n                    label=\"Source\"\n                    name=\"source\"\n                    type=\"string\"\n                    InputLabelProps={{ shrink: true }}\n                />\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.amount}\n                    label=\"Amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    inputProps={{ step: \"0.01\" }}\n                />\n                <FormControl className={props.classes.formControl}>\n                    <InputLabel htmlFor=\"person_id\">Person</InputLabel>\n                    <Select\n                        onChange={handleFormChange}\n                        value={formState.person_id}\n                        name=\"person_id\"\n                        labelId=\"person_id\"\n                        label=\"Person\"\n                    >\n                        {props.categories.persons.map(i => (\n                            <MenuItem value={i.id}>{i.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                >Submit</Button>\n            </form>\n        </DialogContent>\n    )\n}","import React from 'react';\r\nimport { fade, makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { AuthContext } from '../App'\r\nimport { emptyDatabase } from '../utils/db';\r\nimport API from '../utils/API'\r\nimport { FormStateType } from '../interfaces/Interfaces';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n            textAlign: 'center',\r\n            textTransform: 'capitalize'\r\n        },\r\n        search: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginRight: theme.spacing(1),\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing(3),\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIcon: {\r\n            padding: theme.spacing(0, 2),\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 0),\r\n            // vertical padding + font size from searchIcon\r\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('md')]: {\r\n                width: '20ch',\r\n            },\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function MyAppBar({ setEditOpen }: { setEditOpen: Function }) {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const { Auth, setAuth } = React.useContext(AuthContext)\r\n\r\n    function edit(): void {\r\n        setEditOpen(true)\r\n    }\r\n\r\n    function downloadFile(): void {\r\n        API.downloadFile(Auth.token, `${Auth.user}_expenses.xlsx`, \"2020-01-01\", \"2020-12-31\")\r\n        handleMenuClose()\r\n    }\r\n\r\n    function logout(): void {\r\n        setAuth({ type: 'LOGOUT' })\r\n        emptyDatabase()\r\n    }\r\n\r\n    const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const menuId = 'primary-search-account-menu';\r\n    const renderMenu = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItem onClick={edit}>Edit</MenuItem>\r\n            <MenuItem onClick={downloadFile}>Downloads</MenuItem>\r\n            <MenuItem onClick={logout}>Logout</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        {Auth.user}'s Finances\r\n                    </Typography>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            onClick={edit}\r\n                        >Edit\r\n                </Button>\r\n\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            onClick={downloadFile}\r\n                        // edge=\"end\"\r\n                        >Download\r\n                    </Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            onClick={logout}\r\n                        // edge=\"end\"\r\n                        >Logout\r\n                    </Button>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon />\r\n                        </IconButton>\r\n\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMenu}\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\nimport { Paper, Table, TableBody, TableContainer, TableCell, TableRow, TableHead } from '@material-ui/core';\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { TableDataEntry } from '../interfaces/Interfaces';\nimport { blueGrey } from '@material-ui/core/colors';\n\n// import StaticRow from './StaticRow';\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n    createStyles({\n        head: {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white,\n            padding: 10,\n            fontSize: 16\n        },\n        body: {\n            padding: 10,\n            fontSize: 14,\n        },\n    }),\n)(TableCell);\n\nconst DarkTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: theme.palette.background.default,\n            cursor: 'pointer'\n        },\n    }),\n)(TableRow);\n\nconst LightTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: blueGrey[800],\n        },\n    }),\n)(TableRow);\n\nconst ExtraLightTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: blueGrey[700],\n        },\n    }),\n)(TableRow);\n\nexport default function PivotTable(props: {\n    state:\n    {\n        schema:\n        {\n            fields: { name: string }[]\n        },\n        data: TableDataEntry[]\n\n    },\n}) {\n\n    const [show, setShow] = useState<boolean[]>([false])\n\n    function toggleShowRow(i: number) {\n        let newShow = [...show]\n        newShow[i] = !newShow[i]\n        setShow(newShow)\n    }\n\n    const pivotState = props.state.data.reduce((a, b) => {\n        if (b.broad_category) {\n            if (a[b.broad_category]) {\n                a[b.broad_category].total += parseFloat(b.amount);\n            } else {\n                a[b.broad_category] = { total: parseFloat(b.amount), narrow_categories: {} };\n            }\n            if (b.narrow_category) {\n                if (a[b.broad_category].narrow_categories[b.narrow_category]) {\n                    a[b.broad_category].narrow_categories[b.narrow_category].total += parseFloat(b.amount);\n                } else {\n                    a[b.broad_category].narrow_categories[b.narrow_category] = {total: parseFloat(b.amount), persons: {}}   ;\n                }\n                if (b.person) {\n                    if (a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person]) {\n                        a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person] += parseFloat(b.amount);\n                    } else {\n                        a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person] = parseFloat(b.amount);\n                    }\n                }\n            } else if (b.person) {\n                if (a[b.broad_category].narrow_categories[\"--\"]?.persons[b.person]) {\n                    a[b.broad_category].narrow_categories[\"--\"].persons[b.person] += parseFloat(b.amount);\n                    a[b.broad_category].narrow_categories[\"--\"].total += parseFloat(b.amount);\n                } else {\n                a[b.broad_category].narrow_categories = {...a[b.broad_category].narrow_categories, \"--\": {persons: {[b.person]: parseFloat(b.amount)}, total: parseFloat(b.amount)}}\n                }\n            }\n        }\n        return a\n    }, {} as any)\n\n    console.log(pivotState)\n\n    useEffect(() => {\n        let showState = Object.keys(pivotState).map((i: any) => false)\n        setShow(showState)\n    }, [props])\n    return (\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>\n                            Broad category\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            Narrow Category\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            person\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            amount\n                        </StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(pivotState).map((bCat, i) => (\n                        <>\n                            <DarkTableRow key={i} onClick={() => toggleShowRow(i)}>\n                                <StyledTableCell>\n                                    {bCat}\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    TOTAL\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    {/* Empty Cell */}\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    ${pivotState[bCat].total.toFixed(2)}\n                                </StyledTableCell>\n                            </DarkTableRow>\n                            {pivotState[bCat].narrow_categories && show[i] ? (\n                                Object.keys(pivotState[bCat].narrow_categories).map(nCat => (\n                                    <>\n                                        <LightTableRow>\n                                            <StyledTableCell>\n                                                {/* Empty Cell */}\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                {nCat}\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                TOTAL\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                ${pivotState[bCat].narrow_categories[nCat].total.toFixed(2)}\n                                            </StyledTableCell>\n                                        </LightTableRow>\n                                        {pivotState[bCat].narrow_categories[nCat].persons ? (\n                                            Object.keys(pivotState[bCat].narrow_categories[nCat].persons).map((person: string) => (\n                                                <ExtraLightTableRow>\n                                                    <StyledTableCell>\n                                                    </StyledTableCell>\n                                                    <StyledTableCell>\n                                                    </StyledTableCell>\n                                                    <StyledTableCell>\n                                                        {person}\n                                                    </StyledTableCell>\n                                                    <StyledTableCell>\n                                                        ${pivotState[bCat].narrow_categories[nCat].persons[person].toFixed(2)}\n\n                                                    </StyledTableCell>\n                                                </ExtraLightTableRow>\n                                            ))\n                                            ) : null\n                                        }\n                                    </>\n                                ))\n                            ) : null}\n                        </>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import React from 'react'\nimport {\n    Container,\n    Card,\n    FormControl,\n    InputLabel,\n    Select,\n    TextField,\n    MenuItem,\n    Button\n} from '@material-ui/core'\nimport {FormStateType} from '../interfaces/Interfaces'\n\nexport default function Form({\n    classes, \n    handleFormSubmit, \n    handleFormChange, \n    formState }: {\n    classes: {\n        root: string, \n        formControl: string\n    },\n    handleFormSubmit: (event: React.FormEvent<HTMLFormElement>) => void,\n    handleFormChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>)=> void,\n    formState: FormStateType\n}) {\n    return (\n        <Container className={classes.root}>\n                    <Card variant=\"outlined\">\n                        <h2 className={classes.root}>Reports</h2>\n                        <form onSubmit={handleFormSubmit} className={classes.root}>\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\n                                <InputLabel htmlFor=\"form\">Report</InputLabel>\n                                <Select\n                                    name=\"form\"\n                                    label=\"Report\"\n                                    labelId=\"form\"\n                                    value={formState.form}\n                                    onChange={handleFormChange}>\n                                    <MenuItem value=\"income\">Income</MenuItem>\n                                    <MenuItem value=\"expenses\">Expenses</MenuItem>\n                                    <MenuItem value=\"pivot\">Pivot Table</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <TextField\n                                onChange={handleFormChange}\n                                value={formState.year}\n                                label=\"Year\"\n                                name=\"year\"\n                                type=\"number\"\n                                variant=\"outlined\"\n                            />\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\n                                <InputLabel htmlFor=\"month2\">Month</InputLabel>\n                                <Select\n                                    onChange={handleFormChange}\n                                    value={formState.month}\n                                    name=\"month\"\n                                    labelId=\"month2\"\n                                    label=\"Month\"\n                                >\n                                    <MenuItem value={1}>January</MenuItem>\n                                    <MenuItem value={2}>February</MenuItem>\n                                    <MenuItem value={3}>March</MenuItem>\n                                    <MenuItem value={4}>April</MenuItem>\n                                    <MenuItem value={5}>May</MenuItem>\n                                    <MenuItem value={6}>June</MenuItem>\n                                    <MenuItem value={7}>July</MenuItem>\n                                    <MenuItem value={8}>August</MenuItem>\n                                    <MenuItem value={9}>September</MenuItem>\n                                    <MenuItem value={10}>October</MenuItem>\n                                    <MenuItem value={11}>November</MenuItem>\n                                    <MenuItem value={12}>December</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                            >\n                                View\n                        </Button>\n                        </form>\n                    </Card>\n                </Container>\n    )\n}","import React from \"react\";\nimport { Container } from '@material-ui/core';\nimport { Line } from \"react-chartjs-2\";\nimport { ChartJSDataType } from \"../interfaces/Interfaces\";\n\n\nexport default function WallChart({data}: {data: ChartJSDataType}) {\n    return (\n        <Container>\n            <Line data={data} height={400} options={{\n\t\tmaintainAspectRatio: false\n\t}}/>\n        </Container>\n    );\n}","import React, { useState } from 'react'\nimport {\n    DialogContent,\n    Typography,\n    Button,\n    TextField,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    Select,\n    MenuItem,\n    Checkbox,\n    Card,\n    CardContent,\n    IconButton\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { AllDataListsType, EditFormType } from '../interfaces/Interfaces'\nimport API from '../utils/API'\nimport { AuthContext } from '../App'\n\nexport default function Edit(props: {\n    handleClose: Function,\n    classes: { root: string, formControl: string, card: string, close: string },\n    categories: AllDataListsType,\n    setCategories: Function,\n    setOpenBackdrop: Function\n}) {\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\n\n    const initialFormState = {\n        person: \"\",\n        broad_category: \"\",\n        broad_category_id: NaN,\n        narrow_category: \"\",\n        has_person: false\n    }\n\n    // Form control state\n    const [formState, setFormState] = useState<EditFormType>(initialFormState)\n\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\n        let name = event.target.name as keyof EditFormType\n        let value = event.target.value\n        if (name === 'has_person') {\n            // Casting event.target so that ts knows check property will be there\n            value = (event.target as HTMLInputElement).checked\n        }\n        setFormState({ ...formState, [name]: value })\n    }\n\n    async function handleFormSubmit(event: React.SyntheticEvent, form: 'person' | 'narrow_category' | 'broad_category'): Promise<any> {\n        event.preventDefault()\n        props.setOpenBackdrop(true)\n        let data\n        try {\n            switch (form) {\n                case 'person':\n                    data = { person: formState.person }\n                    if (!data.person) {\n                        throw new Error(\"Empty Input\")\n                    }\n                    break;\n                case 'broad_category':\n                    data = {\n                        broad_category: formState.broad_category,\n                        has_person: formState.has_person\n                    }\n                    if (!data.broad_category) {\n                        throw new Error(\"Empty Input\")\n                    }\n                    break;\n                case 'narrow_category':\n                    data = {\n                        narrow_category: formState.narrow_category,\n                        broad_category_id: formState.broad_category_id,\n                        has_person: formState.has_person\n                    }\n                    if (!data.narrow_category || !data.broad_category_id) {\n                        throw new Error(\"Empty Input\")\n                    }\n                    break;\n            }\n            await API.addCategories(Auth.token, data)\n            setAlertState({\n                severity: \"success\",\n                message: \"Category Added!\",\n                open: true\n            })\n            let updatedCategories = await API.getCategories(Auth.token)\n            props.setCategories(updatedCategories);\n\n        } catch (err) {\n            switch (err.message) {\n                case \"Error! 500\":\n                    setAlertState({\n                        severity: \"error\",\n                        message: \"Server Error!\",\n                        open: true\n                    })\n                    break;\n                case \"Unauthorized\":\n                    setAuth({ type: 'LOGOUT' })\n                    break;\n                case \"Empty Input\":\n                    setAlertState({\n                        severity: \"error\",\n                        message: \"Please fill out all fields\",\n                        open: true\n                    })\n                    break;\n                default:\n                    setAlertState({\n                        severity: \"error\",\n                        message: \"You must be connected to the internet to add categories\",\n                        open: true\n                    })\n            }\n        } finally {\n            props.setOpenBackdrop(false)\n            setFormState(initialFormState)\n        }\n    }\n\n    return (\n        <DialogContent>\n            <IconButton onClick={() => props.handleClose()} className={props.classes.close}><CloseIcon /></IconButton>\n            <Card className={props.classes.card}>\n                <CardContent>\n\n                    <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Person</Typography>\n                    <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'person')}>\n                        <TextField\n                            onChange={handleFormChange}\n                            value={formState.person}\n                            label=\"Person\"\n                            name=\"person\"\n                            type=\"string\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >Add</Button>\n                    </form>\n                </CardContent>\n            </Card>\n            <Card className={props.classes.card}>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Broad Category</Typography>\n                    <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'broad_category')}>\n                        <TextField\n                            onChange={handleFormChange}\n                            value={formState.broad_category}\n                            label=\"Broad Category\"\n                            name=\"broad_category\"\n                            type=\"string\"\n                        />\n                        <FormControlLabel control={<Checkbox\n                            checked={formState.has_person}\n                            onChange={handleFormChange}\n                            name=\"has_person\"\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\n                        />}\n                            label=\"Person\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >Add</Button>\n                    </form>\n                </CardContent>\n            </Card>\n            <Card className={props.classes.card}>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Narrow Category</Typography>\n                    <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'narrow_category')}>\n                        <FormControl\n                            className={props.classes.formControl}>\n                            <InputLabel htmlFor=\"broad_category\">Broad Category</InputLabel>\n                            <Select\n                                onChange={handleFormChange}\n                                name=\"broad_category_id\"\n                                labelId=\"broad_category_id\"\n                                label=\"Broad Category\"\n                            >\n                                {props.categories.broad_categories.map(i => (\n                                    <MenuItem value={i.id}>{i.name}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            onChange={handleFormChange}\n                            value={formState.narrow_category}\n                            label=\"Narrow Category\"\n                            name=\"narrow_category\"\n                            type=\"string\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >Add</Button>\n                    </form>\n                </CardContent>\n            </Card>\n        </DialogContent>\n    )\n}","import React, { useState, useEffect, useReducer } from 'react';\nimport ReportTable from '../components/Table';\nimport AddExpensesForm from '../components/AddExpensesForm'\nimport AddIncomeForm from '../components/AddIncomeForm'\nimport API from '../utils/API'\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport { AuthContext } from '../App'\nimport type {\n    TableDataEntry,\n    DataListStateType,\n    AllDataListsType,\n    FormStateType,\n    InputName,\n    ChartJSDataType,\n    WallChartDataType\n} from '../interfaces/Interfaces'\nimport {\n    Button,\n    Container,\n    Dialog,\n    Box\n} from '@material-ui/core';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddIcon from '@material-ui/icons/Add'\nimport {\n    emptyDatabase,\n    saveCategories,\n    loadCategories,\n    saveWallChartData,\n    loadWallChartData\n} from '../utils/db';\nimport AppBar from '../components/AppBar';\n\nimport PivotTable from '../components/PivotTable';\nimport Form from '../components/Form';\nimport WallChart from '../components/Chart'\nimport Edit from '../components/Edit';\n\nfunction Home() {\n    const theme = useTheme();\n\n    const { Auth, setAuth, setAlertState, setOpenBackdrop } = React.useContext(AuthContext)\n\n    // Form control state\n    const [formState, setFormState] = useState<FormStateType>(\n        {\n            form: \"expenses\",\n            year: new Date(Date.now()).getUTCFullYear(),\n            month: new Date(Date.now()).getUTCMonth() + 1\n        }\n    )\n\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: TableDataEntry[] }>(\n        {\n            schema: { fields: [] },\n            data: [{\n                amount: \"\",\n                date: \"\",\n                source: \"\",\n                person: \"\",\n                id: NaN,\n                person_id: NaN\n            }]\n        }\n    )\n\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: TableDataEntry[] }>(\n        {\n            schema: { fields: [] },\n            data: [{\n                amount: \"\",\n                date: \"\",\n                source: \"\",\n                vendor: \"\",\n                broad_category: \"\",\n                narrow_category: \"\",\n                person: \"\",\n                notes: \"\",\n                id: NaN\n            }]\n        }\n\n    )\n\n    // State for datalists\n    const [categoriesState, setCategoriesState] = useState<AllDataListsType>({\n        persons: [],\n        narrow_categories: [],\n        broad_categories: [],\n    })\n\n    // State For WallChart\n    function reducer(state: ChartJSDataType, action: WallChartDataType): ChartJSDataType {\n        if (action.labels.length > 0) {\n            state = {\n                labels: action.labels,\n                datasets: [\n                    {\n                        label: \"Income\",\n                        data: action.income,\n                        fill: false,\n                        borderColor: theme.palette.primary.main\n                    },\n                    {\n                        label: \"Expenses\",\n                        data: action.expenses,\n                        fill: false,\n                        borderColor: theme.palette.secondary.main\n                    }\n                ]\n            }\n        }\n        return state\n    }\n\n    const [wallChartData, setWallChartData] = useReducer(reducer, {\n        labels: [],\n        datasets: [\n            {\n                label: \"Income\",\n                data: [],\n                fill: false,\n                borderColor: theme.palette.primary.main\n            },\n            {\n                label: \"Expenses\",\n                data: [],\n                fill: false,\n                borderColor: theme.palette.secondary.main\n            }\n        ]\n    })\n\n    // Converts dates to human-readable format\n    function formatDates(entry: TableDataEntry): TableDataEntry {\n        if (!entry.date) {\n            return entry\n        } else {\n            let date = new Date(entry.date);\n            let year = date.getUTCFullYear();\n            let month = (1 + date.getUTCMonth()).toString();\n            month = month.length > 1 ? month : '0' + month;\n            let day = date.getUTCDate().toString();\n            day = day.length > 1 ? day : '0' + day;\n            let dateString = month + '/' + day + '/' + year;\n            entry.date = dateString\n            return entry\n        }\n    }\n\n    // Form control\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>): void {\n        let name = event.target.name as keyof typeof formState\n        setFormState({ ...formState, [name]: event.target.value })\n    }\n\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n        try {\n            event.preventDefault()\n            let route = formState.form\n            setOpenBackdrop(true)\n            let response = await API[route](Auth.token, formState)\n            setOpenBackdrop(false)\n            // Formatting the dates the hard way because javascript doesn't support strftime...\n            if (route !== 'pivot') {\n                response.data = response.data.map(formatDates)\n            }\n            switch (route) {\n                case \"expenses\":\n                    setExpensesTableState(response)\n                    break;\n                case \"income\":\n                    setIncomeTableState(response)\n                    break;\n                case \"pivot\":\n                    setExpensesTableState(response)\n                    break;\n            }\n        } catch (err) {\n            if (err.message === \"Unauthorized\") {\n                setAuth({ type: 'LOGOUT' })\n            }\n            setOpenBackdrop(false)\n            setAlertState({\n                severity: \"error\",\n                message: \"Error Fetching Data\",\n                open: true\n            })\n        }\n    }\n\n    // Helper function for assigning an id to a TableDataEntry if user input matches an existing record\n    function assignId(\n        name: InputName,\n        value: string) {\n\n        let state;\n        let id;\n\n        switch (name) {\n            case \"person\":\n                state = categoriesState.persons;\n                id = 'person_id';\n                break;\n            case \"broad_category\":\n                state = categoriesState.broad_categories;\n                id = 'broad_category_id';\n                break;\n            case \"narrow_category\":\n                state = categoriesState.narrow_categories;\n                id = 'narrow_category_id';\n                break;\n        }\n        let dataListItem = state.filter((i: DataListStateType) => i.name === value)[0]\n        if (dataListItem) {\n            return { id: id, dataListItem: dataListItem }\n        } else {\n            return { id: null, dataListItem: null }\n        }\n    }\n\n    // Keep global state synced with InputRow state\n    async function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\n        try {\n            let { name, value } = event.target;\n            let newExpensesTableStateData: TableDataEntry[] = [...expensesTableState.data]\n            let updatedRow: TableDataEntry = { ...newExpensesTableStateData[index], [name]: value }\n            if (name === \"person\" || name === \"broad_category\" || name === \"narrow_category\") {\n                let { id, dataListItem } = assignId(name as InputName, value)\n                if (id && dataListItem) {\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\n                }\n            }\n            newExpensesTableStateData[index] = updatedRow\n            setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\n\n        } catch (err) {\n            console.error(err)\n            if (err.message === \"Unauthorized\") {\n                setAuth({ type: 'LOGOUT' })\n            }\n        }\n    }\n\n    // Keep global state synced with InputRow state\n    async function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\n        try {\n            let { name, value } = event.target;\n            let newIncomeTableStateData: TableDataEntry[] = [...incomeTableState.data]\n            let updatedRow: TableDataEntry = { ...newIncomeTableStateData[index], [name]: value }\n            if (name === \"person\") {\n                let { id, dataListItem } = assignId(name as InputName, value)\n                if (id && dataListItem) {\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\n                }\n            }\n            newIncomeTableStateData[index] = updatedRow\n            setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    // Update an expense row altered by the user\n    async function updateExpensesRow(index: number): Promise<void> {\n        try {\n            await API.updateExpenses(Auth.token, expensesTableState.data[index])\n            setAlertState({\n                severity: \"success\",\n                message: \"Record updated!\",\n                open: true\n            })\n            reloadWallChartData()\n        } catch (err) {\n            console.log(err)\n            setAlertState({\n                severity: \"error\",\n                message: \"Error: Failed to save!\",\n                open: true\n            })\n        }\n    }\n\n    // Update an income row altered by the user\n    async function updateIncomeRow(index: number): Promise<void> {\n        try {\n            await API.updateIncome(Auth.token, incomeTableState.data[index])\n            setAlertState({\n                severity: \"success\",\n                message: \"Record updated!\",\n                open: true\n            })\n            reloadWallChartData()\n        } catch (err) {\n            setAlertState({\n                severity: \"error\",\n                message: \"Error: Failed to save!\",\n                open: true\n            })\n        }\n    }\n\n    // Reload data for Wallchart\n    async function reloadWallChartData(): Promise<void> {\n        let data;\n        try {\n            data = await API.wallchart(Auth.token)\n            setWallChartData(data)\n            saveWallChartData(data)\n        } catch (err) {\n            if (err.message === \"No Data\") {\n                console.log(\"No Data!\")\n            } else {\n                data = await loadWallChartData()\n                setWallChartData(data)\n            }\n        }\n    }\n\n    // Delete a row from the database\n    async function deleteEntry(id: number | undefined) {\n        try {\n            if (formState.form === \"expenses\") {\n                await API.deleteExpenses(Auth.token, id);\n                let newExpensesTableStateData = expensesTableState.data.filter(entry => entry.id !== id)\n                setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\n            } else if (formState.form === \"income\") {\n                await API.deleteIncome(Auth.token, id);\n                let newIncomeTableStateData = incomeTableState.data.filter(entry => entry.id !== id)\n                setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\n            }\n            reloadWallChartData()\n        } catch (err) {\n            console.error(err)\n            if (err === 'Unauthorized') {\n                setAuth({ type: 'LOGOUT' })\n            }\n        }\n    }\n\n    // Download Excel File\n    function downloadFile(): void {\n        API.downloadFile(Auth.token, `${Auth.user}_expenses.xlsx`, \"2021-01-01\", \"2021-05-01\")\n    }\n\n    // Create classes to use for styling\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            home: {\n                padding: '0 0 6em 0'\n            },\n            formControl: {\n                margin: theme.spacing(1),\n                minWidth: '10em'\n            },\n            selectEmpty: {\n                marginTop: theme.spacing(2),\n            },\n            root: {\n                display: 'flex',\n                justifyContent: 'center',\n                flexWrap: 'wrap',\n                [theme.breakpoints.up('md')]: {\n                    flexWrap: 'noWrap',\n                },\n                '& > *': {\n                    margin: theme.spacing(1),\n                    [theme.breakpoints.down('xs')]: {\n                        width: '100%',\n                    },\n                },\n            },\n            wallchart: {\n                width: '100%'\n            },\n            logoutBtn: {\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                margin: '1em',\n            },\n            downloadBtn: {\n                position: 'fixed',\n                top: '0px',\n                right: '100px',\n                margin: '1em',\n            },\n            editBtn: {\n                position: 'fixed',\n                top: '0px',\n                left: '0px',\n                margin: '1em',\n            },\n            offline: {\n                backgroundColor: theme.palette.secondary.main,\n                color: 'white',\n                textAlign: 'center',\n                position: 'sticky'\n            },\n            speedDial: {\n                position: 'fixed',\n                bottom: theme.spacing(2),\n                right: theme.spacing(2),\n            },\n            dialog: {\n                width: '100%',\n            },\n            datePicker: {\n                [theme.breakpoints.down('sm')]: {\n                    marginLeft: '-10px'\n                },\n            },\n            card: {\n                margin: '1em 0'\n            },\n            close: {\n                position: 'absolute',\n                right: '0',\n                top: '0'\n            }\n        })\n    );\n    const classes = useStyles();\n\n    // SpeedDial controls\n    const [speedDialOpen, setSpeedDialOpen] = React.useState(false);\n\n    const actions = [\n        { icon: <AddIcon />, name: 'Expenses', action: handleExpensesOpen, operation: 'product' },\n        { icon: <AddIcon />, name: 'Income', action: handleIncomeOpen, operation: 'tag' }\n    ]\n\n    const handleSpeedDialClose = () => {\n        setSpeedDialOpen(false);\n    };\n\n    const handleOpen = () => {\n        setSpeedDialOpen(true);\n    };\n\n    function handleExpensesOpen(): void {\n        setAddExpensesOpen(true)\n        setSpeedDialOpen(false)\n    }\n\n    function handleIncomeOpen(): void {\n        setAddIncomeOpen(true)\n        setSpeedDialOpen(false)\n    }\n\n    // Controls for Dialogs\n    const [addExpensesOpen, setAddExpensesOpen] = useState(false)\n    const [addIncomeOpen, setAddIncomeOpen] = useState(false)\n    const [editOpen, setEditOpen] = useState(false)\n    function handleClose() {\n        setAddExpensesOpen(false)\n        setAddIncomeOpen(false)\n        setEditOpen(false)\n    }\n\n    // Control display of Offline banner\n    const [offline, setOffline] = useState<boolean>(false)\n    window.addEventListener(\"offline\", () => setOffline(true))\n    window.addEventListener(\"online\", () => setOffline(false))\n\n    useEffect(() => {\n        async function getCategories(): Promise<void> {\n            try {\n                let categories = await API.getCategories(Auth.token)\n                setCategoriesState(categories)\n                saveCategories(categories)\n            } catch (err) {\n                let categories = await loadCategories()\n                setCategoriesState(categories)\n            }\n        }\n        getCategories()\n        reloadWallChartData()\n        if (!navigator.onLine) {\n            setOffline(true)\n        }\n    }, [Auth.token])\n\n    return (\n        <Box component='div' className={classes.home}>\n                <AppBar setEditOpen={setEditOpen}/>\n            <Box component='header' className=\"header\" >\n                <h1 style={{ textAlign: 'center'}}>Wall Chart</h1>\n                    {/* <Container className={classes.root}>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.editBtn}\n                    onClick={() => setEditOpen(true)}\n                >Edit\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    className={classes.downloadBtn}\n                    onClick={downloadFile}\n                >Download\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.logoutBtn}\n                    onClick={async () => {\n                        setAuth({ type: 'LOGOUT' })\n                        let res = await emptyDatabase()\n                        console.log(res)\n                    }}\n                >Logout\n                </Button>\n                </Container> */}\n                <WallChart data={wallChartData} />\n                <Form\n                    classes={classes}\n                    handleFormSubmit={handleFormSubmit}\n                    handleFormChange={handleFormChange}\n                    formState={formState}\n                />\n            </Box>\n            <div className=\"body\">\n                {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\n                    <ReportTable\n                        state={incomeTableState}\n                        dataLists={categoriesState}\n                        handleChange={handleIncomeChange}\n                        handleUpdate={updateIncomeRow}\n                        deleteEntry={deleteEntry}\n                        form={formState.form}\n                    />\n                ) : null}\n                {formState.form === \"expenses\" && expensesTableState.data[0]?.id ? (\n                    <ReportTable\n                        state={expensesTableState}\n                        dataLists={categoriesState}\n                        handleChange={handleExpensesChange}\n                        handleUpdate={updateExpensesRow}\n                        deleteEntry={deleteEntry}\n                        form={formState.form}\n                    />\n                ) : null}\n                {formState.form === \"pivot\" && expensesTableState.data[0]?.id ? (\n                    <PivotTable state={expensesTableState} />\n                ) : null}\n            </div>\n            <Dialog onClose={handleClose} open={editOpen} maxWidth='xl'>\n                <Edit\n                    classes={classes}\n                    handleClose={handleClose}\n                    categories={categoriesState}\n                    setCategories={setCategoriesState}\n                    setOpenBackdrop={setOpenBackdrop}\n                />\n            </Dialog>\n            <Dialog onClose={handleClose} open={addExpensesOpen} maxWidth='xl'>\n                <AddExpensesForm\n                    classes={classes}\n                    handleClose={handleClose}\n                    categories={categoriesState}\n                    setOpenBackdrop={setOpenBackdrop}\n                    reloadWallChart={reloadWallChartData}\n                />\n            </Dialog>\n            <Dialog onClose={handleClose} open={addIncomeOpen} maxWidth='xl'>\n                <AddIncomeForm\n                    classes={classes}\n                    handleClose={handleClose}\n                    categories={categoriesState}\n                    setOpenBackdrop={setOpenBackdrop}\n                    reloadWallChart={reloadWallChartData}\n                />\n            </Dialog>\n            <SpeedDial\n                ariaLabel=\"SpeedDial\"\n                className={classes.speedDial}\n                icon={<SpeedDialIcon />}\n                onClose={handleSpeedDialClose}\n                onOpen={handleOpen}\n                open={speedDialOpen}\n                onMouseLeave={() => { }}\n            >\n                {actions.map((action) => (\n                    <SpeedDialAction\n                        key={action.name}\n                        icon={action.icon}\n                        tooltipTitle={action.name}\n                        tooltipOpen\n                        onClick={action.action}\n                    />\n                ))}\n            </SpeedDial>\n\n        </Box >\n    );\n}\n\nexport default Home;","import React, { useState } from 'react'\nimport API from '../utils/API'\nimport { AuthContext } from '../App'\nimport { Button, DialogContent, TextField, Typography } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            justifyContent: 'center',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                [theme.breakpoints.down('xs')]: {\n                    width: '100%',\n                },\n            }\n        },\n        heading: {\n            textAlign: 'center',\n            fontFamily: 'Times New Roman, serif'\n        },\n    })\n);\n\nexport default function Signup({handleClose}: {handleClose: Function}) {\n    const { setAlertState, setOpenBackdrop } = React.useContext(AuthContext)\n\n    const [signupFormState, setSignupFormState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setSignupFormState({\n            ...signupFormState,\n            [name]: value,\n        });\n    };\n\n    const formSubmit = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        setOpenBackdrop(true)\n        try {\n            await API.signup(signupFormState)\n            setAlertState({\n                severity: \"success\",\n                message: \"You're signed up! Please log in\",\n                open: true\n            })\n            handleClose()\n        } catch (err) {\n            console.error(err)\n            setAlertState({\n                severity: \"error\",\n                message: \"Error Signing Up!\",\n                open: true\n            })\n        } finally {\n            setOpenBackdrop(false)\n        }\n    }\n\n    const classes = useStyles()\n\n    return (\n        <DialogContent>\n            <div style={{ textAlign: 'center' }}>\n            <Typography variant=\"h2\" component=\"h4\" className={classes.heading}>Sign Up</Typography>\n                <form className={classes.root} onSubmit={formSubmit}>\n                    <TextField\n                        onChange={handleChange}\n                        value={signupFormState.username}\n                        type=\"text\"\n                        name=\"username\"\n                        label=\"username\"\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        onChange={handleChange}\n                        value={signupFormState.password}\n                        type=\"password\"\n                        name=\"password\"\n                        label=\"password\"\n                        variant=\"outlined\"\n                    />\n                    <Button variant=\"contained\" color=\"primary\" name=\"signup\" type=\"submit\">Sign Up</Button>\n                </form>\n            </div>\n        </DialogContent>\n    );\n}","import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport API from '../utils/API'\nimport { AuthContext } from '../App'\nimport { Button, TextField, Dialog, Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Signup from '../components/Signup'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        heading: {\n            textAlign: 'center',\n            fontFamily: 'Times New Roman, serif'\n        },\n        signupBtn: {\n            float: 'right',\n            margin: '1em',\n        },\n        sidebar: {\n            display: 'flex',\n            justifyContent: 'center',\n            textAlign: 'center',\n            flexWrap: 'wrap',\n        },\n        form: {\n            display: 'flex',\n            justifyContent: 'center',\n            textAlign: 'center',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                display: 'flex',\n                justifyContent: 'center',\n                textAlign: 'center',\n                flexWrap: 'wrap',\n                [theme.breakpoints.down('xs')]: {\n                    width: '100%',\n                },\n            }\n        },\n        link: {\n            color: theme.palette.primary.main,\n            '&:hover': theme.palette.secondary.main \n        }\n    })\n);\n\nexport default function Login() {\n    const { Auth, setAuth, setAlertState, setOpenBackdrop } = React.useContext(AuthContext)\n\n    const [loginFormState, setLoginFormState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [signupOpen, setSignupOpen] = useState<boolean>(false)\n\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setLoginFormState({\n            ...loginFormState,\n            [name]: value,\n        });\n    };\n\n    const formSubmit = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        setOpenBackdrop(true)\n        try {\n            let newToken = await API.login(loginFormState)\n            setAuth({ type: 'LOGIN', payload: { user: loginFormState.username, token: newToken.token } })\n        } catch (err) {\n            console.error(err)\n            setAlertState({\n                severity: \"error\",\n                message: \"Incorrect username or password\",\n                open: true\n            })\n        } finally {\n            setOpenBackdrop(false)\n        }\n    }\n\n    const classes = useStyles()\n\n    function handleClose() {\n        setSignupOpen(false)\n    }\n\n    if (Auth.loggedIn) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <>\n            <Grid container className={classes.root}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h1\" component=\"h2\" gutterBottom className={classes.heading}>\n                        Flask of Finances\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} className={classes.sidebar}>\n                    <form className={classes.form} onSubmit={formSubmit}>\n                        <TextField\n                            onChange={inputChange}\n                            value={loginFormState.username}\n                            type=\"text\"\n                            name=\"username\"\n                            label=\"username\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            onChange={inputChange}\n                            value={loginFormState.password}\n                            type=\"password\"\n                            name=\"password\"\n                            label=\"password\"\n                            variant=\"outlined\"\n                        />\n                        <Button variant=\"contained\" color=\"primary\" name=\"login\" type=\"submit\">Login</Button>\n                            </form>\n                            </Grid>\n                        <Grid item xs={12} className={classes.sidebar}>\n\n            <Button\n                className={classes.link}\n                onClick={() => setSignupOpen(true)}\n            >Sign Up</Button>\n            </Grid>\n            </Grid>\n            <Dialog onClose={handleClose} open={signupOpen} maxWidth='xl'>\n                <Signup handleClose={handleClose} />\n            </Dialog>\n        </>\n    );\n}","import React from 'react';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nexport default function Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from './Alert'\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { AlertStateType } from '../interfaces/Interfaces';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    snackbar: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function CustomizedSnackbar({ state, setState }: {\n    state: AlertStateType,\n    setState: React.Dispatch<React.SetStateAction<AlertStateType>>\n    }) {\n\n    const classes = useStyles();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState({ ...state, open: false });\n    };\n\n    return (\n        <div className={classes.snackbar}>\n            <Snackbar\n                open={state.open}\n                autoHideDuration={3000}\n                onClose={handleClose}\n\n            >\n                <Alert onClose={handleClose} severity={state.severity}>\n                    {state.message}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}","import React, { useEffect, useState, useReducer } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport { testDatabase } from './utils/db'\nimport './App.css';\nimport CustomizedSnackbar from './components/SnackBar'\nimport { AlertStateType, Auth, ContextState } from './interfaces/Interfaces'\nimport { ThemeProvider, createMuiTheme, Theme, makeStyles, createStyles } from '@material-ui/core/styles';\nimport { green, blueGrey, purple } from '@material-ui/core/colors'\nimport { MuiPickersOverrides } from '@material-ui/pickers/typings/overrides';\nimport {\n  CssBaseline,\n  ThemeOptions,\n  Backdrop,\n  CircularProgress,\n} from '@material-ui/core'\n\n// Types to allow for theme customization\ntype overridesNameToClassKey = {\n  [P in keyof MuiPickersOverrides]: keyof MuiPickersOverrides[P];\n};\ntype CustomType = {\n  MuiPickersBasePicker: {\n    pickerView: {\n      maxWidth?: string;\n    };\n  };\n};\ndeclare module '@material-ui/core/styles/overrides' {\n  interface ComponentNameToClassKey extends overridesNameToClassKey { }\n  export interface ComponentNameToClassKey extends CustomType { }\n};\n\n// Instantiating default theme to use breakpoints\nconst defaultTheme = createMuiTheme();\n\n// Theme factory\nfunction createMyTheme(options: ThemeOptions) {\n  return createMuiTheme({\n    overrides: {\n      MuiPickersBasePicker: {\n        container: {\n          backgroundColor: blueGrey[900],\n          [defaultTheme.breakpoints.down(\"xs\")]: {\n            marginLeft: '-10px',\n          }\n        },\n      },\n      MuiCard: {\n        root: {\n          backgroundColor: blueGrey[900]\n        }\n      },\n      MuiDialogContent: {\n        root: {\n          backgroundColor: blueGrey[900]\n        }\n      },\n      MuiPickersCalendarHeader: {\n        iconButton: {\n          backgroundColor: blueGrey[900]\n        }\n      }\n    },\n    ...options\n  })\n};\n\n// Adding global palette colors\nconst theme = createMyTheme({\n  palette: {\n    type: 'dark',\n    background: {\n      default: blueGrey[900],\n    },\n    primary: {\n      main: green[900]\n    },\n    secondary: {\n      main: purple[800]\n    }\n  },\n});\n\n\n\n// Check if user is logged in before returning protected component/page\nconst ProtectedRoute = ({ component: Component, loggedIn, ...rest }: {\n  path: string,\n  loggedIn: boolean,\n  setLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n  <Route {...rest} render={props => (\n    loggedIn\n      ? <Component {...props} />\n      : <Redirect to='/login' />\n  )\n  } />\n\n)\n\nexport const AuthContext = React.createContext<ContextState>({\n  Auth: {\n    loggedIn: false,\n    user: \"\",\n    token: \"\"\n  },\n  setAuth: (): void => { },\n  setAlertState: (): void => { },\n  setOpenBackdrop: (): void => { }\n})\n\nexport default function App() {\n\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      backdrop: {\n        zIndex: 1301, // To be in front of Dialog at 1300\n        color: '#fff',\n      },\n    })\n  )\n\n  const classes = useStyles();\n  // Reducer state for Authentication values\n  const reducer = (state: Auth, action: { type: string, payload?: { user: string, token: string } }): Auth => {\n    if (action.type === 'LOGIN' && action.payload) {\n      localStorage.setItem(\"user\", action.payload.user);\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        loggedIn: true,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    } else if (action.type === 'LOGOUT') {\n      localStorage.clear();\n      return {\n        ...state,\n        loggedIn: false,\n        user: \"\",\n        token: \"\",\n      };\n    } else {\n      return state;\n    }\n  };\n\n  const [Auth, setAuth] = useReducer(reducer, {\n    loggedIn: false,\n    user: \"\",\n    token: \"\"\n  })\n\n  // State for alert snackbars\n  const [alertState, setAlertState] = useState<AlertStateType>({\n    severity: undefined,\n    message: \"\",\n    open: false,\n  })\n\n  // Loading Backdrop display state\n  const [openBackdrop, setOpenBackdrop] = useState<boolean>(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    const user = localStorage.getItem(\"user\")\n    if (token) {\n      API.checkAuth(token)\n        .then(res => setAuth({ type: 'LOGIN', payload: { user: res.username, token: token } }))\n        .catch(err => {\n          if (err.message === \"Unauthorized\") {\n            setAuth({ type: 'LOGOUT' })\n          } else {\n            setAuth({ type: 'LOGIN', payload: { user: user || \"\", token: token || \"\" } })\n          }\n        })\n    }\n  }, [])\n\n\n\n  useEffect(() => {\n    testDatabase()\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthContext.Provider\n        value={{ Auth, setAuth, setAlertState, setOpenBackdrop }}\n      >\n        <Router>\n          <ProtectedRoute path=\"/\"\n            loggedIn={Auth.loggedIn}\n            setLoggedIn={setAuth}\n            component={Home}\n          />\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n        </Router>\n        <CustomizedSnackbar\n          state={alertState}\n          setState={setAlertState}\n        />\n        <Backdrop className={classes.backdrop} open={openBackdrop}>\n          <CircularProgress disableShrink color=\"inherit\" />\n        </Backdrop>\n      </AuthContext.Provider>\n    </ThemeProvider>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}