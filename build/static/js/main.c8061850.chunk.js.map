{"version":3,"sources":["components/InputRow.tsx","components/ReportTable.tsx","utils/API.tsx","utils/db.tsx","Context/Auth.tsx","Context/State.tsx","components/AddExpensesForm.tsx","components/AddIncomeForm.tsx","components/AppBar.tsx","components/PivotTable.tsx","components/Form.tsx","components/WallChart.tsx","components/Edit.tsx","pages/Home.tsx","components/Signup.tsx","pages/Login.tsx","components/Alert.tsx","components/SnackBar.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["StyledTableRow","withStyles","theme","createStyles","root","backgroundColor","palette","background","default","blueGrey","paddingLeft","TableRow","InputRow","props","useState","amount","state","setState","handleInputRowChange","event","target","name","value","makeDataList","propsState","id","map","entry","useEffect","fields","filter","column","includes","TableCell","className","classes","TextField","onBlur","e","handleChange","i","onChange","inputProps","list","InputProps","startAdornment","InputAdornment","position","disableUnderline","style","width","dataLists","persons","narrow_categories","broad_categories","IconButton","color","onClick","handleUpdate","aria-label","deleteEntry","ReportTable","makeStyles","table","minWidth","padding","tableCellHead","primary","main","common","white","fontSize","tableCellBody","maxWidth","useStyles","myRef","createRef","current","scrollIntoView","behavior","TableContainer","component","Paper","Table","ref","TableHead","schema","textTransform","replace","TableBody","data","checkStatus","res","parseMethod","status","Error","json","text","blob","db","API","addCategories","token","fetch","method","headers","body","JSON","stringify","then","getCategories","expenses","yearMonthObj","year","month","postExpenses","postBatchExpenses","postIncome","postBatchIncome","deleteExpenses","updateExpenses","income","updateIncome","deleteIncome","pivot","wallchart","dataList","signup","login","checkAuth","downloadFile","filename","start","end","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","openDB","upgrade","createObjectStore","autoIncrement","navigator","onLine","checkDatabase","saveRecord","record","put","saveCategories","categories","Object","keys","forEach","category","clear","c","loadCategories","getAll","saveWallChartData","loadWallChartData","localStorage","getItem","uploaded","severity","undefined","message","open","pendingExpenses","length","pendingIncome","console","error","AuthContext","createContext","Auth","loggedIn","user","setAuth","useAuth","useContext","AuthProvider","useReducer","action","type","payload","setItem","Provider","children","StateContext","alertState","setAlertState","loading","setLoading","useStateContext","StateProvider","AddRecordsForm","initialFormState","date","Date","now","NaN","person_id","broad_category_id","narrow_category_id","vendor","notes","formState","setFormState","currentBroadCategory","setCurrentBroadCategory","currentNarrowCategories","setCurrentNarrowCategories","handleFormChange","narrowCategories","preventDefault","formStateConvertedDate","toLocaleDateString","reloadWallChart","DialogContent","close","handleClose","Typography","variant","onSubmit","utils","DateFnsUtils","disableToolbar","fullWidth","format","margin","label","KeyboardButtonProps","InputLabelProps","shrink","step","FormControl","formControl","InputLabel","htmlFor","Select","labelId","MenuItem","person","Button","source","grow","flexGrow","menuButton","marginRight","spacing","title","textAlign","sectionDesktop","display","breakpoints","up","sectionMobile","MyAppBar","setEditOpen","React","anchorEl","setAnchorEl","isMenuOpen","Boolean","edit","handleMenuClose","logout","emptyDatabase","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","AppBar","Toolbar","noWrap","aria-controls","aria-haspopup","currentTarget","StyledTableCell","head","DarkTableRow","cursor","LightTableRow","ExtraLightTableRow","PivotTable","show","setShow","pivotState","reduce","b","broad_category","total","parseFloat","narrow_category","showState","bCat","newShow","toggleShowRow","toFixed","nCat","Form","handleFormSubmit","Container","Card","form","WallChart","Box","maxHeight","height","options","maintainAspectRatio","scales","xAxes","ticks","fontColor","gridLines","zeroLineColor","drawOnChartArea","yAxes","callback","toString","Edit","has_person","checked","updatedCategories","setCategories","card","CardContent","FormControlLabel","control","Checkbox","Home","useTheme","getUTCFullYear","getUTCMonth","incomeTableState","setIncomeTableState","expensesTableState","setExpensesTableState","categoriesState","setCategoriesState","labels","datasets","fill","borderColor","secondary","wallChartData","setWallChartData","formatDates","day","getUTCDate","dateString","route","response","assignId","dataListItem","index","newExpensesTableStateData","updatedRow","err","newIncomeTableStateData","reloadWallChartData","log","home","selectEmpty","marginTop","justifyContent","flexWrap","down","logoutBtn","top","right","downloadBtn","editBtn","left","offline","speedDial","bottom","dialog","datePicker","marginLeft","speedDialOpen","setSpeedDialOpen","actions","icon","setAddExpensesOpen","operation","setAddIncomeOpen","addExpensesOpen","addIncomeOpen","editOpen","checkAndDisplaySuccess","result","addEventListener","removeEventListener","Dialog","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","onMouseLeave","SpeedDialAction","tooltipTitle","tooltipOpen","heading","fontFamily","Signup","username","password","signupFormState","setSignupFormState","formSubmit","signupBtn","float","sidebar","link","Login","loginFormState","setLoginFormState","signupOpen","setSignupOpen","inputChange","newToken","to","Grid","container","item","xs","gutterBottom","Alert","elevation","snackbar","CustomizedSnackbar","reason","Snackbar","autoHideDuration","defaultTheme","createMuiTheme","green","purple","overrides","MuiPickersBasePicker","MuiCard","MuiDialogContent","MuiPickersCalendarHeader","iconButton","ProtectedRoute","Component","rest","render","App","backdrop","zIndex","catch","testDatabase","ThemeProvider","CssBaseline","path","setLoggedIn","exact","Backdrop","CircularProgress","disableShrink","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","process","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c8061850.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DataListStateType, TableDataEntry, AllDataListsType } from '../interfaces/Interfaces'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { IconButton, TableCell, TableRow, TextField, InputAdornment } from '@material-ui/core'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { blueGrey } from '@material-ui/core/colors';\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.background.default,\n            },\n            '&:nth-of-type(even)': {\n                backgroundColor: blueGrey[800],\n            },\n            '& input': {\n                backgroundColor: 'inherit',\n                paddingLeft: 0,\n            }\n        },\n    }),\n)(TableRow);\n\nexport default function InputRow(props:\n    {\n        entry: TableDataEntry,\n        i: number,\n        fields: { name: string }[],\n        dataLists?: AllDataListsType\n        handleChange: Function,\n        handleUpdate: Function,\n        deleteEntry: Function,\n        classes: string\n    }) {\n\n    // State controls\n    const [state, setState] = useState<TableDataEntry>({ amount: \"\" })\n\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\n        let { name, value } = event.target;\n        setState({ ...state, [name]: value })\n    }\n\n    // Helper function to create datalists for category and person fields\n    // This helps the user make a valid entry\n    function makeDataList(propsState: DataListStateType[], id: string) {\n        return (\n            <datalist id={id}>\n                {propsState.map((entry: DataListStateType) => {\n                    return (\n                        <option\n                            value={entry.name}\n                            key={entry.id}\n                        />\n                    )\n                })}\n            </datalist>\n        )\n    }\n\n    // Set props to state on render\n    useEffect(() => {\n        setState(props.entry)\n    }, [props.entry])\n\n    return (\n        <StyledTableRow>\n            {props.fields\n                .filter(column => !column.name.includes(\"id\"))\n                .map(column => {\n                    return (\n                        <TableCell className={props.classes}>\n                            <TextField\n                                name={column.name}\n                                // On blur, update state of entire table via handleChange dispatch in props\n                                onBlur={(e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n                                    props.handleChange(e, props.i)\n                                }}\n                                onChange={handleInputRowChange}\n                                className=\"tableInput\"\n                                value={state[column.name as keyof TableDataEntry] || \"\"}\n                                inputProps={{\n                                    list: column.name\n                                }}\n                                InputProps={\n                                     {\n                                    startAdornment: <InputAdornment position=\"start\">{column.name === 'amount' ? \"$\" : null}</InputAdornment>,\n                                    disableUnderline: true\n                                }\n                            }\n                                style={{ width: '80%' }}\n                            />\n                            {column.name === 'person' && props.dataLists?.persons ? (\n                                makeDataList(props.dataLists?.persons, column.name)\n                            ) : null}\n                            {column.name === 'narrow_category' && props.dataLists?.narrow_categories ? (\n                                makeDataList(props.dataLists?.narrow_categories, column.name)\n                            ) : null}\n                            {column.name === 'broad_category' && props.dataLists?.broad_categories ? (\n                                makeDataList(props.dataLists?.broad_categories, column.name)\n                            ) : null}\n                        </TableCell>\n                    )\n                })}\n            <TableCell className={props.classes}>\n                <IconButton\n                    color=\"primary\"\n                    onClick={() => props.handleUpdate(props.i)}\n                >\n                    <SaveIcon />\n                </IconButton>\n            </TableCell>\n            <TableCell className={props.classes}>\n                <IconButton\n                    aria-label=\"delete\"\n                    color=\"secondary\"\n                    onClick={() => props.deleteEntry(state.id)}\n                >\n                    <DeleteIcon />\n                </IconButton>\n            </TableCell>\n        </StyledTableRow>\n    )\n}","import React, {useEffect, createRef} from 'react'\nimport InputRow from './InputRow'\nimport type { TableDataEntry, AllDataListsType } from \"../interfaces/Interfaces\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nexport default function ReportTable(props:\n    {\n        state:\n        {\n            schema:\n            {\n                fields: { name: string }[]\n            },\n            data: TableDataEntry[]\n\n        },\n        dataLists?: AllDataListsType\n        handleChange: Function,\n        handleUpdate: Function,\n        deleteEntry: Function,\n        form?: string\n    }) {\n\n        // Styling\n        const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            table: {\n                minWidth: 650,\n                padding: '0 1em'\n            },\n                tableCellHead: {\n                    backgroundColor: theme.palette.primary.main,\n                    color: theme.palette.common.white,\n                    padding: 10,\n                    fontSize: 16\n                },\n                tableCellBody: {\n                    fontSize: 14,\n                    padding: 0,\n                    maxWidth: '10ch',\n                },\n        \n        })\n        );\n        const classes = useStyles();\n\n        // Component scrolls into view on mount\n        const myRef = createRef<HTMLTableElement>()\n        const executeScroll = () => {\n            if (myRef.current) {\n                myRef.current.scrollIntoView({behavior: 'smooth'})\n            }\n        }\n        \n        useEffect(() => {\n            executeScroll()\n        })\n        \n    return (\n        <TableContainer component={Paper} >\n            <Table className={classes.table} ref={myRef}>\n                <TableHead>\n                    <TableRow>\n                        {props.state.schema.fields\n                            .filter(column => !column.name.includes(\"id\"))\n                            .map(column => {\n                                return (\n                                    <TableCell className={classes.tableCellHead} key={column.name} style={{textTransform: 'capitalize'}}>\n                                        {column.name.replace(\"_\", \" \")}\n                                    </TableCell>\n                                )\n                            })}\n                        <TableCell className={classes.tableCellHead}><span>Save</span></TableCell>\n                        <TableCell className={classes.tableCellHead}><span>Delete</span></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody className=\"tableBody\">\n                    {(props.state.data).map((entry: TableDataEntry, i: number) => (\n                            <InputRow\n                                entry={entry}\n                                i={i}\n                                key={i}\n                                fields={props.state.schema.fields}\n                                handleChange={props.handleChange}\n                                handleUpdate={props.handleUpdate}\n                                dataLists={props.dataLists}\n                                deleteEntry={props.deleteEntry}\n                                classes={classes.tableCellBody}\n                            />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import type {\n    AllDataListsType, \n    FormStateType, \n    TableDataEntry, \n    TableType,\n    ExpensesFormType,\n    IncomeFormType,\n    EditFormType,\n    WallChartDataType} from '../interfaces/Interfaces'\n\n\nfunction checkStatus<T>(res: Response, parseMethod: string): Promise<T> {\n    if (res.status === 401) {\n        throw new Error(\"Unauthorized\")\n    }\n    if (res.status === 404) {\n        throw new Error(\"No Data\")\n    }\n    if (res.status !== 200) {\n        throw new Error(\"Error! \" + res.status)\n    }\n    if (parseMethod === 'json'){\n        return res.json() as Promise<T>\n    } else if (parseMethod === 'text'){\n        return res.text() as unknown as Promise<T>\n    } else {\n        return res.blob() as unknown as Promise<T>\n    }\n}\n\nconst API = {\n    addCategories: function (token: string | null, data: EditFormType): Promise<Response | string> {\n        return fetch(`/api/categories/`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    getCategories: function (token: string | null): Promise<AllDataListsType> {\n        return fetch(`/api/categories/`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n            },\n        }).then(res=>checkStatus<AllDataListsType>(res, 'json'))\n    },\n    expenses: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<TableType>(res, 'json'))\n    },\n    postExpenses: function (token: string | null, data:ExpensesFormType): Promise<Response | string> {\n        return fetch(`/api/expenses/`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    postBatchExpenses: function (token: string | null, data:ExpensesFormType[]): Promise<Response | string> {\n        return fetch(`/api/expenses/batch`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    postIncome: function (token: string | null, data:IncomeFormType): Promise<Response | string> {\n        return fetch(`/api/income/`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    postBatchIncome: function (token: string | null, data:IncomeFormType[]): Promise<Response | string> {\n        return fetch(`/api/income/batch`, {\n            method: 'POST',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    deleteExpenses: function (token: string | null, id: number | undefined): Promise<Response | string> {\n        return fetch(`/api/expenses/${id}`, {\n            method: 'DELETE',\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    updateExpenses: function (token: string | null, data: TableDataEntry): Promise<Response | string> {\n        return fetch(`/api/expenses/${data.id}`, {\n            method: 'PUT',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    income: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\n        return fetch(`/api/income/${yearMonthObj.year}/${yearMonthObj.month}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<TableType>(res, 'json'))\n    },\n    updateIncome: function (token: string | null, data: TableDataEntry): Promise<Response | string> {\n        return fetch(`/api/income/${data.id}`, {\n            method: 'PUT',\n            headers: {\n                \"authorization\": `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    deleteIncome: function (token: string | null, id: number | undefined): Promise<Response | string> {\n        return fetch(`/api/income/${id}`, {\n            method: 'DELETE',\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<string>(res, 'text'))\n    },\n    pivot: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<TableType>(res, 'json'))\n    },\n    wallchart: function (token: string | null): Promise<WallChartDataType> {\n        return fetch(`/wallchart`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res=>checkStatus<WallChartDataType>(res, 'json'))\n    },\n\n    dataList: function (token: string | null): Promise<AllDataListsType> {\n        return fetch(`/api/datalists`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res => checkStatus<AllDataListsType>(res, 'json'))\n    },\n    signup: function (data: { username: string, password: string }): Promise<Response | string> {\n        return fetch('/auth/signup', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res => checkStatus<string>(res, 'text'))\n    },\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\n        return fetch('/auth/login', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(res => checkStatus<{ token: string }>(res, 'json'))\n    },\n    checkAuth: function (token: string | null): Promise<{username: string, token: string}> {\n        return fetch(`/auth/checkAuth`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res =>checkStatus<{username: string, token: string}>(res, 'json'))\n    },\n    downloadFile: function (token: string | null, filename: string, start: string, end: string): void {\n        fetch(`/api/expenses/file/${start}/${end}`, {\n            headers: {\n                \"authorization\": `Bearer ${token}`\n            }\n        }).then(res => checkStatus<Blob>(res, 'blob'))\n            .then(blob => {\n                var url = window.URL.createObjectURL(blob);\n                var a = document.createElement('a');\n                a.href = url;\n                a.download = filename;\n                document.body.appendChild(a);\n                a.click();\n                a.remove();      \n            });\n    }\n}\n\nexport default API","import { openDB, DBSchema, IDBPDatabase } from 'idb'\nimport { AlertStateType, AllDataListsType, ExpensesFormType, IncomeFormType, WallChartDataType } from '../interfaces/Interfaces';\nimport API from './API';\n\ninterface financesDB extends DBSchema {\n  expenses: {\n    value: {\n      amount: number,\n      date: Date | null,\n      person_id: number,\n      vendor: string,\n      broad_category_id: number,\n      narrow_category_id: number,\n      notes: string\n    },\n    key: string\n  },\n  income: {\n    value: {\n      date: Date | null,\n      amount: number,\n      person_id: number,\n      source: string,\n    },\n    key: string\n  },\n  broad_categories: {\n    value: {\n      name: string,\n      id: number,\n      person: boolean\n    },\n    key: string\n  },\n  narrow_categories: {\n    value: {\n      name: string,\n      id: number,\n      broad_category_id: number\n    },\n    key: string\n  },\n  persons: {\n    value: {\n      name: string,\n      id: number\n    },\n    key: string\n  },\n  wallchart: {\n    value: {\n      labels: string[],\n      income: number[],\n      expenses: number[]\n    },\n    key: string\n  },\n}\n\n\nlet db: IDBPDatabase<financesDB>;\nexport async function testDatabase() {\n  db = await openDB<financesDB>(\"finances\", 1, {\n    async upgrade(db) {\n      db.createObjectStore('expenses', { autoIncrement: true })\n      db.createObjectStore('income', { autoIncrement: true })\n      db.createObjectStore('broad_categories', { autoIncrement: true })\n      db.createObjectStore('narrow_categories', { autoIncrement: true })\n      db.createObjectStore('persons', { autoIncrement: true })\n      db.createObjectStore('wallchart', { autoIncrement: true })\n    }\n  });\n\n  if (navigator.onLine) {\n    checkDatabase();\n  }\n}\n\nexport async function saveRecord(table: 'income' | 'expenses', record: ExpensesFormType | IncomeFormType) {\n  await db.put(table, record);\n}\n\nexport async function saveCategories(categories: AllDataListsType) {\n  (Object.keys(categories) as Array<keyof AllDataListsType>).forEach((category: keyof AllDataListsType) => {\n    db.clear(category)\n    categories[category as keyof AllDataListsType]?.forEach(c => {\n      db.put(category, c)\n    })\n  })\n}\n\nexport async function loadCategories() {\n  let tables: Array<keyof AllDataListsType> = ['broad_categories', 'narrow_categories', 'persons']\n  let categories: AllDataListsType = {\n    'broad_categories': [],\n    'narrow_categories': [],\n    'persons': []\n  };\n  tables.map(async table => {\n    let category = await db.getAll(table)\n    categories[table] = category\n  })\n  return categories\n}\n\nexport async function saveWallChartData(data: WallChartDataType) {\n  await db.clear('wallchart');\n  db.put('wallchart', data);\n}\n\nexport async function loadWallChartData(): Promise<WallChartDataType> {\n  let data = await db.getAll('wallchart');\n  return data[0];\n}\n\nexport async function emptyDatabase(): Promise<string> {\n  try {\n    await db.clear('expenses')\n    await db.clear('income')\n    return \"pendingFinances cleared!\"\n  } catch (err) {\n    return err\n  }\n}\n\nexport async function checkDatabase() {\n  let token = localStorage.getItem('token')\n  let uploaded: AlertStateType = {\n    severity: undefined,\n    message: \"\",\n    open: false,\n  }\n  try {\n    const pendingExpenses = await db.getAll(\"expenses\");\n    if (pendingExpenses.length > 0) {\n      await API.postBatchExpenses(token, pendingExpenses)\n      // delete records if successful\n      db.clear('expenses')\n      uploaded = {\n        severity: \"success\",\n        message: \"Saved Expenses uploaded\",\n        open: true,\n      }\n    }\n    const pendingIncome = await db.getAll(\"income\");\n    if (pendingIncome.length > 0) {\n      await API.postBatchIncome(token, pendingIncome)\n      // delete records if successful\n      db.clear('income')\n      uploaded = {\n        severity: \"success\",\n        message: \"Saved Income uploaded\",\n        open: true,\n      }\n    }\n  } catch (err) {\n    console.error(err)\n    uploaded = {\n      severity: \"error\",\n      message: \"Error uploading saved records\",\n      open: true,\n    }\n  }\n  return uploaded\n}\n\n","import React, {createContext, useContext, useReducer} from 'react'\nimport { Auth, AuthContextType } from '../interfaces/Interfaces'\n\n\nconst AuthContext = createContext<AuthContextType>({\n    Auth: {\n      loggedIn: false,\n      user: \"\",\n      token: \"\"\n    },\n    setAuth: (): void => { }\n})\n\nexport function useAuth() {\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider(props: {children: React.ReactNode}) {\n\n    // Reducer state for Authentication values\n    const reducer = (state: Auth, action: { type: string, payload?: { user: string, token: string } }): Auth => {\n        if (action.type === 'LOGIN' && action.payload) {\n            localStorage.setItem(\"user\", action.payload.user);\n            localStorage.setItem(\"token\", action.payload.token);\n            return {\n                ...state,\n                loggedIn: true,\n                user: action.payload.user,\n                token: action.payload.token\n            };\n        } else if (action.type === 'LOGOUT') {\n            localStorage.clear();\n            return {\n                ...state,\n                loggedIn: false,\n                user: \"\",\n                token: \"\",\n            };\n        } else {\n            return state;\n        }\n    };\n    \n    const [Auth, setAuth] = useReducer(reducer, {\n        loggedIn: false,\n        user: \"\",\n        token: \"\"\n    })\n\n    const value = {\n        Auth,\n        setAuth\n    }\n\n    return (\n        <AuthContext.Provider value={value}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n    \n}\n    ","import React, { createContext, useContext, useState} from 'react'\nimport { AlertStateType, StateContextType } from '../interfaces/Interfaces'\n\n\nconst StateContext = createContext<StateContextType>({\n    alertState: {\n        severity: undefined,\n        message: \"\",\n        open: false,\n    },\n    setAlertState: (): void =>{},\n    loading: false,\n    setLoading: (): void =>{}\n})\n\nexport function useStateContext() {\n    return useContext(StateContext)\n}\n\nexport function StateProvider(props: { children: React.ReactNode }) {\n    // State for alert snackbars\n    const [alertState, setAlertState] = useState<AlertStateType>({\n        severity: undefined,\n        message: \"\",\n        open: false,\n    })\n\n    // Loading Backdrop display state\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const value = {\n        alertState,\n        setAlertState,\n        loading,\n        setLoading\n    }\n\n    return (\n        <StateContext.Provider value={value}>\n            {props.children}\n        </StateContext.Provider>\n    )\n\n}\n","import React, { useState } from 'react'\nimport API from '../utils/API'\nimport { saveRecord } from '../utils/db'\nimport { useAuth } from '../Context/Auth'\nimport { ExpensesFormType, AllDataListsType, DataListStateType } from '../interfaces/Interfaces'\nimport {\n    Button,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    InputAdornment,\n    Typography,\n    DialogContent,\n    IconButton\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close'\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { useStateContext } from '../Context/State'\n\n\nexport default function AddRecordsForm(props: {\n    classes: { root: string, formControl: string, close: string },\n    handleClose: Function,\n    categories: AllDataListsType,\n    setLoading: Function,\n    reloadWallChart: Function\n}) {\n    const {Auth, setAuth } = useAuth()\n    const { setAlertState} = useStateContext()\n    const initialFormState = {\n        date: new Date(Date.now()),\n        amount: NaN,\n        person_id: NaN,\n        broad_category_id: NaN,\n        narrow_category_id: NaN,\n        vendor: \"\",\n        notes: \"\"\n    }\n\n    // Form control state\n    const [formState, setFormState] = useState<ExpensesFormType>(initialFormState)\n\n    // State to hold category info\n    const [currentBroadCategory, setCurrentBroadCategory] = useState<DataListStateType>({\n        name: \"\",\n        id: NaN,\n    })\n\n    const [currentNarrowCategories, setCurrentNarrowCategories] = useState<DataListStateType[]>([])\n\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\n        let name = event.target.name as keyof typeof formState\n        setFormState({ ...formState, [name]: event.target.value })\n        if (name === 'broad_category_id') {\n            let category = props.categories.broad_categories.filter(i => i.id === event.target.value)[0]\n            setCurrentBroadCategory(category)\n            let narrowCategories = props.categories.narrow_categories.filter(i => i.broad_category_id === category.id)\n            setCurrentNarrowCategories(narrowCategories)\n        }\n    }\n\n    function handleDateChange(date: Date | null) {\n        setFormState({ ...formState, date: date });\n    };\n\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n        event.preventDefault()\n        if (!formState.date || !formState.amount || !formState.broad_category_id || !formState.vendor) {\n            setAlertState({\n                severity: \"error\",\n                message: \"Please fill out all fields\",\n                open: true\n            })\n            return\n        }\n        let formStateConvertedDate: any = { ...formState }\n        formStateConvertedDate.date = formStateConvertedDate.date?.toLocaleDateString(\"en-US\")\n        try {\n            props.setLoading(true)\n            await API.postExpenses(Auth.token, formStateConvertedDate)\n            props.setLoading(false)\n            setAlertState({\n                severity: \"success\",\n                message: \"Record Saved!\",\n                open: true\n            })\n            props.reloadWallChart()\n        } catch (err) {\n            props.setLoading(false)\n            if (err.message === \"Error! 500\") {\n                setAlertState({\n                    severity: \"error\",\n                    message: \"Server Error! Contact Eli\",\n                    open: true\n                })\n                return\n            } else {\n                saveRecord('expenses', formStateConvertedDate)\n                if (err.message === \"Unauthorized\") {\n                    setAuth({ type: 'LOGOUT' })\n                }\n                setAlertState({\n                    severity: \"warning\",\n                    message: \"Record Saved Locally\",\n                    open: true\n                })\n            }\n        } finally {\n            setFormState(initialFormState)\n            setCurrentBroadCategory({\n                name: \"\",\n                id: NaN\n            })\n        }\n    }\n\n    return (\n        <DialogContent>\n            <IconButton\n                className={props.classes.close}\n                onClick={() => {\n                    setFormState(initialFormState)\n                    props.handleClose()\n                }}><CloseIcon /></IconButton>\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Log Expense</Typography>\n            <form className={props.classes.root} onSubmit={handleFormSubmit}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        fullWidth\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        name=\"Date\"\n                        label=\"Date\"\n                        value={formState.date}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.vendor}\n                    label=\"Vendor\"\n                    name=\"vendor\"\n                    type=\"string\"\n                    InputLabelProps={{ shrink: true }}\n                />\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.amount}\n                    label=\"Amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    inputProps={{ step: \"0.01\" }}\n                />\n                <FormControl\n                    className={props.classes.formControl}>\n                    <InputLabel htmlFor=\"broad_category\">Broad Category</InputLabel>\n                    <Select\n                        onChange={handleFormChange}\n                        value={formState.broad_category_id}\n                        name=\"broad_category_id\"\n                        labelId=\"broad_category\"\n                        label=\"Broad Category\"\n                    >\n                        {props.categories.broad_categories.map(i => (\n                            <MenuItem value={i.id}>{i.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                {currentNarrowCategories.length > 0 ? (\n                    <FormControl className={props.classes.formControl}>\n                        <InputLabel htmlFor=\"narrow_category\">Narrow Category</InputLabel>\n                        <Select\n                            onChange={handleFormChange}\n                            value={formState.narrow_category_id}\n                            name=\"narrow_category_id\"\n                            labelId=\"narrow_category\"\n                            label=\"Narrow Category\"\n                        >\n                            {/* Get the list of narrow categories corresponding to the selected broad category */}\n                            {currentNarrowCategories?.map(i => (\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                ) : null}\n                {currentBroadCategory.person ? (\n\n                    <FormControl className={props.classes.formControl}>\n                        <InputLabel htmlFor=\"person_id\">Person</InputLabel>\n                        <Select\n                            onChange={handleFormChange}\n                            value={formState.person_id}\n                            name=\"person_id\"\n                            labelId=\"person_id\"\n                            label=\"Person\"\n                        >\n                            {props.categories.persons.map(i => (\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                ) : null}\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.notes}\n                    label=\"Notes\"\n                    name=\"notes\"\n                    type=\"string\"\n                    InputLabelProps={{ shrink: true }}\n                />\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                >Submit</Button>\n            </form>\n        </DialogContent>\n    )\n}","import React, { useState } from 'react'\nimport API from '../utils/API'\nimport { useAuth } from '../Context/Auth'\nimport type { IncomeFormType, AllDataListsType } from '../interfaces/Interfaces'\nimport {\n    Button,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    InputAdornment,\n    Typography,\n    DialogContent,\n    IconButton\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close'\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { saveRecord } from '../utils/db';\nimport { useStateContext } from '../Context/State';\n\n\nexport default function AddRecordsForm(props: {\n    classes: { root: string, formControl: string, close: string },\n    handleClose: Function,\n    categories: AllDataListsType,\n    setLoading: Function,\n    reloadWallChart: Function\n}) {\n\n    const {Auth, setAuth } = useAuth()\n    const { setAlertState } = useStateContext()\n\n    const initialFormState = {\n        date: new Date(Date.now()),\n        amount: NaN,\n        person_id: NaN,\n        source: \"\",\n    }\n\n    // Form control state\n    const [formState, setFormState] = useState<IncomeFormType>(initialFormState)\n\n\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\n        let name = event.target.name as keyof typeof formState\n        setFormState({ ...formState, [name]: event.target.value })\n    }\n\n    function handleDateChange(date: Date | null) {\n        setFormState({ ...formState, date: date });\n    };\n\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n        event.preventDefault()\n        if (!formState.date || !formState.amount || !formState.person_id || !formState.source) {\n            setAlertState({\n                severity: \"error\",\n                message: \"Please fill out all fields\",\n                open: true\n            })\n            return\n        }\n        let formStateConvertedDate: any = { ...formState }\n        try {\n            formStateConvertedDate.date = formStateConvertedDate.date?.toLocaleDateString(\"en-US\")\n            props.setLoading(true)\n            await API.postIncome(Auth.token, formStateConvertedDate)\n            props.setLoading(false)\n            setAlertState({\n                severity: \"success\",\n                message: \"Record Saved!\",\n                open: true\n            })\n            props.reloadWallChart()\n        } catch (err) {\n            props.setLoading(false)\n            if (err.message === \"Error! 500\") {\n                setAlertState({\n                    severity: \"error\",\n                    message: \"Server Error!\",\n                    open: true\n                })\n                return\n            } else {\n                saveRecord('income', formStateConvertedDate)\n                setAlertState({\n                    severity: \"warning\",\n                    message: \"Record Saved Locally\",\n                    open: true\n                })\n                if (err.message === \"Unauthorized\") {\n                    setAuth({ type: 'LOGOUT' })\n                }\n            }\n        } finally {\n            setFormState(initialFormState)\n        }\n    }\n\n    return (\n        <DialogContent>\n            <IconButton\n                className={props.classes.close}\n                onClick={() => {\n                    setFormState(initialFormState)\n                    props.handleClose()\n                }}><CloseIcon /></IconButton>\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Log Income</Typography>\n            <form className={props.classes.root} onSubmit={handleFormSubmit}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        name=\"Date\"\n                        label=\"Date\"\n                        value={formState.date}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.source}\n                    label=\"Source\"\n                    name=\"source\"\n                    type=\"string\"\n                    InputLabelProps={{ shrink: true }}\n                />\n                <TextField\n                    onChange={handleFormChange}\n                    value={formState.amount}\n                    label=\"Amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    inputProps={{ step: \"0.01\" }}\n                />\n                <FormControl className={props.classes.formControl}>\n                    <InputLabel htmlFor=\"person_id\">Person</InputLabel>\n                    <Select\n                        onChange={handleFormChange}\n                        value={formState.person_id}\n                        name=\"person_id\"\n                        labelId=\"person_id\"\n                        label=\"Person\"\n                    >\n                        {props.categories.persons.map(i => (\n                            <MenuItem value={i.id}>{i.name}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                >Submit</Button>\n            </form>\n        </DialogContent>\n    )\n}","import React from 'react';\r\nimport { fade, makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { useAuth } from '../Context/Auth'\r\nimport { emptyDatabase } from '../utils/db';\r\nimport API from '../utils/API'\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n        title: {\r\n            textAlign: 'center',\r\n            textTransform: 'capitalize'\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function MyAppBar({ setEditOpen }: { setEditOpen: Function }) {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const { Auth, setAuth } = useAuth()\r\n\r\n    function edit(): void {\r\n        setEditOpen(true)\r\n    }\r\n\r\n    function downloadFile(): void {\r\n        API.downloadFile(Auth.token, `${Auth.user}_expenses.xlsx`, \"2020-01-01\", \"2020-12-31\")\r\n        handleMenuClose()\r\n    }\r\n\r\n    function logout(): void {\r\n        setAuth({ type: 'LOGOUT' })\r\n        emptyDatabase()\r\n    }\r\n\r\n    const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const menuId = 'primary-search-account-menu';\r\n    const renderMenu = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItem onClick={edit}>Edit</MenuItem>\r\n            <MenuItem onClick={downloadFile}>Downloads</MenuItem>\r\n            <MenuItem onClick={logout}>Logout</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        {Auth.user}'s Finances\r\n                    </Typography>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            onClick={edit}\r\n                        >Edit\r\n                </Button>\r\n\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            onClick={downloadFile}\r\n                        // edge=\"end\"\r\n                        >Download\r\n                    </Button>\r\n                        <Button\r\n                            color=\"inherit\"\r\n                            onClick={logout}\r\n                        // edge=\"end\"\r\n                        >Logout\r\n                    </Button>\r\n                    </div>\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon />\r\n                        </IconButton>\r\n\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMenu}\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\nimport { Paper, Table, TableBody, TableContainer, TableCell, TableRow, TableHead } from '@material-ui/core';\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { TableDataEntry } from '../interfaces/Interfaces';\nimport { blueGrey } from '@material-ui/core/colors';\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n    createStyles({\n        head: {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white,\n            padding: 10,\n            fontSize: 16\n        },\n        body: {\n            padding: 10,\n            fontSize: 14,\n        },\n    }),\n)(TableCell);\n\nconst DarkTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: theme.palette.background.default,\n            cursor: 'pointer'\n        },\n    }),\n)(TableRow);\n\nconst LightTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: blueGrey[800],\n        },\n    }),\n)(TableRow);\n\nconst ExtraLightTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: blueGrey[700],\n        },\n    }),\n)(TableRow);\n\nexport default function PivotTable(props: {\n    state:\n    {\n        schema:\n        {\n            fields: { name: string }[]\n        },\n        data: TableDataEntry[]\n\n    },\n}) {\n\n    // Controls which rows are expanded to view subcategories\n    const [show, setShow] = useState<boolean[]>([false])\n    function toggleShowRow(i: number) {\n        let newShow = [...show]\n        newShow[i] = !newShow[i]\n        setShow(newShow)\n    }\n\n    // Calling reduce on our props data to create our pivot table data\n    // Yes, this will re-run on every render, but until I have the time to get the TS errors worked out with the useEffect route, we'll do it this way\n    const pivotState = props.state.data.reduce((a, b) => {\n        if (b.broad_category) {\n            if (a[b.broad_category]) {\n                a[b.broad_category].total += parseFloat(b.amount);\n            } else {\n                a[b.broad_category] = { total: parseFloat(b.amount), narrow_categories: {} };\n            }\n            if (b.narrow_category) {\n                if (a[b.broad_category].narrow_categories[b.narrow_category]) {\n                    a[b.broad_category].narrow_categories[b.narrow_category].total += parseFloat(b.amount);\n                } else {\n                    a[b.broad_category].narrow_categories[b.narrow_category] = {total: parseFloat(b.amount), persons: {}}   ;\n                }\n                if (b.person) {\n                    if (a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person]) {\n                        a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person] += parseFloat(b.amount);\n                    } else {\n                        a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person] = parseFloat(b.amount);\n                    }\n                }\n            } else if (b.person) {\n                if (a[b.broad_category].narrow_categories[\"--\"]?.persons[b.person]) {\n                    a[b.broad_category].narrow_categories[\"--\"].persons[b.person] += parseFloat(b.amount);\n                    a[b.broad_category].narrow_categories[\"--\"].total += parseFloat(b.amount);\n                } else {\n                a[b.broad_category].narrow_categories = {...a[b.broad_category].narrow_categories, \"--\": {persons: {[b.person]: parseFloat(b.amount)}, total: parseFloat(b.amount)}}\n                }\n            }\n        }\n        return a\n    }, {} as any)\n\n    // Set every broad category to be collapsed\n    useEffect(() => {\n        let showState = Object.keys(pivotState).map((i: any) => false)\n        setShow(showState)\n    }, [props])\n\n    return (\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>\n                            Broad category\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            Narrow Category\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            Person\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            Amount\n                        </StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(pivotState).map((bCat, i) => (\n                        <>\n                            <DarkTableRow key={i} onClick={() => toggleShowRow(i)}>\n                                <StyledTableCell>\n                                    {bCat}\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    TOTAL\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    {/* Empty Cell */}\n                                </StyledTableCell>\n                                <StyledTableCell>\n                                    ${pivotState[bCat].total.toFixed(2)}\n                                </StyledTableCell>\n                            </DarkTableRow>\n                            {pivotState[bCat].narrow_categories && show[i] ? (\n                                Object.keys(pivotState[bCat].narrow_categories).map(nCat => (\n                                    <>\n                                        <LightTableRow>\n                                            <StyledTableCell>\n                                                {/* Empty Cell */}\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                {nCat}\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                TOTAL\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                ${pivotState[bCat].narrow_categories[nCat].total.toFixed(2)}\n                                            </StyledTableCell>\n                                        </LightTableRow>\n                                        {pivotState[bCat].narrow_categories[nCat].persons ? (\n                                            Object.keys(pivotState[bCat].narrow_categories[nCat].persons).map((person: string) => (\n                                                <ExtraLightTableRow>\n                                                    <StyledTableCell>\n                                                    </StyledTableCell>\n                                                    <StyledTableCell>\n                                                    </StyledTableCell>\n                                                    <StyledTableCell>\n                                                        {person}\n                                                    </StyledTableCell>\n                                                    <StyledTableCell>\n                                                        ${pivotState[bCat].narrow_categories[nCat].persons[person].toFixed(2)}\n\n                                                    </StyledTableCell>\n                                                </ExtraLightTableRow>\n                                            ))\n                                            ) : null\n                                        }\n                                    </>\n                                ))\n                            ) : null}\n                        </>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import React from 'react'\nimport {\n    Container,\n    Card,\n    FormControl,\n    InputLabel,\n    Select,\n    TextField,\n    MenuItem,\n    Button\n} from '@material-ui/core'\nimport {FormStateType} from '../interfaces/Interfaces'\n\nexport default function Form({\n    classes, \n    handleFormSubmit, \n    handleFormChange, \n    formState }: {\n    classes: {\n        root: string, \n        formControl: string\n    },\n    handleFormSubmit: (event: React.FormEvent<HTMLFormElement>) => void,\n    handleFormChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>)=> void,\n    formState: FormStateType\n}) {\n    return (\n        <Container className={classes.root}>\n                    <Card variant=\"outlined\">\n                        <h2 className={classes.root}>Reports</h2>\n                        <form onSubmit={handleFormSubmit} className={classes.root}>\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\n                                <InputLabel htmlFor=\"form\">Report</InputLabel>\n                                <Select\n                                    name=\"form\"\n                                    label=\"Report\"\n                                    labelId=\"form\"\n                                    value={formState.form}\n                                    onChange={handleFormChange}>\n                                    <MenuItem value=\"income\">Income</MenuItem>\n                                    <MenuItem value=\"expenses\">Expenses</MenuItem>\n                                    <MenuItem value=\"pivot\">Pivot Table</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <TextField\n                                onChange={handleFormChange}\n                                value={formState.year}\n                                label=\"Year\"\n                                name=\"year\"\n                                type=\"number\"\n                                variant=\"outlined\"\n                            />\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\n                                <InputLabel htmlFor=\"month2\">Month</InputLabel>\n                                <Select\n                                    onChange={handleFormChange}\n                                    value={formState.month}\n                                    name=\"month\"\n                                    labelId=\"month2\"\n                                    label=\"Month\"\n                                >\n                                    <MenuItem value={1}>January</MenuItem>\n                                    <MenuItem value={2}>February</MenuItem>\n                                    <MenuItem value={3}>March</MenuItem>\n                                    <MenuItem value={4}>April</MenuItem>\n                                    <MenuItem value={5}>May</MenuItem>\n                                    <MenuItem value={6}>June</MenuItem>\n                                    <MenuItem value={7}>July</MenuItem>\n                                    <MenuItem value={8}>August</MenuItem>\n                                    <MenuItem value={9}>September</MenuItem>\n                                    <MenuItem value={10}>October</MenuItem>\n                                    <MenuItem value={11}>November</MenuItem>\n                                    <MenuItem value={12}>December</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                            >\n                                View\n                        </Button>\n                        </form>\n                    </Card>\n                </Container>\n    )\n}","import React from \"react\";\nimport { Box, Container } from '@material-ui/core';\nimport { Line } from \"react-chartjs-2\";\nimport { ChartJSDataType } from \"../interfaces/Interfaces\";\n\n\nexport default function WallChart({ data }: { data: ChartJSDataType }) {\n    return (\n        <Container>\n            <Box maxHeight='50vh'>\n                <Line data={data} height={300} width={600} options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        xAxes: [{\n                            ticks: {\n                                fontColor: \"#404B50\"\n                            },\n                            gridLines: {\n                                color: \"#404B50\",\n                                zeroLineColor: \"#404B50\",\n                                drawOnChartArea: false\n                            }\n                        }],\n                        yAxes: [{\n                            ticks: {\n                                fontColor: \"#404B50\",\n                                callback: function (value) {\n                                    if (value >= 1000) {\n                                        return '$' + value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                                    } else {\n                                        return '$' + value;\n                                    }\n                                }\n                            },\n                            gridLines: {\n                                color: \"#404B50\",\n                                zeroLineColor: \"#404B50\",\n                                drawOnChartArea: false\n                            }\n                        }]\n                    }\n\n                }} />\n            </Box>\n        </Container>\n    );\n}","import React, { useState } from 'react'\nimport {\n    DialogContent,\n    Typography,\n    Button,\n    TextField,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    Select,\n    MenuItem,\n    Checkbox,\n    Card,\n    CardContent,\n    IconButton\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { AllDataListsType, EditFormType } from '../interfaces/Interfaces'\nimport API from '../utils/API'\nimport { useAuth } from '../Context/Auth'\nimport { useStateContext } from '../Context/State'\n\n\nexport default function Edit(props: {\n    handleClose: Function,\n    classes: { root: string, formControl: string, card: string, close: string },\n    categories: AllDataListsType,\n    setCategories: Function,\n    setLoading: Function\n}) {\n    const {Auth, setAuth } = useAuth()\n    const { setAlertState} = useStateContext()\n\n    const initialFormState = {\n        person: \"\",\n        broad_category: \"\",\n        broad_category_id: NaN,\n        narrow_category: \"\",\n        has_person: false\n    }\n\n    // Form control state\n    const [formState, setFormState] = useState<EditFormType>(initialFormState)\n\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\n        let name = event.target.name as keyof EditFormType\n        let value = event.target.value\n        if (name === 'has_person') {\n            // Casting event.target so that ts knows check property will be there\n            value = (event.target as HTMLInputElement).checked\n        }\n        setFormState({ ...formState, [name]: value })\n    }\n\n    async function handleFormSubmit(event: React.SyntheticEvent, form: 'person' | 'narrow_category' | 'broad_category'): Promise<any> {\n        event.preventDefault()\n        props.setLoading(true)\n        let data\n        try {\n            switch (form) {\n                case 'person':\n                    data = { person: formState.person }\n                    if (!data.person) {\n                        throw new Error(\"Empty Input\")\n                    }\n                    break;\n                case 'broad_category':\n                    data = {\n                        broad_category: formState.broad_category,\n                        has_person: formState.has_person\n                    }\n                    if (!data.broad_category) {\n                        throw new Error(\"Empty Input\")\n                    }\n                    break;\n                case 'narrow_category':\n                    data = {\n                        narrow_category: formState.narrow_category,\n                        broad_category_id: formState.broad_category_id,\n                        has_person: formState.has_person\n                    }\n                    if (!data.narrow_category || !data.broad_category_id) {\n                        throw new Error(\"Empty Input\")\n                    }\n                    break;\n            }\n            await API.addCategories(Auth.token, data)\n            setAlertState({\n                severity: \"success\",\n                message: \"Category Added!\",\n                open: true\n            })\n            let updatedCategories = await API.getCategories(Auth.token)\n            props.setCategories(updatedCategories);\n\n        } catch (err) {\n            switch (err.message) {\n                case \"Error! 500\":\n                    setAlertState({\n                        severity: \"error\",\n                        message: \"Server Error!\",\n                        open: true\n                    })\n                    break;\n                case \"Unauthorized\":\n                    setAuth({ type: 'LOGOUT' })\n                    break;\n                case \"Empty Input\":\n                    setAlertState({\n                        severity: \"error\",\n                        message: \"Please fill out all fields\",\n                        open: true\n                    })\n                    break;\n                default:\n                    setAlertState({\n                        severity: \"error\",\n                        message: \"You must be connected to the internet to add categories\",\n                        open: true\n                    })\n            }\n        } finally {\n            props.setLoading(false)\n            setFormState(initialFormState)\n        }\n    }\n\n    return (\n        <DialogContent>\n            <IconButton onClick={() => props.handleClose()} className={props.classes.close}><CloseIcon /></IconButton>\n            <Card className={props.classes.card}>\n                <CardContent>\n\n                    <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Person</Typography>\n                    <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'person')}>\n                        <TextField\n                            onChange={handleFormChange}\n                            value={formState.person}\n                            label=\"Person\"\n                            name=\"person\"\n                            type=\"string\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >Add</Button>\n                    </form>\n                </CardContent>\n            </Card>\n            <Card className={props.classes.card}>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Broad Category</Typography>\n                    <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'broad_category')}>\n                        <TextField\n                            onChange={handleFormChange}\n                            value={formState.broad_category}\n                            label=\"Broad Category\"\n                            name=\"broad_category\"\n                            type=\"string\"\n                        />\n                        <FormControlLabel control={<Checkbox\n                            checked={formState.has_person}\n                            onChange={handleFormChange}\n                            name=\"has_person\"\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\n                        />}\n                            label=\"Person\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >Add</Button>\n                    </form>\n                </CardContent>\n            </Card>\n            <Card className={props.classes.card}>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Narrow Category</Typography>\n                    <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'narrow_category')}>\n                        <FormControl\n                            className={props.classes.formControl}>\n                            <InputLabel htmlFor=\"broad_category\">Broad Category</InputLabel>\n                            <Select\n                                onChange={handleFormChange}\n                                name=\"broad_category_id\"\n                                labelId=\"broad_category_id\"\n                                label=\"Broad Category\"\n                            >\n                                {props.categories.broad_categories.map(i => (\n                                    <MenuItem value={i.id}>{i.name}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            onChange={handleFormChange}\n                            value={formState.narrow_category}\n                            label=\"Narrow Category\"\n                            name=\"narrow_category\"\n                            type=\"string\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >Add</Button>\n                    </form>\n                </CardContent>\n            </Card>\n        </DialogContent>\n    )\n}","import React, { useState, useEffect, useReducer } from 'react';\nimport ReportTable from '../components/ReportTable';\nimport AddExpensesForm from '../components/AddExpensesForm'\nimport AddIncomeForm from '../components/AddIncomeForm'\nimport API from '../utils/API'\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport { useAuth } from '../Context/Auth'\nimport type {\n    TableDataEntry,\n    DataListStateType,\n    AllDataListsType,\n    FormStateType,\n    InputName,\n    ChartJSDataType,\n    WallChartDataType\n} from '../interfaces/Interfaces'\nimport {\n    Dialog,\n    Box\n} from '@material-ui/core';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddIcon from '@material-ui/icons/Add'\nimport {\n    saveCategories,\n    loadCategories,\n    saveWallChartData,\n    loadWallChartData,\n    checkDatabase\n} from '../utils/db';\nimport AppBar from '../components/AppBar';\n\nimport PivotTable from '../components/PivotTable';\nimport Form from '../components/Form';\nimport WallChart from '../components/WallChart'\nimport Edit from '../components/Edit';\nimport { useStateContext } from '../Context/State';\n\nfunction Home() {\n    const theme = useTheme();\n\n    const { Auth, setAuth } = useAuth()\n    const { setAlertState, setLoading } = useStateContext()\n\n    // Form control state\n    const [formState, setFormState] = useState<FormStateType>(\n        {\n            form: \"expenses\",\n            year: new Date(Date.now()).getUTCFullYear(),\n            month: new Date(Date.now()).getUTCMonth() + 1\n        }\n    )\n\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: TableDataEntry[] }>(\n        {\n            schema: { fields: [] },\n            data: [{\n                amount: \"\",\n                date: \"\",\n                source: \"\",\n                person: \"\",\n                id: NaN,\n                person_id: NaN\n            }]\n        }\n    )\n\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: TableDataEntry[] }>(\n        {\n            schema: { fields: [] },\n            data: [{\n                amount: \"\",\n                date: \"\",\n                source: \"\",\n                vendor: \"\",\n                broad_category: \"\",\n                narrow_category: \"\",\n                person: \"\",\n                notes: \"\",\n                id: NaN\n            }]\n        }\n\n    )\n\n    // State for datalists\n    const [categoriesState, setCategoriesState] = useState<AllDataListsType>({\n        persons: [],\n        narrow_categories: [],\n        broad_categories: [],\n    })\n\n    // State For WallChart\n    function reducer(state: ChartJSDataType, action: WallChartDataType): ChartJSDataType {\n        if (action.labels.length > 0) {\n            state = {\n                labels: action.labels,\n                datasets: [\n                    {\n                        label: \"Income\",\n                        data: action.income,\n                        fill: false,\n                        borderColor: theme.palette.primary.main\n                    },\n                    {\n                        label: \"Expenses\",\n                        data: action.expenses,\n                        fill: false,\n                        borderColor: theme.palette.secondary.main\n                    }\n                ]\n            }\n        }\n        return state\n    }\n\n    const [wallChartData, setWallChartData] = useReducer(reducer, {\n        labels: [],\n        datasets: [\n            {\n                label: \"Income\",\n                data: [],\n                fill: false,\n                borderColor: theme.palette.primary.main\n            },\n            {\n                label: \"Expenses\",\n                data: [],\n                fill: false,\n                borderColor: theme.palette.secondary.main\n            }\n        ]\n    })\n\n    // Converts dates to human-readable format\n    function formatDates(entry: TableDataEntry): TableDataEntry {\n        if (!entry.date) {\n            return entry\n        } else {\n            let date = new Date(entry.date);\n            let year = date.getUTCFullYear();\n            let month = (1 + date.getUTCMonth()).toString();\n            month = month.length > 1 ? month : '0' + month;\n            let day = date.getUTCDate().toString();\n            day = day.length > 1 ? day : '0' + day;\n            let dateString = month + '/' + day + '/' + year;\n            entry.date = dateString\n            return entry\n        }\n    }\n\n    // Form control\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>): void {\n        let name = event.target.name as keyof typeof formState\n        setFormState({ ...formState, [name]: event.target.value })\n    }\n\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n        try {\n            event.preventDefault()\n            let route = formState.form\n            setLoading(true)\n            let response = await API[route](Auth.token, formState)\n            setLoading(false)\n            // Formatting the dates the hard way because javascript doesn't support strftime...\n            if (route !== 'pivot') {\n                response.data = response.data.map(formatDates)\n            }\n            switch (route) {\n                case \"expenses\":\n                    setExpensesTableState(response)\n                    break;\n                case \"income\":\n                    setIncomeTableState(response)\n                    break;\n                case \"pivot\":\n                    setExpensesTableState(response)\n                    break;\n            }\n        } catch (err) {\n            if (err.message === \"Unauthorized\") {\n                setAuth({ type: 'LOGOUT' })\n            }\n            setLoading(false)\n            setAlertState({\n                severity: \"error\",\n                message: \"Error Fetching Data\",\n                open: true\n            })\n        }\n    }\n\n    // Helper function for assigning an id to a TableDataEntry if user input matches an existing record\n    function assignId(\n        name: InputName,\n        value: string) {\n\n        let state;\n        let id;\n\n        switch (name) {\n            case \"person\":\n                state = categoriesState.persons;\n                id = 'person_id';\n                break;\n            case \"broad_category\":\n                state = categoriesState.broad_categories;\n                id = 'broad_category_id';\n                break;\n            case \"narrow_category\":\n                state = categoriesState.narrow_categories;\n                id = 'narrow_category_id';\n                break;\n        }\n        let dataListItem = state.filter((i: DataListStateType) => i.name === value)[0]\n        if (dataListItem) {\n            return { id: id, dataListItem: dataListItem }\n        } else {\n            return { id: null, dataListItem: null }\n        }\n    }\n\n    // Keep global state synced with InputRow state\n    async function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\n        try {\n            let { name, value } = event.target;\n            let newExpensesTableStateData: TableDataEntry[] = [...expensesTableState.data]\n            let updatedRow: TableDataEntry = { ...newExpensesTableStateData[index], [name]: value }\n            if (name === \"person\" || name === \"broad_category\" || name === \"narrow_category\") {\n                let { id, dataListItem } = assignId(name as InputName, value)\n                if (id && dataListItem) {\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\n                }\n            }\n            newExpensesTableStateData[index] = updatedRow\n            setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\n\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    // Keep global state synced with InputRow state\n    async function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\n        try {\n            let { name, value } = event.target;\n            let newIncomeTableStateData: TableDataEntry[] = [...incomeTableState.data]\n            let updatedRow: TableDataEntry = { ...newIncomeTableStateData[index], [name]: value }\n            if (name === \"person\") {\n                let { id, dataListItem } = assignId(name as InputName, value)\n                if (id && dataListItem) {\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\n                }\n            }\n            newIncomeTableStateData[index] = updatedRow\n            setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n\n    // Reload data for Wallchart\n    async function reloadWallChartData(): Promise<void> {\n        let data = await loadWallChartData()\n        if (data) setWallChartData(data)\n        try {\n            data = await API.wallchart(Auth.token)\n            setWallChartData(data)\n            saveWallChartData(data)\n        } catch (err) {\n            if (err.message === \"No Data\") {\n                console.log(\"No Data!\")\n            }\n        }\n\n    }\n\n    // Update an expense row altered by the user\n    async function updateExpensesRow(index: number): Promise<void> {\n        try {\n            await API.updateExpenses(Auth.token, expensesTableState.data[index])\n            setAlertState({\n                severity: \"success\",\n                message: \"Record updated!\",\n                open: true\n            })\n            reloadWallChartData()\n        } catch (err) {\n            console.log(err)\n            setAlertState({\n                severity: \"error\",\n                message: \"Error: Failed to save!\",\n                open: true\n            })\n        }\n    }\n\n    // Update an income row altered by the user\n    async function updateIncomeRow(index: number): Promise<void> {\n        try {\n            await API.updateIncome(Auth.token, incomeTableState.data[index])\n            setAlertState({\n                severity: \"success\",\n                message: \"Record updated!\",\n                open: true\n            })\n            reloadWallChartData()\n        } catch (err) {\n            setAlertState({\n                severity: \"error\",\n                message: \"Error: Failed to save!\",\n                open: true\n            })\n        }\n    }\n\n\n    // Delete a row from the database\n    async function deleteEntry(id: number | undefined) {\n        try {\n            if (formState.form === \"expenses\") {\n                await API.deleteExpenses(Auth.token, id);\n                let newExpensesTableStateData = expensesTableState.data.filter(entry => entry.id !== id)\n                setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\n            } else if (formState.form === \"income\") {\n                await API.deleteIncome(Auth.token, id);\n                let newIncomeTableStateData = incomeTableState.data.filter(entry => entry.id !== id)\n                setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\n            }\n            reloadWallChartData()\n        } catch (err) {\n            console.error(err)\n            if (err === 'Unauthorized') {\n                setAuth({ type: 'LOGOUT' })\n            }\n        }\n    }\n\n    // Create classes to use for styling\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            home: {\n                padding: '0 0 6em 0'\n            },\n            formControl: {\n                margin: theme.spacing(1),\n                minWidth: '10em'\n            },\n            selectEmpty: {\n                marginTop: theme.spacing(2),\n            },\n            root: {\n                display: 'flex',\n                justifyContent: 'center',\n                flexWrap: 'wrap',\n                [theme.breakpoints.up('md')]: {\n                    flexWrap: 'noWrap',\n                },\n                '& > *': {\n                    margin: theme.spacing(1),\n                    [theme.breakpoints.down('xs')]: {\n                        width: '100%',\n                    },\n                },\n            },\n            wallchart: {\n                width: '100%'\n            },\n            logoutBtn: {\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                margin: '1em',\n            },\n            downloadBtn: {\n                position: 'fixed',\n                top: '0px',\n                right: '100px',\n                margin: '1em',\n            },\n            editBtn: {\n                position: 'fixed',\n                top: '0px',\n                left: '0px',\n                margin: '1em',\n            },\n            offline: {\n                backgroundColor: theme.palette.secondary.main,\n                color: 'white',\n                textAlign: 'center',\n                position: 'sticky'\n            },\n            speedDial: {\n                position: 'fixed',\n                bottom: theme.spacing(2),\n                right: theme.spacing(2),\n            },\n            dialog: {\n                width: '100%',\n            },\n            datePicker: {\n                [theme.breakpoints.down('sm')]: {\n                    marginLeft: '-10px'\n                },\n            },\n            card: {\n                margin: '1em 0'\n            },\n            close: {\n                position: 'absolute',\n                right: '0',\n                top: '0'\n            }\n        })\n    );\n    const classes = useStyles();\n\n    // SpeedDial controls\n    const [speedDialOpen, setSpeedDialOpen] = React.useState(false);\n\n    const actions = [\n        { icon: <AddIcon />, name: 'Expenses', action: handleExpensesOpen, operation: 'expenses' },\n        { icon: <AddIcon />, name: 'Income', action: handleIncomeOpen, operation: 'income' }\n    ]\n\n    const handleSpeedDialClose = () => {\n        setSpeedDialOpen(false);\n    };\n\n    const handleOpen = () => {\n        setSpeedDialOpen(true);\n    };\n\n    function handleExpensesOpen(): void {\n        setAddExpensesOpen(true)\n        setSpeedDialOpen(false)\n    }\n\n    function handleIncomeOpen(): void {\n        setAddIncomeOpen(true)\n        setSpeedDialOpen(false)\n    }\n\n    // Controls for Dialogs\n    const [addExpensesOpen, setAddExpensesOpen] = useState(false)\n    const [addIncomeOpen, setAddIncomeOpen] = useState(false)\n    const [editOpen, setEditOpen] = useState(false)\n    function handleClose() {\n        setAddExpensesOpen(false)\n        setAddIncomeOpen(false)\n        setEditOpen(false)\n    }\n\n    useEffect(() => {\n        async function getCategories(): Promise<void> {\n            try {\n                let categories = await API.getCategories(Auth.token)\n                setCategoriesState(categories)\n                saveCategories(categories)\n            } catch (err) {\n                let categories = await loadCategories()\n                setCategoriesState(categories)\n            }\n        }\n        getCategories()\n        reloadWallChartData()\n    }, [Auth.token])\n\n    useEffect(() => {\n        async function checkAndDisplaySuccess() {\n            let result = await checkDatabase()\n            setAlertState(result)\n        }\n        // listen for app coming back online\n        window.addEventListener(\"online\", checkAndDisplaySuccess);\n        return () => window.removeEventListener(\"online\", checkAndDisplaySuccess)\n    }, [])\n\n    return (\n        <Box component='div' className={classes.home}>\n            <AppBar setEditOpen={setEditOpen} />\n            <Box component='header' className=\"header\" >\n                <h1 style={{ textAlign: 'center' }}>Wall Chart</h1>\n\n                <WallChart data={wallChartData} />\n                <Form\n                    classes={classes}\n                    handleFormSubmit={handleFormSubmit}\n                    handleFormChange={handleFormChange}\n                    formState={formState}\n                />\n            </Box>\n            <div className=\"body\">\n                {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\n                    <ReportTable\n                        state={incomeTableState}\n                        dataLists={categoriesState}\n                        handleChange={handleIncomeChange}\n                        handleUpdate={updateIncomeRow}\n                        deleteEntry={deleteEntry}\n                        form={formState.form}\n                    />\n                ) : null}\n                {formState.form === \"expenses\" && expensesTableState.data[0]?.id ? (\n                    <ReportTable\n                        state={expensesTableState}\n                        dataLists={categoriesState}\n                        handleChange={handleExpensesChange}\n                        handleUpdate={updateExpensesRow}\n                        deleteEntry={deleteEntry}\n                        form={formState.form}\n                    />\n                ) : null}\n                {formState.form === \"pivot\" && expensesTableState.data[0]?.id ? (\n                    <PivotTable state={expensesTableState} />\n                ) : null}\n            </div>\n            <Dialog onClose={handleClose} open={editOpen} maxWidth='xl'>\n                <Edit\n                    classes={classes}\n                    handleClose={handleClose}\n                    categories={categoriesState}\n                    setCategories={setCategoriesState}\n                    setLoading={setLoading}\n                />\n            </Dialog>\n            <Dialog onClose={handleClose} open={addExpensesOpen} maxWidth='xl'>\n                <AddExpensesForm\n                    classes={classes}\n                    handleClose={handleClose}\n                    categories={categoriesState}\n                    setLoading={setLoading}\n                    reloadWallChart={reloadWallChartData}\n                />\n            </Dialog>\n            <Dialog onClose={handleClose} open={addIncomeOpen} maxWidth='xl'>\n                <AddIncomeForm\n                    classes={classes}\n                    handleClose={handleClose}\n                    categories={categoriesState}\n                    setLoading={setLoading}\n                    reloadWallChart={reloadWallChartData}\n                />\n            </Dialog>\n            <SpeedDial\n                ariaLabel=\"SpeedDial\"\n                className={classes.speedDial}\n                icon={<SpeedDialIcon />}\n                onClose={handleSpeedDialClose}\n                onOpen={handleOpen}\n                open={speedDialOpen}\n                onMouseLeave={() => { }}\n            >\n                {actions.map((action) => (\n                    <SpeedDialAction\n                        key={action.name}\n                        icon={action.icon}\n                        tooltipTitle={action.name}\n                        tooltipOpen\n                        onClick={action.action}\n                    />\n                ))}\n            </SpeedDial>\n\n        </Box >\n    );\n}\n\nexport default Home;","import React, { useState } from 'react'\nimport API from '../utils/API'\nimport { Button, DialogContent, TextField, Typography } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { useStateContext } from '../Context/State';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            justifyContent: 'center',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                [theme.breakpoints.down('xs')]: {\n                    width: '100%',\n                },\n            }\n        },\n        heading: {\n            textAlign: 'center',\n            fontFamily: 'Times New Roman, serif'\n        },\n    })\n);\n\nexport default function Signup({handleClose}: {handleClose: Function}) {\n    const { setAlertState, setLoading} = useStateContext()\n\n    const [signupFormState, setSignupFormState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setSignupFormState({\n            ...signupFormState,\n            [name]: value,\n        });\n    };\n\n    const formSubmit = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        setLoading(true)\n        try {\n            await API.signup(signupFormState)\n            setAlertState({\n                severity: \"success\",\n                message: \"You're signed up! Please log in\",\n                open: true\n            })\n            handleClose()\n        } catch (err) {\n            console.error(err)\n            setAlertState({\n                severity: \"error\",\n                message: \"Error Signing Up!\",\n                open: true\n            })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const classes = useStyles()\n\n    return (\n        <DialogContent>\n            <div style={{ textAlign: 'center' }}>\n            <Typography variant=\"h2\" component=\"h4\" className={classes.heading}>Sign Up</Typography>\n                <form className={classes.root} onSubmit={formSubmit}>\n                    <TextField\n                        onChange={handleChange}\n                        value={signupFormState.username}\n                        type=\"text\"\n                        name=\"username\"\n                        label=\"username\"\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        onChange={handleChange}\n                        value={signupFormState.password}\n                        type=\"password\"\n                        name=\"password\"\n                        label=\"password\"\n                        variant=\"outlined\"\n                    />\n                    <Button variant=\"contained\" color=\"primary\" name=\"signup\" type=\"submit\">Sign Up</Button>\n                </form>\n            </div>\n        </DialogContent>\n    );\n}","import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport API from '../utils/API'\nimport { useAuth } from '../Context/Auth'\nimport { Button, TextField, Dialog, Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Signup from '../components/Signup'\nimport { useStateContext } from '../Context/State';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        heading: {\n            textAlign: 'center',\n            fontFamily: 'Times New Roman, serif'\n        },\n        signupBtn: {\n            float: 'right',\n            margin: '1em',\n        },\n        sidebar: {\n            display: 'flex',\n            justifyContent: 'center',\n            textAlign: 'center',\n            flexWrap: 'wrap',\n        },\n        form: {\n            display: 'flex',\n            justifyContent: 'center',\n            textAlign: 'center',\n            flexWrap: 'wrap',\n            '& > *': {\n                margin: theme.spacing(1),\n                display: 'flex',\n                justifyContent: 'center',\n                textAlign: 'center',\n                flexWrap: 'wrap',\n                [theme.breakpoints.down('xs')]: {\n                    width: '100%',\n                },\n            }\n        },\n        link: {\n            color: theme.palette.primary.main,\n            '&:hover': theme.palette.secondary.main \n        }\n    })\n);\n\nexport default function Login() {\n    const {Auth, setAuth } = useAuth()\n    const {setAlertState, setLoading} = useStateContext()\n    const [loginFormState, setLoginFormState] = useState({\n        username: \"\",\n        password: \"\",\n    });\n\n    const [signupOpen, setSignupOpen] = useState<boolean>(false)\n\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setLoginFormState({\n            ...loginFormState,\n            [name]: value,\n        });\n    };\n\n    const formSubmit = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        setLoading(true)\n        try {\n            let newToken = await API.login(loginFormState)\n            setAuth({ type: 'LOGIN', payload: { user: loginFormState.username, token: newToken.token } })\n        } catch (err) {\n            console.error(err)\n            setAlertState({\n                severity: \"error\",\n                message: \"Incorrect username or password\",\n                open: true\n            })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const classes = useStyles()\n\n    function handleClose() {\n        setSignupOpen(false)\n    }\n\n    if (Auth.loggedIn) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <>\n            <Grid container className={classes.root}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h1\" component=\"h2\" gutterBottom className={classes.heading}>\n                        Flask of Finances\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} className={classes.sidebar}>\n                    <form className={classes.form} onSubmit={formSubmit}>\n                        <TextField\n                            onChange={inputChange}\n                            value={loginFormState.username}\n                            type=\"text\"\n                            name=\"username\"\n                            label=\"username\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            onChange={inputChange}\n                            value={loginFormState.password}\n                            type=\"password\"\n                            name=\"password\"\n                            label=\"password\"\n                            variant=\"outlined\"\n                        />\n                        <Button variant=\"contained\" color=\"primary\" name=\"login\" type=\"submit\">Login</Button>\n                            </form>\n                            </Grid>\n                        <Grid item xs={12} className={classes.sidebar}>\n\n            <Button\n                className={classes.link}\n                onClick={() => setSignupOpen(true)}\n            >Sign Up</Button>\n            </Grid>\n            </Grid>\n            <Dialog onClose={handleClose} open={signupOpen} maxWidth='xl'>\n                <Signup handleClose={handleClose} />\n            </Dialog>\n        </>\n    );\n}","import React from 'react';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nexport default function Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from './Alert'\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { AlertStateType } from '../interfaces/Interfaces';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    snackbar: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function CustomizedSnackbar({ state, setState }: {\n    state: AlertStateType,\n    setState: React.Dispatch<React.SetStateAction<AlertStateType>>\n    }) {\n\n    const classes = useStyles();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState({ ...state, open: false });\n    };\n\n    return (\n        <div className={classes.snackbar}>\n            <Snackbar\n                open={state.open}\n                autoHideDuration={3000}\n                onClose={handleClose}\n\n            >\n                <Alert onClose={handleClose} severity={state.severity}>\n                    {state.message}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}","import React, { useEffect, useState, useReducer } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport { testDatabase } from './utils/db'\nimport './App.css';\nimport CustomizedSnackbar from './components/SnackBar'\nimport { ThemeProvider, createMuiTheme, Theme, makeStyles, createStyles } from '@material-ui/core/styles';\nimport { green, blueGrey, purple } from '@material-ui/core/colors'\nimport { MuiPickersOverrides } from '@material-ui/pickers/typings/overrides';\nimport {\n  CssBaseline,\n  ThemeOptions,\n  Backdrop,\n  CircularProgress,\n} from '@material-ui/core'\nimport {useAuth} from './Context/Auth';\nimport { useStateContext } from './Context/State'\n\n// Types to allow for theme customization\ntype overridesNameToClassKey = {\n  [P in keyof MuiPickersOverrides]: keyof MuiPickersOverrides[P];\n};\ntype CustomType = {\n  MuiPickersBasePicker: {\n    pickerView: {\n      maxWidth?: string;\n    };\n  };\n};\ndeclare module '@material-ui/core/styles/overrides' {\n  interface ComponentNameToClassKey extends overridesNameToClassKey { }\n  export interface ComponentNameToClassKey extends CustomType { }\n};\n\n// Instantiating default theme to use breakpoints\nconst defaultTheme = createMuiTheme();\n\n// Theme factory\nfunction createMyTheme(options: ThemeOptions) {\n  return createMuiTheme({\n    overrides: {\n      MuiPickersBasePicker: {\n        container: {\n          backgroundColor: blueGrey[900],\n          [defaultTheme.breakpoints.down(\"xs\")]: {\n            marginLeft: '-10px',\n          }\n        },\n      },\n      MuiCard: {\n        root: {\n          backgroundColor: blueGrey[900]\n        }\n      },\n      MuiDialogContent: {\n        root: {\n          backgroundColor: blueGrey[900]\n        }\n      },\n      MuiPickersCalendarHeader: {\n        iconButton: {\n          backgroundColor: blueGrey[900]\n        }\n      }\n    },\n    ...options\n  })\n};\n\n// Adding global palette colors\nconst theme = createMyTheme({\n  palette: {\n    type: 'dark',\n    background: {\n      default: blueGrey[900],\n    },\n    primary: {\n      main: green[900]\n    },\n    secondary: {\n      main: purple[800]\n    }\n  },\n});\n\n\n\n// Check if user is logged in before returning protected component/page\nconst ProtectedRoute = ({ component: Component, loggedIn, ...rest }: {\n  path: string,\n  loggedIn: boolean,\n  setLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n  <Route {...rest} render={props => (\n    loggedIn\n      ? <Component {...props} />\n      : <Redirect to='/login' />\n  )\n  } />\n\n)\n\n\nexport default function App() {\n\n  const {Auth, setAuth } = useAuth()\n  const {alertState, setAlertState, loading} = useStateContext()\n\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      backdrop: {\n        zIndex: 1301, // To be in front of Dialog at 1300\n        color: '#fff',\n      },\n    })\n  )\n\n  const classes = useStyles();\n  \n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    const user = localStorage.getItem(\"user\")\n    if (token) {\n      API.checkAuth(token)\n        .then(res => setAuth({ type: 'LOGIN', payload: { user: res.username, token: token } }))\n        .catch(err => {\n          if (err.message === \"Unauthorized\") {\n            setAuth({ type: 'LOGOUT' })\n          } else {\n            setAuth({ type: 'LOGIN', payload: { user: user || \"\", token: token || \"\" } })\n          }\n        })\n    }\n  }, [])\n\n\n\n  useEffect(() => {\n    testDatabase()\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n        <Router>\n          <ProtectedRoute path=\"/\"\n            loggedIn={Auth.loggedIn}\n            setLoggedIn={setAuth}\n            component={Home}\n          />\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n        </Router>\n        <CustomizedSnackbar\n          state={alertState}\n          setState={setAlertState}\n        />\n        <Backdrop className={classes.backdrop} open={loading}>\n          <CircularProgress disableShrink color=\"inherit\" />\n        </Backdrop>\n    </ThemeProvider>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { AuthProvider } from './Context/Auth'\nimport { StateProvider } from './Context/State'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <StateProvider>\n        <App />\n      </StateProvider>\n    </AuthProvider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}