{"version":3,"sources":["components/InputRow.tsx","components/Table.tsx","utils/API.tsx","utils/db.tsx","components/AddExpensesForm.tsx","components/AddIncomeForm.tsx","components/PivotTable.tsx","components/Form.tsx","components/Chart.tsx","components/Edit.tsx","pages/Home.tsx","components/Signup.tsx","pages/Login.tsx","components/Alert.tsx","components/SnackBar.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["StyledTableCell","withStyles","theme","createStyles","body","fontSize","padding","maxWidth","TableCell","StyledTableRow","root","backgroundColor","palette","background","default","blueGrey","paddingLeft","TableRow","InputRow","props","useState","amount","state","setState","makeDataList","propsState","id","map","entry","value","name","handleInputRowChange","event","target","useEffect","fields","filter","column","includes","TextField","onBlur","e","handleChange","i","onChange","className","inputProps","list","InputProps","startAdornment","InputAdornment","position","disableUnderline","style","width","dataLists","persons","narrow_categories","broad_categories","IconButton","color","onClick","handleUpdate","aria-label","deleteEntry","ReportTable","head","primary","main","common","white","classes","makeStyles","table","minWidth","useStyles","myRef","createRef","current","scrollIntoView","behavior","TableContainer","component","Paper","Table","ref","TableHead","schema","replace","TableBody","data","checkStatus","res","parseMethod","status","Error","json","text","db","API","addCategories","token","fetch","method","headers","JSON","stringify","then","getCategories","expenses","yearMonthObj","year","month","postExpenses","postBatchExpenses","postIncome","postBatchIncome","deleteExpenses","updateExpenses","income","updateIncome","deleteIncome","pivot","wallchart","dataList","signup","login","checkAuth","a","openDB","upgrade","createObjectStore","autoIncrement","navigator","onLine","checkDatabase","saveRecord","record","put","saveCategories","categories","Object","keys","category","clear","c","loadCategories","getAll","saveWallChartData","loadWallChartData","emptyDatabase","localStorage","getItem","pendingExpenses","length","pendingIncome","console","error","window","addEventListener","AddRecordsForm","React","useContext","AuthContext","Auth","setAuth","setAlertState","initialFormState","date","Date","now","NaN","person_id","broad_category_id","narrow_category_id","vendor","notes","formState","setFormState","currentBroadCategory","setCurrentBroadCategory","currentNarrowCategories","setCurrentNarrowCategories","handleFormChange","narrowCategories","preventDefault","severity","message","open","formStateConvertedDate","toLocaleDateString","setOpenBackdrop","reloadWallChart","type","DialogContent","Typography","variant","onSubmit","utils","DateFnsUtils","disableToolbar","fullWidth","format","margin","label","KeyboardButtonProps","InputLabelProps","shrink","step","FormControl","formControl","InputLabel","htmlFor","Select","labelId","MenuItem","person","Button","handleClose","source","DarkTableRow","cursor","LightTableRow","ExtraLightTableRow","PivotTable","show","setShow","pivotState","reduce","b","broad_category","total","parseFloat","narrow_category","log","showState","bCat","newShow","toggleShowRow","toFixed","nCat","Form","handleFormSubmit","Container","Card","form","WallChart","Edit","has_person","checked","updatedCategories","setCategories","FormControlLabel","control","Checkbox","Home","useTheme","getUTCFullYear","getUTCMonth","incomeTableState","setIncomeTableState","expensesTableState","setExpensesTableState","categoriesState","setCategoriesState","openBackdrop","formatDates","toString","day","getUTCDate","dateString","route","response","assignId","dataListItem","index","newExpensesTableStateData","updatedRow","err","newIncomeTableStateData","reloadWallChartData","useReducer","action","labels","datasets","fill","borderColor","secondary","wallChartData","setWallChartData","spacing","selectEmpty","marginTop","display","justifyContent","flexWrap","breakpoints","up","down","logoutBtn","float","editBtn","offline","textAlign","backdrop","zIndex","speedDial","bottom","right","dialog","datePicker","marginLeft","speedDialOpen","setSpeedDialOpen","actions","icon","setAddExpensesOpen","operation","setAddIncomeOpen","addExpensesOpen","addIncomeOpen","editOpen","setEditOpen","setOffline","Box","AppBar","user","Dialog","onClose","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","onMouseLeave","SpeedDialAction","tooltipTitle","tooltipOpen","Backdrop","CircularProgress","disableShrink","Signup","username","password","signupFormState","setSignupFormState","formSubmit","signupBtn","Login","loginFormState","setLoginFormState","signupOpen","setSignupOpen","inputChange","newToken","payload","loggedIn","to","Alert","elevation","snackbar","CustomizedSnackbar","reason","Snackbar","autoHideDuration","defaultTheme","createMuiTheme","options","green","purple","overrides","MuiPickersBasePicker","container","MuiCard","MuiDialogContent","MuiPickersCalendarHeader","iconButton","ProtectedRoute","Component","rest","render","createContext","App","setItem","undefined","alertState","catch","testDatabase","ThemeProvider","CssBaseline","Provider","path","setLoggedIn","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","URL","process","href","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"iZASMA,EAAkBC,aAAW,SAACC,GAAD,OAC/BC,YAAa,CACTC,KAAM,CACFC,SAAU,GACVC,QAAS,EACTC,SAAU,YALEN,CAQtBO,KAEIC,EAAiBR,aAAW,SAACC,GAAD,OAC9BC,YAAa,CACTO,KAAM,CACF,qBAAsB,CAClBC,gBAAiBT,EAAMU,QAAQC,WAAWC,SAE9C,sBAAuB,CACnBH,gBAAiBI,IAAS,MAE9B,UAAW,CACPJ,gBAAiB,UACjBK,YAAa,QAXNf,CAerBgB,KAEa,SAASC,EAASC,GASzB,IAAD,EAEuBC,mBAAyB,CAAEC,OAAQ,KAF1D,mBAEIC,EAFJ,KAEWC,EAFX,KAIH,SAASC,EAAaC,EAAiCC,GACnD,OACI,0BAAUA,GAAIA,EAAd,SACKD,EAAWE,KAAI,SAACC,GACb,OACI,wBACIC,MAAOD,EAAME,MACRF,EAAMF,SAQnC,SAASK,EAAqBC,GAAmD,IAAD,EACtDA,EAAMC,OAAtBH,EADsE,EACtEA,KAAMD,EADgE,EAChEA,MACZN,EAAS,2BAAKD,GAAN,kBAAcQ,EAAOD,KAOjC,OAJAK,qBAAU,WACNX,EAASJ,EAAMS,SAChB,CAACT,EAAMS,QAGN,eAACnB,EAAD,WACKU,EAAMgB,OACFC,QAAO,SAAAC,GAAM,OAAKA,EAAOP,KAAKQ,SAAS,SACvCX,KAAI,SAAAU,GAAW,IAAD,YACX,OACI,eAAC,EAAD,WAGI,cAACE,EAAA,EAAD,CACIT,KAAMO,EAAOP,KACbU,OAAQ,SAACC,GACLtB,EAAMuB,aAAaD,EAAGtB,EAAMwB,IAEhCC,SAAUb,EACVc,UAAU,aACVhB,MAAOP,EAAMe,EAAOP,OAAiC,GACrDgB,WAAY,CACRC,KAAMV,EAAOP,MAEjBkB,WACK,CACDC,eAAgB,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,SAAkD,WAAhBd,EAAOP,KAAoB,IAAM,OACnFsB,kBAAkB,GAGtBC,MAAO,CAAEC,MAAO,SAEH,WAAhBjB,EAAOP,OAAP,UAA4BX,EAAMoC,iBAAlC,aAA4B,EAAiBC,SAC1ChC,EAAY,UAACL,EAAMoC,iBAAP,aAAC,EAAiBC,QAASnB,EAAOP,MAC9C,KACa,oBAAhBO,EAAOP,OAAP,UAAqCX,EAAMoC,iBAA3C,aAAqC,EAAiBE,mBACnDjC,EAAY,UAACL,EAAMoC,iBAAP,aAAC,EAAiBE,kBAAmBpB,EAAOP,MACxD,KACa,mBAAhBO,EAAOP,OAAP,UAAoCX,EAAMoC,iBAA1C,aAAoC,EAAiBG,kBAClDlC,EAAY,UAACL,EAAMoC,iBAAP,aAAC,EAAiBG,iBAAkBrB,EAAOP,MACvD,WAIpB,cAAC,EAAD,UACI,cAAC6B,EAAA,EAAD,CACIC,MAAM,UACNC,QAAS,kBAAM1C,EAAM2C,aAAa3C,EAAMwB,IAF5C,SAII,cAAC,IAAD,QAGR,cAAC,EAAD,UACI,cAACgB,EAAA,EAAD,CACII,aAAW,SACXH,MAAM,YACNC,QAAS,kBAAM1C,EAAM6C,YAAY1C,EAAMI,KAH3C,SAKI,cAAC,IAAD,W,yDClHL,SAASuC,EAAY9C,GAkB5B,IAAMnB,EAAkBC,aAAW,SAACC,GAAD,OACnCC,YAAa,CACT+D,KAAM,CACFvD,gBAAiBT,EAAMU,QAAQuD,QAAQC,KACvCR,MAAO1D,EAAMU,QAAQyD,OAAOC,MAC5BhE,QAAS,GACTD,SAAU,QANMJ,CAStBO,KASI+D,EAPYC,aAAW,SAACtE,GAAD,OAC7BC,YAAa,CACTsE,MAAO,CACHC,SAAU,SAIFC,GAGVC,EAAQC,sBAUlB,OAHI3C,qBAAU,WALF0C,EAAME,SACNF,EAAME,QAAQC,eAAe,CAACC,SAAU,aAM7C,IAEH,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,CAAOvC,UAAW0B,EAAQE,MAAOY,IAAKT,EAAtC,UACI,cAACU,EAAA,EAAD,UACI,eAACrE,EAAA,EAAD,WACKE,EAAMG,MAAMiE,OAAOpD,OACfC,QAAO,SAAAC,GAAM,OAAKA,EAAOP,KAAKQ,SAAS,SACvCX,KAAI,SAAAU,GACD,OACI,cAACrC,EAAD,UACKqC,EAAOP,KAAK0D,QAAQ,IAAK,MADRnD,EAAOP,SAKzC,cAAC9B,EAAD,UAAiB,0CACjB,cAACA,EAAD,UAAiB,iDAGzB,cAACyF,EAAA,EAAD,CAAW5C,UAAU,YAArB,SACM1B,EAAMG,MAAMoE,KAAM/D,KAAI,SAACC,EAAuBe,GAAxB,OAChB,cAACzB,EAAD,CACIU,MAAOA,EACPe,EAAGA,EAEHR,OAAQhB,EAAMG,MAAMiE,OAAOpD,OAC3BO,aAAcvB,EAAMuB,aACpBoB,aAAc3C,EAAM2C,aACpBP,UAAWpC,EAAMoC,UACjBS,YAAa7C,EAAM6C,aALdrB,aC1ErC,SAASgD,EAAeC,EAAeC,GACnC,GAAmB,MAAfD,EAAIE,OACJ,MAAM,IAAIC,MAAM,gBAEpB,GAAmB,MAAfH,EAAIE,OACJ,MAAM,IAAIC,MAAM,WAEpB,GAAmB,MAAfH,EAAIE,OACJ,MAAM,IAAIC,MAAM,UAAYH,EAAIE,QAEpC,MAAoB,SAAhBD,EACOD,EAAII,OAEJJ,EAAIK,OAInB,ICgCIC,ED6HWC,EA7JH,CACRC,cAAe,SAAUC,EAAsBX,GAC3C,OAAOY,MAAM,mBAAoB,CAC7BC,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1CgB,cAAe,SAAUP,GACrB,OAAOC,MAAM,mBAAoB,CAC7BE,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAA8BC,EAAK,YAEpDiB,SAAU,SAAUR,EAAsBS,GACtC,OAAOR,MAAM,iBAAD,OAAkBQ,EAAaC,KAA/B,YAAuCD,EAAaE,OAAS,CACrER,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAAuBC,EAAK,YAE7CqB,aAAc,SAAUZ,EAAsBX,GAC1C,OAAOY,MAAM,iBAAkB,CAC3BC,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1CsB,kBAAmB,SAAUb,EAAsBX,GAC/C,OAAOY,MAAM,sBAAuB,CAChCC,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1CuB,WAAY,SAAUd,EAAsBX,GACxC,OAAOY,MAAM,eAAgB,CACzBC,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1CwB,gBAAiB,SAAUf,EAAsBX,GAC7C,OAAOY,MAAM,oBAAqB,CAC9BC,OAAQ,OACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1CyB,eAAgB,SAAUhB,EAAsB3E,GAC5C,OAAO4E,MAAM,iBAAD,OAAkB5E,GAAM,CAChC6E,OAAQ,SACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1C0B,eAAgB,SAAUjB,EAAsBX,GAC5C,OAAOY,MAAM,iBAAD,OAAkBZ,EAAKhE,IAAM,CACrC6E,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1C2B,OAAQ,SAAUlB,EAAsBS,GACpC,OAAOR,MAAM,eAAD,OAAgBQ,EAAaC,KAA7B,YAAqCD,EAAaE,OAAS,CACnER,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAAuBC,EAAK,YAE7C4B,aAAc,SAAUnB,EAAsBX,GAC1C,OAAOY,MAAM,eAAD,OAAgBZ,EAAKhE,IAAM,CACnC6E,OAAQ,MACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,GAC3B,eAAgB,oBAEpBjG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1C6B,aAAc,SAAUpB,EAAsB3E,GAC1C,OAAO4E,MAAM,eAAD,OAAgB5E,GAAM,CAC9B6E,OAAQ,SACRC,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAAoBC,EAAK,YAE1C8B,MAAO,SAAUrB,EAAsBS,GACnC,OAAOR,MAAM,iBAAD,OAAkBQ,EAAaC,KAA/B,YAAuCD,EAAaE,OAAS,CACrER,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAAuBC,EAAK,YAE7C+B,UAAW,SAAUtB,GACjB,OAAOC,MAAM,aAAc,CACvBE,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAED,EAA+BC,EAAK,YAGrDgC,SAAU,SAAUvB,GAChB,OAAOC,MAAM,iBAAkB,CAC3BE,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAID,EAA8BC,EAAK,YAEtDiC,OAAQ,SAAUnC,GACd,OAAOY,MAAM,eAAgB,CACzBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBpG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAID,EAAoBC,EAAK,YAE5CkC,MAAO,SAAUpC,GACb,OAAOY,MAAM,cAAe,CACxBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBpG,KAAMqG,KAAKC,UAAUhB,KACtBiB,MAAK,SAAAf,GAAG,OAAID,EAA+BC,EAAK,YAEvDmC,UAAW,SAAU1B,GACjB,OAAOC,MAAM,kBAAmB,CAC5BE,QAAS,CACL,cAAgB,UAAhB,OAA2BH,MAEhCM,MAAK,SAAAf,GAAG,OAAGD,EAA+CC,EAAK,a,qDCxHnE,sBAAAoC,EAAA,sEACMC,YAAmB,WAAY,EAAG,CACrCC,QADqC,SAC7BhC,GAAK,OAAD,oGAChBA,EAAGiC,kBAAkB,WAAY,CAAEC,eAAe,IAClDlC,EAAGiC,kBAAkB,SAAU,CAAEC,eAAe,IAChDlC,EAAGiC,kBAAkB,mBAAoB,CAAEC,eAAe,IAC1DlC,EAAGiC,kBAAkB,oBAAqB,CAAEC,eAAe,IAC3DlC,EAAGiC,kBAAkB,UAAW,CAAEC,eAAe,IACjDlC,EAAGiC,kBAAkB,YAAa,CAAEC,eAAe,IANnC,gDAFf,OACLlC,EADK,OAYDmC,UAAUC,QACZC,KAbG,4C,sBAiBA,SAAeC,EAAtB,oC,4CAAO,WAA0B/D,EAA8BgE,GAAxD,SAAAT,EAAA,sEACC9B,EAAGwC,IAAIjE,EAAOgE,GADf,4C,sBAIA,SAAeE,EAAtB,kC,4CAAO,WAA8BC,GAA9B,SAAAZ,EAAA,sDACJa,OAAOC,KAAKF,GAA8CjH,KAAI,SAACoH,GAAsC,IAAD,EACnG7C,EAAG8C,MAAMD,GACT,UAAAH,EAAWG,UAAX,SAAgDpH,KAAI,SAAAsH,GAClD/C,EAAGwC,IAAIK,EAAUE,SAJhB,4C,sBASA,SAAeC,IAAtB,+B,4CAAO,4BAAAlB,EAAA,6DAEDY,EAA+B,CACjC,iBAAoB,GACpB,kBAAqB,GACrB,QAAW,IAJ+B,CAAC,mBAAoB,oBAAqB,WAM/EjH,IAAP,uCAAW,WAAM8C,GAAN,eAAAuD,EAAA,sEACY9B,EAAGiD,OAAO1E,GADtB,OACLsE,EADK,OAETH,EAAWnE,GAASsE,EAFX,2CAAX,uDAPK,kBAWEH,GAXF,4C,sBAcA,SAAeQ,EAAtB,kC,4CAAO,WAAiC1D,GAAjC,SAAAsC,EAAA,sEACC9B,EAAG8C,MAAM,aADV,OAEL9C,EAAGwC,IAAI,YAAahD,GAFf,4C,sBAKA,SAAe2D,IAAtB,gC,8CAAO,4BAAArB,EAAA,sEACY9B,EAAGiD,OAAO,aADtB,cACDzD,EADC,yBAEEA,EAAK,IAFP,4C,sBAKA,SAAe4D,KAAtB,gC,8CAAO,sBAAAtB,EAAA,+EAEG9B,EAAG8C,MAAM,YAFZ,uBAGG9C,EAAG8C,MAAM,UAHZ,gCAII,4BAJJ,yH,+BAUQT,K,8EAAf,gCAAAP,EAAA,6DACM3B,EAAQkD,aAAaC,QAAQ,SADnC,kBAGkCtD,EAAGiD,OAAO,YAH5C,aAGUM,EAHV,QAIwBC,OAAS,GAJjC,gCAKYvD,EAAIe,kBAAkBb,EAAOoD,GALzC,OAOMvD,EAAG8C,MAAM,YAPf,wBASgC9C,EAAGiD,OAAO,UAT1C,cASUQ,EATV,QAUsBD,OAAS,GAV/B,kCAWYvD,EAAIiB,gBAAgBf,EAAOsD,GAXvC,QAaMzD,EAAG8C,MAAM,UAbf,0DAgBIY,QAAQC,MAAR,MAhBJ,2D,sBAqBAC,OAAOC,iBAAiB,SAAUxB,I,sGC1HnB,SAASyB,GAAe7I,GAMnC,IAAD,EAC0C8I,IAAMC,WAAWC,IAAlDC,EADT,EACSA,KAAMC,EADf,EACeA,QAASC,EADxB,EACwBA,cAEjBC,EAAmB,CACrBC,KAAM,IAAIC,KAAKA,KAAKC,OACpBrJ,OAAQsJ,IACRC,UAAWD,IACXE,kBAAmBF,IACnBG,mBAAoBH,IACpBI,OAAQ,GACRC,MAAO,IAVZ,EAcmC5J,mBAA2BmJ,GAd9D,mBAcQU,EAdR,KAcmBC,EAdnB,OAiByD9J,mBAA4B,CAChFU,KAAM,GACNJ,GAAIiJ,MAnBT,mBAiBQQ,EAjBR,KAiB8BC,EAjB9B,OAsB+DhK,mBAA8B,IAtB7F,mBAsBQiK,EAtBR,KAsBiCC,EAtBjC,KAwBC,SAASC,EAAiBvJ,GACtB,IAAIF,EAAOE,EAAMC,OAAOH,KAExB,GADAoJ,EAAa,2BAAKD,GAAN,kBAAkBnJ,EAAOE,EAAMC,OAAOJ,SACrC,sBAATC,EAA8B,CAC9B,IAAIiH,EAAW5H,EAAMyH,WAAWlF,iBAAiBtB,QAAO,SAAAO,GAAC,OAAIA,EAAEjB,KAAOM,EAAMC,OAAOJ,SAAO,GAC1FuJ,EAAwBrC,GACxB,IAAIyC,EAAmBrK,EAAMyH,WAAWnF,kBAAkBrB,QAAO,SAAAO,GAAC,OAAIA,EAAEkI,oBAAsB9B,EAASrH,MACvG4J,EAA2BE,IA/BpC,4CAuCC,WAAgCxJ,GAAhC,iBAAAgG,EAAA,yDACIhG,EAAMyJ,iBACDR,EAAUT,MAASS,EAAU5J,QAAW4J,EAAUJ,mBAAsBI,EAAUF,OAF3F,uBAGQT,EAAc,CACVoB,SAAU,QACVC,QAAS,6BACTC,MAAM,IANlB,iCAUQC,EAVR,eAU2CZ,IAChBT,KAAvB,UAA8BqB,EAAuBrB,YAArD,aAA8B,EAA6BsB,mBAAmB,SAXlF,SAaQ3K,EAAM4K,iBAAgB,GAb9B,UAcc5F,EAAIc,aAAamD,EAAK/D,MAAOwF,GAd3C,QAeQ1K,EAAM4K,iBAAgB,GACtBzB,EAAc,CACVoB,SAAU,UACVC,QAAS,gBACTC,MAAM,IAEVzK,EAAM6K,kBArBd,qDAuBQ7K,EAAM4K,iBAAgB,GACF,eAAhB,KAAIJ,QAxBhB,wBAyBYrB,EAAc,CACVoB,SAAU,QACVC,QAAS,4BACTC,MAAM,IA5BtB,2BAgCYpD,EAAW,WAAYqD,GACH,iBAAhB,KAAIF,SACJtB,EAAQ,CAAE4B,KAAM,WAEpB3B,EAAc,CACVoB,SAAU,UACVC,QAAS,uBACTC,MAAM,IAvCtB,yBA2CQV,EAAaX,GACba,EAAwB,CACpBtJ,KAAM,GACNJ,GAAIiJ,MA9ChB,8EAvCD,sBA0FC,OACQ,eAACuB,GAAA,EAAD,WACA,cAACC,GAAA,EAAD,CAAYC,QAAQ,KAAKlH,UAAU,KAAKrC,UAAW1B,EAAMoD,QAAQ7D,KAAjE,yBACA,uBAAMmC,UAAW1B,EAAMoD,QAAQ7D,KAAM2L,SA7F9C,4CA6FS,UACI,cAAC,KAAD,CAAyBC,MAAOC,KAAhC,SACI,cAAC,KAAD,CACIC,gBAAc,EACdC,WAAS,EACTL,QAAQ,SACRM,OAAO,aACPC,OAAO,SACPjL,GAAG,qBACHI,KAAK,OACL8K,MAAM,OACN/K,MAAOoJ,EAAUT,KACjB5H,SAtEpB,SAA0B4H,GACtBU,EAAa,2BAAKD,GAAN,IAAiBT,KAAMA,MAsEnBqC,oBAAqB,CACjB,aAAc,mBAI1B,cAACtK,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAUF,OACjB6B,MAAM,SACN9K,KAAK,SACLmK,KAAK,SACLa,gBAAiB,CAAEC,QAAQ,KAE/B,cAACxK,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAU5J,OACjBuL,MAAM,SACN9K,KAAK,SACLmK,KAAK,SACLjJ,WAAY,CACRC,eAAgB,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,gBAEpBL,WAAY,CAAEkK,KAAM,UAExB,eAACC,GAAA,EAAD,CACIpK,UAAW1B,EAAMoD,QAAQ2I,YAD7B,UAEI,cAACC,GAAA,EAAD,CAAYC,QAAQ,iBAApB,4BACA,cAACC,GAAA,EAAD,CACIzK,SAAU2I,EACV1J,MAAOoJ,EAAUJ,kBACjB/I,KAAK,oBACLwL,QAAQ,iBACRV,MAAM,iBALV,SAOKzL,EAAMyH,WAAWlF,iBAAiB/B,KAAI,SAAAgB,GAAC,OACpC,cAAC4K,GAAA,EAAD,CAAU1L,MAAOc,EAAEjB,GAAnB,SAAwBiB,EAAEb,eAIrCuJ,EAAwB3B,OAAS,EAC9B,eAACuD,GAAA,EAAD,CAAapK,UAAW1B,EAAMoD,QAAQ2I,YAAtC,UACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,kBAApB,6BACA,cAACC,GAAA,EAAD,CACIzK,SAAU2I,EACV1J,MAAOoJ,EAAUH,mBACjBhJ,KAAK,qBACLwL,QAAQ,kBACRV,MAAM,kBALV,gBAQKvB,QARL,IAQKA,OARL,EAQKA,EAAyB1J,KAAI,SAAAgB,GAAC,OAC3B,cAAC4K,GAAA,EAAD,CAAU1L,MAAOc,EAAEjB,GAAnB,SAAwBiB,EAAEb,eAItC,KACHqJ,EAAqBqC,OAElB,eAACP,GAAA,EAAD,CAAapK,UAAW1B,EAAMoD,QAAQ2I,YAAtC,UACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,YAApB,oBACA,cAACC,GAAA,EAAD,CACIzK,SAAU2I,EACV1J,MAAOoJ,EAAUL,UACjB9I,KAAK,YACLwL,QAAQ,YACRV,MAAM,SALV,SAOKzL,EAAMyH,WAAWpF,QAAQ7B,KAAI,SAAAgB,GAAC,OAC3B,cAAC4K,GAAA,EAAD,CAAU1L,MAAOc,EAAEjB,GAAnB,SAAwBiB,EAAEb,eAItC,KACJ,cAACS,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAUD,MACjB4B,MAAM,QACN9K,KAAK,QACLmK,KAAK,SACLa,gBAAiB,CAAEC,QAAQ,KAE/B,cAACU,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,UAHV,oBAKA,cAAC6J,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,YACNC,QAAS,WACLqH,EAAaX,GACbpJ,EAAMuM,eANd,yBCtMD,SAAS1D,GAAe7I,GAMnC,IAAD,EAE0C8I,IAAMC,WAAWC,IAAlDC,EAFT,EAESA,KAAMC,EAFf,EAEeA,QAASC,EAFxB,EAEwBA,cAEjBC,EAAmB,CACrBC,KAAM,IAAIC,KAAKA,KAAKC,OACpBrJ,OAAQsJ,IACRC,UAAWD,IACXgD,OAAQ,IARb,EAYmCvM,mBAAyBmJ,GAZ5D,mBAYQU,EAZR,KAYmBC,EAZnB,KAeC,SAASK,EAAiBvJ,GACtB,IAAIF,EAAOE,EAAMC,OAAOH,KACxBoJ,EAAa,2BAAKD,GAAN,kBAAkBnJ,EAAOE,EAAMC,OAAOJ,SAjBvD,4CAwBC,WAAgCG,GAAhC,iBAAAgG,EAAA,yDACIhG,EAAMyJ,iBACDR,EAAUT,MAASS,EAAU5J,QAAW4J,EAAUL,WAAcK,EAAU0C,OAFnF,uBAGQrD,EAAc,CACVoB,SAAU,QACVC,QAAS,6BACTC,MAAM,IANlB,iCAUQC,EAVR,eAU2CZ,GAV3C,SAYQY,EAAuBrB,KAAvB,UAA8BqB,EAAuBrB,YAArD,aAA8B,EAA6BsB,mBAAmB,SAC9E3K,EAAM4K,iBAAgB,GAb9B,UAcc5F,EAAIgB,WAAWiD,EAAK/D,MAAOwF,GAdzC,QAeQ1K,EAAM4K,iBAAgB,GACtBzB,EAAc,CACVoB,SAAU,UACVC,QAAS,gBACTC,MAAM,IAEVzK,EAAM6K,kBArBd,qDAuBQ7K,EAAM4K,iBAAgB,GACF,eAAhB,KAAIJ,QAxBhB,wBAyBYrB,EAAc,CACVoB,SAAU,QACVC,QAAS,gBACTC,MAAM,IA5BtB,2BAgCYpD,EAAW,SAAUqD,GACrBvB,EAAc,CACVoB,SAAU,UACVC,QAAS,uBACTC,MAAM,IAEU,iBAAhB,KAAID,SACJtB,EAAQ,CAAE4B,KAAM,WAvChC,yBA2CQf,EAAaX,GA3CrB,8EAxBD,sBAuEC,OACQ,eAAC2B,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,KAAKlH,UAAU,KAAKrC,UAAW1B,EAAMoD,QAAQ7D,KAAjE,wBACA,uBAAMmC,UAAW1B,EAAMoD,QAAQ7D,KAAM2L,SA1ElD,4CA0Ea,UACI,cAAC,KAAD,CAAyBC,MAAOC,KAAhC,SACI,cAAC,KAAD,CACIC,gBAAc,EACdJ,QAAQ,SACRM,OAAO,aACPC,OAAO,SACPjL,GAAG,qBACHI,KAAK,OACL8K,MAAM,OACN/K,MAAOoJ,EAAUT,KACjB5H,SAjExB,SAA0B4H,GACtBU,EAAa,2BAAKD,GAAN,IAAiBT,KAAMA,MAiEfqC,oBAAqB,CACjB,aAAc,mBAI1B,cAACtK,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAU0C,OACjBf,MAAM,SACN9K,KAAK,SACLmK,KAAK,SACLa,gBAAiB,CAAEC,QAAQ,KAE/B,cAACxK,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAU5J,OACjBuL,MAAM,SACN9K,KAAK,SACLmK,KAAK,SACLjJ,WAAY,CACRC,eAAgB,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,gBAEpBL,WAAY,CAAEkK,KAAM,UAExB,eAACC,GAAA,EAAD,CAAapK,UAAW1B,EAAMoD,QAAQ2I,YAAtC,UACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,YAApB,oBACA,cAACC,GAAA,EAAD,CACIzK,SAAU2I,EACV1J,MAAOoJ,EAAUL,UACjB9I,KAAK,YACLwL,QAAQ,YACRV,MAAM,SALV,SAOKzL,EAAMyH,WAAWpF,QAAQ7B,KAAI,SAAAgB,GAAC,OAC3B,cAAC4K,GAAA,EAAD,CAAU1L,MAAOc,EAAEjB,GAAnB,SAAwBiB,EAAEb,eAKtC,cAAC2L,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,UAHV,oBAKA,cAAC6J,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,YACNC,QAAS,WACLqH,EAAaX,GACbpJ,EAAMuM,eANd,yB,4HCxJd1N,GAAkBC,aAAW,SAACC,GAAD,OAC/BC,YAAa,CACT+D,KAAM,CACFvD,gBAAiBT,EAAMU,QAAQuD,QAAQC,KACvCR,MAAO1D,EAAMU,QAAQyD,OAAOC,MAC5BhE,QAAS,GACTD,SAAU,IAEdD,KAAM,CACFE,QAAS,GACTD,SAAU,QAVEJ,CAatBO,KAEIoN,GAAe3N,aAAW,SAACC,GAAD,OAC5BC,YAAa,CACTO,KAAM,CACFC,gBAAiBT,EAAMU,QAAQC,WAAWC,QAC1C+M,OAAQ,eAJC5N,CAOnBgB,KAEI6M,GAAgB7N,aAAW,SAACC,GAAD,OAC7BC,YAAa,CACTO,KAAM,CACFC,gBAAiBI,IAAS,UAHhBd,CAMpBgB,KAEI8M,GAAqB9N,aAAW,SAACC,GAAD,OAClCC,YAAa,CACTO,KAAM,CACFC,gBAAiBI,IAAS,UAHXd,CAMzBgB,KAEa,SAAS+M,GAAW7M,GAU/B,IAAD,EAEyBC,mBAAoB,EAAC,IAF9C,mBAEQ6M,EAFR,KAEcC,EAFd,KAUC,IAAMC,EAAahN,EAAMG,MAAMoE,KAAK0I,QAAO,SAACpG,EAAGqG,GAC3C,GAAIA,EAAEC,eAMF,GALItG,EAAEqG,EAAEC,gBACJtG,EAAEqG,EAAEC,gBAAgBC,OAASC,WAAWH,EAAEhN,QAE1C2G,EAAEqG,EAAEC,gBAAkB,CAAEC,MAAOC,WAAWH,EAAEhN,QAASoC,kBAAmB,IAExE4K,EAAEI,gBACEzG,EAAEqG,EAAEC,gBAAgB7K,kBAAkB4K,EAAEI,iBACxCzG,EAAEqG,EAAEC,gBAAgB7K,kBAAkB4K,EAAEI,iBAAiBF,OAASC,WAAWH,EAAEhN,QAE/E2G,EAAEqG,EAAEC,gBAAgB7K,kBAAkB4K,EAAEI,iBAAmB,CAACF,MAAOC,WAAWH,EAAEhN,QAASmC,QAAS,IAElG6K,EAAEb,SACExF,EAAEqG,EAAEC,gBAAgB7K,kBAAkB4K,EAAEI,iBAAiBjL,QAAQ6K,EAAEb,QACnExF,EAAEqG,EAAEC,gBAAgB7K,kBAAkB4K,EAAEI,iBAAiBjL,QAAQ6K,EAAEb,SAAWgB,WAAWH,EAAEhN,QAE3F2G,EAAEqG,EAAEC,gBAAgB7K,kBAAkB4K,EAAEI,iBAAiBjL,QAAQ6K,EAAEb,QAAUgB,WAAWH,EAAEhN,cAG/F,GAAIgN,EAAEb,OAAQ,CAAC,IAAD,GACjB,UAAIxF,EAAEqG,EAAEC,gBAAgB7K,kBAAkB,aAA1C,aAAI,EAA6CD,QAAQ6K,EAAEb,UACvDxF,EAAEqG,EAAEC,gBAAgB7K,kBAAkB,MAAMD,QAAQ6K,EAAEb,SAAWgB,WAAWH,EAAEhN,QAC9E2G,EAAEqG,EAAEC,gBAAgB7K,kBAAkB,MAAM8K,OAASC,WAAWH,EAAEhN,SAEtE2G,EAAEqG,EAAEC,gBAAgB7K,kBAApB,2BAA4CuE,EAAEqG,EAAEC,gBAAgB7K,mBAAhE,IAAmF,KAAM,CAACD,QAAQ,eAAG6K,EAAEb,OAASgB,WAAWH,EAAEhN,SAAUkN,MAAOC,WAAWH,EAAEhN,WAInK,OAAO2G,IACR,IAQH,OANA4B,QAAQ8E,IAAIP,GAEZjM,qBAAU,WACN,IAAIyM,EAAY9F,OAAOC,KAAKqF,GAAYxM,KAAI,SAACgB,GAAD,OAAY,KACxDuL,EAAQS,KACT,CAACxN,IAEA,cAAC8D,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,WACI,cAACE,EAAA,EAAD,UACI,eAACrE,EAAA,EAAD,WACI,cAAC,GAAD,6BAGA,cAAC,GAAD,8BAGA,cAAC,GAAD,qBAGA,cAAC,GAAD,0BAKR,cAACwE,EAAA,EAAD,UACKoD,OAAOC,KAAKqF,GAAYxM,KAAI,SAACiN,EAAMjM,GAAP,OACzB,qCACI,eAACiL,GAAD,CAAsB/J,QAAS,kBAlEvD,SAAuBlB,GACnB,IAAIkM,EAAO,YAAOZ,GAClBY,EAAQlM,IAAMkM,EAAQlM,GACtBuL,EAAQW,GA+DiDC,CAAcnM,IAAnD,UACI,cAAC,GAAD,UACKiM,IAEL,cAAC,GAAD,oBAGA,cAAC,GAAD,IAGA,eAAC,GAAD,eACMT,EAAWS,GAAML,MAAMQ,QAAQ,QAXtBpM,GAclBwL,EAAWS,GAAMnL,mBAAqBwK,EAAKtL,GACxCkG,OAAOC,KAAKqF,EAAWS,GAAMnL,mBAAmB9B,KAAI,SAAAqN,GAAI,OACpD,qCACI,eAAClB,GAAD,WACI,cAAC,GAAD,IAGA,cAAC,GAAD,UACKkB,IAEL,cAAC,GAAD,oBAGA,eAAC,GAAD,eACMb,EAAWS,GAAMnL,kBAAkBuL,GAAMT,MAAMQ,QAAQ,SAGhEZ,EAAWS,GAAMnL,kBAAkBuL,GAAMxL,QACtCqF,OAAOC,KAAKqF,EAAWS,GAAMnL,kBAAkBuL,GAAMxL,SAAS7B,KAAI,SAAC6L,GAAD,OAC9D,eAACO,GAAD,WACI,cAAC,GAAD,IAEA,cAAC,GAAD,IAEA,cAAC,GAAD,UACKP,IAEL,eAAC,GAAD,eACMW,EAAWS,GAAMnL,kBAAkBuL,GAAMxL,QAAQgK,GAAQuB,QAAQ,YAK3E,WAIhB,kB,cCtKjB,SAASE,GAAT,GAYX,IAXA1K,EAWD,EAXCA,QACA2K,EAUD,EAVCA,iBACA3D,EASD,EATCA,iBACAN,EAQD,EARCA,UASA,OACI,cAACkE,GAAA,EAAD,CAAWtM,UAAW0B,EAAQ7D,KAA9B,SACY,eAAC0O,GAAA,EAAD,CAAMhD,QAAQ,WAAd,UACI,oBAAIvJ,UAAW0B,EAAQ7D,KAAvB,qBACA,uBAAM2L,SAAU6C,EAAkBrM,UAAW0B,EAAQ7D,KAArD,UACI,eAACuM,GAAA,EAAD,CAAab,QAAQ,WAAWvJ,UAAW0B,EAAQ2I,YAAnD,UACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,OAApB,oBACA,eAACC,GAAA,EAAD,CACIvL,KAAK,OACL8K,MAAM,SACNU,QAAQ,OACRzL,MAAOoJ,EAAUoE,KACjBzM,SAAU2I,EALd,UAMI,cAACgC,GAAA,EAAD,CAAU1L,MAAM,SAAhB,oBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAM,WAAhB,sBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAM,QAAhB,+BAGR,cAACU,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAUlE,KACjB6F,MAAM,OACN9K,KAAK,OACLmK,KAAK,SACLG,QAAQ,aAEZ,eAACa,GAAA,EAAD,CAAab,QAAQ,WAAWvJ,UAAW0B,EAAQ2I,YAAnD,UACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,SAApB,mBACA,eAACC,GAAA,EAAD,CACIzK,SAAU2I,EACV1J,MAAOoJ,EAAUjE,MACjBlF,KAAK,QACLwL,QAAQ,SACRV,MAAM,QALV,UAOI,cAACW,GAAA,EAAD,CAAU1L,MAAO,EAAjB,qBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,sBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,mBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,mBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,iBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,kBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,kBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,oBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,EAAjB,uBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,GAAjB,qBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,GAAjB,sBACA,cAAC0L,GAAA,EAAD,CAAU1L,MAAO,GAAjB,4BAGR,cAAC4L,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,UAHV,0B,cCrEb,SAAS0L,GAAT,GAAqD,IAAjC5J,EAAgC,EAAhCA,KAC/B,OACI,cAACyJ,GAAA,EAAD,UACI,cAAC,QAAD,CAAMzJ,KAAMA,M,wBCQT,SAAS6J,GAAKpO,GAMzB,IAAD,EAC0C8I,IAAMC,WAAWC,IAAlDC,EADT,EACSA,KAAMC,EADf,EACeA,QAASC,EADxB,EACwBA,cAEjBC,EAAmB,CACrBiD,OAAQ,GACRc,eAAgB,GAChBzD,kBAAmBF,IACnB8D,gBAAiB,GACjBe,YAAY,GARjB,EAYmCpO,mBAAuBmJ,GAZ1D,mBAYQU,EAZR,KAYmBC,EAZnB,KAeC,SAASK,EAAiBvJ,GACtB,IAAIF,EAAOE,EAAMC,OAAOH,KACpBD,EAAQG,EAAMC,OAAOJ,MACZ,eAATC,IAEAD,EAASG,EAAMC,OAA4BwN,SAE/CvE,EAAa,2BAAKD,GAAN,kBAAkBnJ,EAAOD,KAtB1C,SAyBgBqN,EAzBhB,gFAyBC,WAAgClN,EAA6BqN,GAA7D,iBAAArH,EAAA,sDACIhG,EAAMyJ,iBACNtK,EAAM4K,iBAAgB,GAF1B,cAKgBsD,EALhB,OAMiB,WANjB,OAYiB,mBAZjB,QAqBiB,oBArBjB,4BAOgB3J,EAAO,CAAE8H,OAAQvC,EAAUuC,SACjBA,OAR1B,sBAS0B,IAAIzH,MAAM,eATpC,+CAagBL,EAAO,CACH4I,eAAgBrD,EAAUqD,eAC1BkB,WAAYvE,EAAUuE,aAEhBlB,eAjB1B,uBAkB0B,IAAIvI,MAAM,eAlBpC,gDAsBgBL,EAAO,CACH+I,gBAAiBxD,EAAUwD,gBAC3B5D,kBAAmBI,EAAUJ,kBAC7B2E,WAAYvE,EAAUuE,aAEhBf,iBAAoB/I,EAAKmF,kBA3BnD,uBA4B0B,IAAI9E,MAAM,eA5BpC,6DAgCcI,EAAIC,cAAcgE,EAAK/D,MAAOX,GAhC5C,eAiCQ4E,EAAc,CACVoB,SAAU,UACVC,QAAS,kBACTC,MAAM,IApClB,UAsCsCzF,EAAIS,cAAcwD,EAAK/D,OAtC7D,QAsCYqJ,EAtCZ,OAuCQvO,EAAMwO,cAAcD,GAvC5B,uDA0CgB,KAAI/D,QA1CpB,OA2CiB,eA3CjB,QAkDiB,iBAlDjB,QAqDiB,gBArDjB,gCA4CgBrB,EAAc,CACVoB,SAAU,QACVC,QAAS,gBACTC,MAAM,IA/C1B,oCAmDgBvB,EAAQ,CAAE4B,KAAM,WAnDhC,oCAsDgB3B,EAAc,CACVoB,SAAU,QACVC,QAAS,6BACTC,MAAM,IAzD1B,6BA6DgBtB,EAAc,CACVoB,SAAU,QACVC,QAAS,0DACTC,MAAM,IAhE1B,yBAoEQzK,EAAM4K,iBAAgB,GACtBb,EAAaX,GArErB,8EAzBD,sBAkGC,OACI,eAAC2B,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,KAAKlH,UAAU,KAAKrC,UAAW1B,EAAMoD,QAAQ7D,KAAjE,0BACA,uBAAMmC,UAAW1B,EAAMoD,QAAQ7D,KAAM2L,SAAU,SAAC5J,GAAD,OAA6ByM,EAAiBzM,EAAG,WAAhG,UACI,cAACF,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAUuC,OACjBZ,MAAM,SACN9K,KAAK,SACLmK,KAAK,WAET,cAACwB,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,UAHV,oBAMJ,cAACuI,GAAA,EAAD,CAAYC,QAAQ,KAAKlH,UAAU,KAAKrC,UAAW1B,EAAMoD,QAAQ7D,KAAjE,kCACA,uBAAMmC,UAAW1B,EAAMoD,QAAQ7D,KAAM2L,SAAU,SAAC5J,GAAD,OAA6ByM,EAAiBzM,EAAG,mBAAhG,UACI,cAACF,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAUqD,eACjB1B,MAAM,iBACN9K,KAAK,iBACLmK,KAAK,WAET,cAAC2D,GAAA,EAAD,CAAkBC,QAAS,cAACC,GAAA,EAAD,CACvBL,QAASxE,EAAUuE,WACnB5M,SAAU2I,EACVzJ,KAAK,aACLgB,WAAY,CAAE,aAAc,sBAE5B8J,MAAM,WAEV,cAACa,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,UAHV,oBAMJ,cAACuI,GAAA,EAAD,CAAYC,QAAQ,KAAKlH,UAAU,KAAKrC,UAAW1B,EAAMoD,QAAQ7D,KAAjE,mCACA,uBAAMmC,UAAW1B,EAAMoD,QAAQ7D,KAAM2L,SAAU,SAAC5J,GAAD,OAA6ByM,EAAiBzM,EAAG,oBAAhG,UACI,eAACwK,GAAA,EAAD,CACIpK,UAAW1B,EAAMoD,QAAQ2I,YAD7B,UAEI,cAACC,GAAA,EAAD,CAAYC,QAAQ,iBAApB,4BACA,cAACC,GAAA,EAAD,CACIzK,SAAU2I,EACVzJ,KAAK,oBACLwL,QAAQ,oBACRV,MAAM,iBAJV,SAMKzL,EAAMyH,WAAWlF,iBAAiB/B,KAAI,SAAAgB,GAAC,OACpC,cAAC4K,GAAA,EAAD,CAAU1L,MAAOc,EAAEjB,GAAnB,SAAwBiB,EAAEb,eAItC,cAACS,EAAA,EAAD,CACIK,SAAU2I,EACV1J,MAAOoJ,EAAUwD,gBACjB7B,MAAM,kBACN9K,KAAK,kBACLmK,KAAK,WAET,cAACwB,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,UAHV,oBAMJ,qBAAKf,UAAW1B,EAAMoD,QAAQ7D,KAA9B,SACI,cAAC+M,GAAA,EAAD,CACIxB,KAAK,SACLG,QAAQ,YACRxI,MAAM,YACNC,QAAS,WAEL1C,EAAMuM,eANd,wBC2YDqC,OAhiBf,WAAiB,IAAD,MACN7P,EAAQ8P,eADF,EAG6B/F,IAAMC,WAAWC,IAAlDC,EAHI,EAGJA,KAAMC,EAHF,EAGEA,QAASC,EAHX,EAGWA,cAHX,EAMsBlJ,mBAC9B,CACIiO,KAAM,WACNtI,KAAM,IAAI0D,KAAKA,KAAKC,OAAOuF,iBAC3BjJ,MAAO,IAAIyD,KAAKA,KAAKC,OAAOwF,cAAgB,IAVxC,mBAMLjF,EANK,KAMMC,EANN,OAcoC9J,mBAC5C,CACImE,OAAQ,CAAEpD,OAAQ,IAClBuD,KAAM,CAAC,CACHrE,OAAQ,GACRmJ,KAAM,GACNmD,OAAQ,GACRH,OAAQ,GACR9L,GAAIiJ,IACJC,UAAWD,QAvBX,mBAcLwF,EAdK,KAcaC,EAdb,OA4BwChP,mBAChD,CACImE,OAAQ,CAAEpD,OAAQ,IAClBuD,KAAM,CAAC,CACHrE,OAAQ,GACRmJ,KAAM,GACNmD,OAAQ,GACR5C,OAAQ,GACRuD,eAAgB,GAChBG,gBAAiB,GACjBjB,OAAQ,GACRxC,MAAO,GACPtJ,GAAIiJ,QAxCJ,mBA4BL0F,EA5BK,KA4BeC,EA5Bf,OAgDkClP,mBAA2B,CACrEoC,QAAS,GACTC,kBAAmB,GACnBC,iBAAkB,KAnDV,mBAgDL6M,EAhDK,KAgDYC,EAhDZ,OAuD4BpP,oBAAS,GAvDrC,mBAuDLqP,EAvDK,KAuDS1E,EAvDT,KA0DZ,SAAS2E,EAAY9O,GACjB,GAAKA,EAAM4I,KAEJ,CACH,IAAIA,EAAO,IAAIC,KAAK7I,EAAM4I,MACtBzD,EAAOyD,EAAKyF,iBACZjJ,GAAS,EAAIwD,EAAK0F,eAAeS,WACrC3J,EAAQA,EAAM0C,OAAS,EAAI1C,EAAQ,IAAMA,EACzC,IAAI4J,EAAMpG,EAAKqG,aAAaF,WAExBG,EAAa9J,EAAQ,KADzB4J,EAAMA,EAAIlH,OAAS,EAAIkH,EAAM,IAAMA,GACE,IAAM7J,EAE3C,OADAnF,EAAM4I,KAAOsG,EACNlP,EAVP,OAAOA,EA5DH,4CAgFZ,WAAgCI,GAAhC,iBAAAgG,EAAA,sEAEQhG,EAAMyJ,iBACFsF,EAAQ9F,EAAUoE,KACtBtD,GAAgB,GAJxB,SAK6B5F,EAAI4K,GAAO3G,EAAK/D,MAAO4E,GALpD,OAKY+F,EALZ,OAMQjF,GAAgB,GAEF,UAAVgF,IACAC,EAAStL,KAAOsL,EAAStL,KAAK/D,IAAI+O,IAT9C,KAWgBK,EAXhB,OAYiB,aAZjB,QAeiB,WAfjB,QAkBiB,UAlBjB,gCAagBT,EAAsBU,GAbtC,oCAgBgBZ,EAAoBY,GAhBpC,oCAmBgBV,EAAsBU,GAnBtC,+EAuB4B,iBAAhB,KAAIrF,SACJtB,EAAQ,CAAE4B,KAAM,WAEpBF,GAAgB,GAChBzB,EAAc,CACVoB,SAAU,QACVC,QAAS,sBACTC,MAAM,IA9BlB,2DAhFY,sBAoHZ,SAASqF,EACLnP,EACAD,GAEA,IAAIP,EACAI,EAEJ,OAAQI,GACJ,IAAK,SACDR,EAAQiP,EAAgB/M,QACxB9B,EAAK,YACL,MACJ,IAAK,iBACDJ,EAAQiP,EAAgB7M,iBACxBhC,EAAK,oBACL,MACJ,IAAK,kBACDJ,EAAQiP,EAAgB9M,kBACxB/B,EAAK,qBAGb,IAAIwP,EAAe5P,EAAMc,QAAO,SAACO,GAAD,OAA0BA,EAAEb,OAASD,KAAO,GAC5E,OAAIqP,EACO,CAAExP,GAAIA,EAAIwP,aAAcA,GAExB,CAAExP,GAAI,KAAMwP,aAAc,MA7I7B,4CAkJZ,WAAoClP,EAA4CmP,GAAhF,6BAAAnJ,EAAA,sDACI,IAAK,EACqBhG,EAAMC,OAAtBH,EADN,EACMA,KAAMD,EADZ,EACYA,MACRuP,EAFJ,YAEsDf,EAAmB3K,MACrE2L,EAHJ,2BAGsCD,EAA0BD,IAHhE,kBAGyErP,EAAOD,IACnE,WAATC,GAA8B,mBAATA,GAAsC,oBAATA,IAA6B,EACpDmP,EAASnP,EAAmBD,GAAjDH,EADwE,EACxEA,GAAIwP,EADoE,EACpEA,aACNxP,GAAMwP,IACNG,EAAU,2BAAQA,GAAR,kBAAqB3P,EAAKwP,EAAaxP,OAGzD0P,EAA0BD,GAASE,EACnCf,EAAsB,2BAAKD,GAAN,IAA0B3K,KAAM0L,KAEvD,MAAOE,GACL1H,QAAQC,MAAMyH,GACM,iBAAhBA,EAAI3F,SACJtB,EAAQ,CAAE4B,KAAM,WAjB5B,4CAlJY,kEAyKZ,WAAkCjK,EAA4CmP,GAA9E,6BAAAnJ,EAAA,sDACI,IAAK,EACqBhG,EAAMC,OAAtBH,EADN,EACMA,KAAMD,EADZ,EACYA,MACR0P,EAFJ,YAEoDpB,EAAiBzK,MACjE2L,EAHJ,2BAGsCE,EAAwBJ,IAH9D,kBAGuErP,EAAOD,IACjE,WAATC,IAAoB,EACOmP,EAASnP,EAAmBD,GAAjDH,EADa,EACbA,GAAIwP,EADS,EACTA,aACNxP,GAAMwP,IACNG,EAAU,2BAAQA,GAAR,kBAAqB3P,EAAKwP,EAAaxP,OAGzD6P,EAAwBJ,GAASE,EACjCjB,EAAoB,2BAAKD,GAAN,IAAwBzK,KAAM6L,KACnD,MAAOD,GACL1H,QAAQC,MAAMyH,GAdtB,4CAzKY,kEA4LZ,WAAiCH,GAAjC,SAAAnJ,EAAA,+EAEc7B,EAAImB,eAAe8C,EAAK/D,MAAOgK,EAAmB3K,KAAKyL,IAFrE,OAGQ7G,EAAc,CACVoB,SAAU,UACVC,QAAS,kBACTC,MAAM,IAEV4F,KARR,gDAUQ5H,QAAQ8E,IAAR,MACApE,EAAc,CACVoB,SAAU,QACVC,QAAS,yBACTC,MAAM,IAdlB,0DA5LY,kEAgNZ,WAA+BuF,GAA/B,SAAAnJ,EAAA,+EAEc7B,EAAIqB,aAAa4C,EAAK/D,MAAO8J,EAAiBzK,KAAKyL,IAFjE,OAGQ7G,EAAc,CACVoB,SAAU,UACVC,QAAS,kBACTC,MAAM,IAEV4F,KARR,gDAUQlH,EAAc,CACVoB,SAAU,QACVC,QAAS,yBACTC,MAAM,IAblB,0DAhNY,4BA0P8B6F,sBAvB1C,SAAiBnQ,EAAwBoQ,GAoBrC,OAnBIA,EAAOC,OAAOjI,OAAS,IACvBpI,EAAQ,CACJqQ,OAAQD,EAAOC,OACfC,SAAU,CACN,CACIhF,MAAO,SACPlH,KAAMgM,EAAOnK,OACbsK,MAAM,EACNC,YAAa5R,EAAMU,QAAQuD,QAAQC,MAEvC,CACIwI,MAAO,WACPlH,KAAMgM,EAAO7K,SACbgL,MAAM,EACNC,YAAa5R,EAAMU,QAAQmR,UAAU3N,SAK9C9C,IAGmD,CAC1DqQ,OAAQ,GACRC,SAAU,CACN,CACIhF,MAAO,SACPlH,KAAM,GACNmM,MAAM,EACNC,YAAa5R,EAAMU,QAAQuD,QAAQC,MAEvC,CACIwI,MAAO,WACPlH,KAAM,GACNmM,MAAM,EACNC,YAAa5R,EAAMU,QAAQmR,UAAU3N,SAvQrC,mBA0PL4N,GA1PK,KA0PUC,GA1PV,cA6QGT,KA7QH,8EA6QZ,4BAAAxJ,EAAA,6DACI4B,QAAQ8E,IAAI,uBADhB,kBAGwBvI,EAAIwB,UAAUyC,EAAK/D,OAH3C,OAGYT,EAHZ,OAIQgE,QAAQ8E,IAAI9I,GACZqM,GAAiBrM,GACjBwD,EAAkBxD,GAN1B,kDAQ4B,YAAhB,KAAI+F,QACJ/B,QAAQ8E,IAAI,YAEZrF,IAAoB1C,MAAK,SAACjB,GAAD,OAA6BuM,GAAiBvM,MAXnF,2DA7QY,+BA8RG1B,GA9RH,iFA8RZ,WAA2BtC,GAA3B,iBAAAsG,EAAA,kEAE+B,aAAnBiD,EAAUoE,KAFtB,gCAGkBlJ,EAAIkB,eAAe+C,EAAK/D,MAAO3E,GAHjD,OAIgB0P,EAA4Bf,EAAmB3K,KAAKtD,QAAO,SAAAR,GAAK,OAAIA,EAAMF,KAAOA,KACrF4O,EAAsB,2BAAKD,GAAN,IAA0B3K,KAAM0L,KALjE,0BAMsC,WAAnBnG,EAAUoE,KAN7B,kCAOkBlJ,EAAIsB,aAAa2C,EAAK/D,MAAO3E,GAP/C,QAQgB6P,EAA0BpB,EAAiBzK,KAAKtD,QAAO,SAAAR,GAAK,OAAIA,EAAMF,KAAOA,KACjF0O,EAAoB,2BAAKD,GAAN,IAAwBzK,KAAM6L,KAT7D,QAWQC,KAXR,kDAaQ5H,QAAQC,MAAR,MACY,iBAAR,MACAQ,EAAQ,CAAE4B,KAAM,WAf5B,2DA9RY,sBAmTZ,IA2DM1H,GA3DYC,aAAW,SAACtE,GAAD,aACzBC,YAAa,CACT+M,YAAa,CACTP,OAAQzM,EAAMgS,QAAQ,GACtBxN,SAAU,QAEdyN,YAAa,CACTC,UAAWlS,EAAMgS,QAAQ,IAE7BxR,MAAI,GACA2R,QAAS,OACTC,eAAgB,SAChBC,SAAU,QAHV,cAICrS,EAAMsS,YAAYC,GAAG,MAAQ,CAC1BF,SAAU,WALd,cAOA,QAPA,aAQI5F,OAAQzM,EAAMgS,QAAQ,IACrBhS,EAAMsS,YAAYE,KAAK,MAAQ,CAC5BpP,MAAO,UAVf,GAcJqE,UAAW,CACPrE,MAAO,QAEXqP,UAAW,CACPC,MAAO,QACPjG,OAAQ,OAEZkG,QAAS,CACLD,MAAO,OACPjG,OAAQ,OAEZmG,QAAS,CACLnS,gBAAiBT,EAAMU,QAAQmR,UAAU3N,KACzCR,MAAO,QACPmP,UAAW,SACX5P,SAAU,UAEd6P,SAAU,CACNC,OAAQ,KACRrP,MAAO,QAEXsP,UAAW,CACP/P,SAAU,QACVgQ,OAAQjT,EAAMgS,QAAQ,GACtBkB,MAAOlT,EAAMgS,QAAQ,IAEzBmB,OAAQ,CACJ/P,MAAO,QAEXgQ,WAAW,eACNpT,EAAMsS,YAAYE,KAAK,MAAQ,CAC5Ba,WAAY,cAKZ5O,GA9WJ,GAiX8BsF,IAAM7I,UAAS,GAjX7C,qBAiXLoS,GAjXK,MAiXUC,GAjXV,MAmXNC,GAAU,CACZ,CAAEC,KAAM,cAAC,KAAD,IAAa7R,KAAM,WAAY4P,OAY3C,WACIkC,IAAmB,GACnBH,IAAiB,IAdkDI,UAAW,WAC9E,CAAEF,KAAM,cAAC,KAAD,IAAa7R,KAAM,SAAU4P,OAgBzC,WACIoC,IAAiB,GACjBL,IAAiB,IAlB8CI,UAAW,QArXlE,GA2YkCzS,oBAAS,GA3Y3C,qBA2YL2S,GA3YK,MA2YYH,GA3YZ,SA4Y8BxS,oBAAS,GA5YvC,qBA4YL4S,GA5YK,MA4YUF,GA5YV,SA6YoB1S,oBAAS,GA7Y7B,qBA6YL6S,GA7YK,MA6YKC,GA7YL,MA8YZ,SAASxG,KACLkG,IAAmB,GACnBE,IAAiB,GACjBI,IAAY,GAjZJ,OAqZkB9S,oBAAkB,GArZpC,qBAqZL0R,GArZK,MAqZIqB,GArZJ,MA4aZ,OAtBArK,OAAOC,iBAAiB,WAAW,kBAAMoK,IAAW,MACpDrK,OAAOC,iBAAiB,UAAU,kBAAMoK,IAAW,MAEnDjS,qBAAU,WAAM,4CACZ,8BAAA8F,EAAA,+EAE+B7B,EAAIS,cAAcwD,EAAK/D,OAFtD,OAEYuC,EAFZ,OAGQ4H,EAAmB5H,GACnBD,EAAeC,GAJvB,iEAM+BM,IAN/B,QAMYN,EANZ,OAOQ4H,EAAmB5H,GAP3B,0DADY,uBAAC,WAAD,wBAWZhC,GACKyB,UAAUC,QACX6L,IAAW,GAEf3C,OACG,IAIH,eAAC4C,GAAA,EAAD,CAAKlP,UAAU,MAAMrC,UAAU,OAA/B,UACKiQ,GACG,cAACuB,GAAA,EAAD,CAAQxR,UAAW0B,GAAQuO,QAAS3P,SAAS,SAA7C,qBAGA,KACJ,eAACiR,GAAA,EAAD,CAAKlP,UAAU,SAASrC,UAAU,SAAlC,UACI,cAAC4K,GAAA,EAAD,CACIrB,QAAQ,YACRxI,MAAM,UACNf,UAAW0B,GAAQsO,QACnBhP,QAAS,kBAAIqQ,IAAY,IAJ7B,kBAOA,cAACzG,GAAA,EAAD,CACIrB,QAAQ,YACRxI,MAAM,UACNf,UAAW0B,GAAQoO,UACnB9O,QAAO,sBAAE,4BAAAmE,EAAA,6DACLqC,EAAQ,CAAE4B,KAAM,WADX,SAEW3C,KAFX,OAED1D,EAFC,OAGLgE,QAAQ8E,IAAI9I,GAHP,2CAJb,oBAWA,cAACuJ,GAAA,EAAD,CAAWtM,UAAW0B,GAAQ7D,KAA9B,SACI,qBAAI2C,MAAO,CAAE0P,UAAW,UAAxB,UAAqC3I,EAAKkK,KAA1C,iBAEA,cAAChF,GAAD,CAAW5J,KAAMsM,KACrB,cAAC/C,GAAD,CACI1K,QAASA,GACT2K,iBA5cJ,4CA6cI3D,iBAlYhB,SAA0BvJ,GACtB,IAAIF,EAAOE,EAAMC,OAAOH,KACxBoJ,EAAa,2BAAKD,GAAN,kBAAkBnJ,EAAOE,EAAMC,OAAOJ,UAiYtCoJ,UAAWA,OAGnB,sBAAKpI,UAAU,OAAf,UACwB,WAAnBoI,EAAUoE,OAAV,UAA+Bc,EAAiBzK,KAAK,UAArD,aAA+B,EAA0BhE,IACtD,cAACuC,EAAD,CACI3C,MAAO6O,EACP5M,UAAWgN,EACX7N,aAtdR,8CAudQoB,aAvdR,4CAwdQE,YAAaA,GACbqL,KAAMpE,EAAUoE,OAEpB,KACgB,aAAnBpE,EAAUoE,OAAV,UAAiCgB,EAAmB3K,KAAK,UAAzD,aAAiC,EAA4BhE,IAC1D,cAACuC,EAAD,CACI3C,MAAO+O,EACP9M,UAAWgN,EACX7N,aAheR,8CAieQoB,aAjeR,4CAkeQE,YAAaA,GACbqL,KAAMpE,EAAUoE,OAEpB,KACgB,UAAnBpE,EAAUoE,OAAV,UAA8BgB,EAAmB3K,KAAK,UAAtD,aAA8B,EAA4BhE,IACvD,cAACsM,GAAD,CAAY1M,MAAO+O,IACnB,QAER,cAACkE,GAAA,EAAD,CAAQC,QAAS9G,GAAa9B,KAAMqI,GAAU1T,SAAS,KAAvD,SACI,cAACgP,GAAD,CACIhL,QAASA,GACTmJ,YAAaA,GACb9E,WAAY2H,EACZZ,cAAea,EACfzE,gBAAiBA,MAGzB,cAACwI,GAAA,EAAD,CAAQC,QAAS9G,GAAa9B,KAAMmI,GAAiBxT,SAAS,KAA9D,SACI,cAAC,GAAD,CACAgE,QAASA,GACTmJ,YAAaA,GACb9E,WAAY2H,EACZxE,gBAAiBA,EACjBC,gBAAiBwF,OAGrB,cAAC+C,GAAA,EAAD,CAAQC,QAAS9G,GAAa9B,KAAMoI,GAAezT,SAAS,KAA5D,SACI,cAAC,GAAD,CACAgE,QAASA,GACTmJ,YAAaA,GACb9E,WAAY2H,EACZxE,gBAAiBA,EACjBC,gBAAiBwF,OAGrB,cAACiD,GAAA,EAAD,CACIC,UAAU,oBACV7R,UAAW0B,GAAQ2O,UAEnBS,KAAM,cAACgB,GAAA,EAAD,IACNH,QAlJiB,WACzBf,IAAiB,IAkJTmB,OA/IO,WACfnB,IAAiB,IA+IT7H,KAAM4H,GACNqB,aAAc,aARlB,SAUKnB,GAAQ/R,KAAI,SAAC+P,GAAD,OACT,cAACoD,GAAA,EAAD,CAEInB,KAAMjC,EAAOiC,KACboB,aAAcrD,EAAO5P,KACrBkT,aAAW,EACXnR,QAAS6N,EAAOA,QAJXA,EAAO5P,WAQxB,cAACmT,GAAA,EAAD,CAAUpS,UAAW0B,GAAQyO,SAAUpH,KAAM6E,EAA7C,SACI,cAACyE,GAAA,EAAD,CAAkBC,eAAa,EAACvR,MAAM,kBC7jBhDe,GAAYH,aAAW,SAACtE,GAAD,OACzBC,YAAa,CACTO,KAAM,CACF2R,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACV,QAAQ,aACJ5F,OAAQzM,EAAMgS,QAAQ,IACrBhS,EAAMsS,YAAYE,KAAK,MAAQ,CAC5BpP,MAAO,eAOZ,SAAS8R,GAAT,GAAyD,IAAxC1H,EAAuC,EAAvCA,YACpBpD,EAAkBL,IAAMC,WAAWC,IAAnCG,cAD2D,EAGrBlJ,mBAAS,CACnDiU,SAAU,GACVC,SAAU,KALqD,mBAG5DC,EAH4D,KAG3CC,EAH2C,KAQ7D9S,EAAe,SAACV,GAAgD,IAAD,EACzCA,EAAMC,OAAtBH,EADyD,EACzDA,KAAMD,EADmD,EACnDA,MACd2T,EAAmB,2BACZD,GADW,kBAEbzT,EAAOD,MAIV4T,EAAU,uCAAG,WAAOzT,GAAP,SAAAgG,EAAA,6DACfhG,EAAMyJ,iBADS,kBAGLtF,EAAI0B,OAAO0N,GAHN,OAIXjL,EAAc,CACVoB,SAAU,UACVC,QAAS,kCACTC,MAAM,IAEV8B,IATW,gDAWX9D,QAAQC,MAAR,MACAS,EAAc,CACVoB,SAAU,QACVC,QAAS,oBACTC,MAAM,IAfC,yDAAH,sDAoBVrH,EAAUI,KAEhB,OACI,cAACuH,GAAA,EAAD,UACI,sBAAK7I,MAAO,CAAE0P,UAAW,UAAzB,UACI,wCACA,uBAAMlQ,UAAW0B,EAAQ7D,KAAM2L,SAAUoJ,EAAzC,UACI,cAAClT,EAAA,EAAD,CACIK,SAAUF,EACVb,MAAO0T,EAAgBF,SACvBpJ,KAAK,OACLnK,KAAK,WACL8K,MAAM,WACNR,QAAQ,aAEZ,cAAC7J,EAAA,EAAD,CACIK,SAAUF,EACVb,MAAO0T,EAAgBD,SACvBrJ,KAAK,WACLnK,KAAK,WACL8K,MAAM,WACNR,QAAQ,aAEZ,cAACqB,GAAA,EAAD,CAAQrB,QAAQ,YAAYxI,MAAM,UAAU9B,KAAK,SAASmK,KAAK,SAA/D,6BC1EpB,IAAMtH,GAAYH,aAAW,SAACtE,GAAD,OACzBC,YAAa,CACTO,KAAM,CACF2R,QAAS,OACTC,eAAgB,SAChBS,UAAW,SACXR,SAAU,OACV,QAAQ,aACJ5F,OAAQzM,EAAMgS,QAAQ,IACrBhS,EAAMsS,YAAYE,KAAK,MAAQ,CAC5BpP,MAAO,UAInBoS,UAAW,CACP9C,MAAO,QACPjG,OAAQ,YAKL,SAASgJ,KAAS,IAAD,EACa1L,IAAMC,WAAWC,IAAlDC,EADoB,EACpBA,KAAMC,EADc,EACdA,QAASC,EADK,EACLA,cADK,EAGgBlJ,mBAAS,CACjDiU,SAAU,GACVC,SAAU,KALc,mBAGrBM,EAHqB,KAGLC,EAHK,OAQQzU,oBAAkB,GAR1B,mBAQrB0U,EARqB,KAQTC,EARS,KAUtBC,EAAc,SAAChU,GAAgD,IAAD,EACxCA,EAAMC,OAAtBH,EADwD,EACxDA,KAAMD,EADkD,EAClDA,MACdgU,EAAkB,2BACXD,GADU,kBAEZ9T,EAAOD,MAIV4T,EAAU,uCAAG,WAAOzT,GAAP,SAAAgG,EAAA,6DACfhG,EAAMyJ,iBADS,kBAGLtF,EAAI2B,MAAM8N,GAAgBjP,MAAK,SAAAsP,GACjC5L,EAAQ,CAAE4B,KAAM,QAASiK,QAAS,CAAE5B,KAAMsB,EAAeP,SAAUhP,MAAO4P,EAAS5P,YAJ5E,uDAOXuD,QAAQC,MAAR,MACAS,EAAc,CACVoB,SAAU,QACVC,QAAS,iCACTC,MAAM,IAXC,yDAAH,sDAgBVrH,EAAUI,KAEhB,SAAS+I,IACLqI,GAAc,GAGlB,OAAI3L,EAAK+L,SACE,cAAC,IAAD,CAAUC,GAAG,MAMpB,qCACI,cAAC3I,GAAA,EAAD,CACI5K,UAAW0B,EAAQmR,UACnBtJ,QAAQ,YACRxI,MAAM,UACNC,QAAS,kBAAMkS,GAAc,IAJjC,qBAMA,eAAC5G,GAAA,EAAD,CAAWtM,UAAW0B,EAAQ7D,KAA9B,UACI,uCACA,uBAAMmC,UAAW0B,EAAQ7D,KAAM2L,SAAUoJ,EAAzC,UACI,cAAClT,EAAA,EAAD,CACIK,SAAUoT,EACVnU,MAAO+T,EAAeP,SACtBpJ,KAAK,OACLnK,KAAK,WACL8K,MAAM,WACNR,QAAQ,aAEZ,cAAC7J,EAAA,EAAD,CACIK,SAAUoT,EACVnU,MAAO+T,EAAeN,SACtBrJ,KAAK,WACLnK,KAAK,WACL8K,MAAM,WACNR,QAAQ,aAEZ,cAACqB,GAAA,EAAD,CAAQrB,QAAQ,YAAYxI,MAAM,UAAU9B,KAAK,QAAQmK,KAAK,SAA9D,yBAGR,cAACsI,GAAA,EAAD,CAAQC,QAAS9G,EAAa9B,KAAMkK,EAAYvV,SAAS,KAAzD,SACI,cAAC6U,GAAD,CAAQ1H,YAAaA,S,+BCvGtB,SAAS2I,GAAMlV,GAC5B,OAAO,cAAC,KAAD,aAAUmV,UAAW,EAAGlK,QAAQ,UAAajL,ICGtD,IAAMwD,GAAYH,aAAW,SAACtE,GAAD,MAAmB,CAC5CqW,SAAU,CACNjT,MAAO,OACP,YAAa,CACT8O,UAAWlS,EAAMgS,QAAQ,SAKtB,SAASsE,GAAT,GAGP,IAHqClV,EAGtC,EAHsCA,MAAOC,EAG7C,EAH6CA,SAK1CgD,EAAUI,KAEV+I,EAAc,SAAC1L,EAA8ByU,GAChC,cAAXA,GAGJlV,EAAS,2BAAKD,GAAN,IAAasK,MAAM,MAG/B,OACI,qBAAK/I,UAAW0B,EAAQgS,SAAxB,SACI,cAACG,GAAA,EAAD,CACI9K,KAAMtK,EAAMsK,KACZ+K,iBAAkB,IAClBnC,QAAS9G,EAHb,SAMI,cAAC,GAAD,CAAO8G,QAAS9G,EAAahC,SAAUpK,EAAMoK,SAA7C,SACKpK,EAAMqK,c,qDCLrBiL,GAAeC,eAkCrB,IA/BuBC,GA+BjB5W,IA/BiB4W,GA+BK,CAC1BlW,QAAS,CACPqL,KAAM,OACNpL,WAAY,CACVC,QAASC,IAAS,MAEpBoD,QAAS,CACPC,KAAM2S,KAAM,MAEdhF,UAAW,CACT3N,KAAM4S,KAAO,QAxCVH,aAAe,aACpBI,UAAW,CACTC,qBAAsB,CACpBC,UAAU,aACRxW,gBAAiBI,IAAS,MACzB6V,GAAapE,YAAYE,KAAK,MAAQ,CACvCa,WAAY,WAIhB6D,QAAS,CACP1W,KAAM,CACJC,gBAAiBI,IAAS,OAG9BsW,iBAAkB,CAChB3W,KAAM,CACJC,gBAAiBI,IAAS,OAG9BuW,yBAA0B,CACxBC,WAAY,CACV5W,gBAAiBI,IAAS,SAI7B+V,MAsBDU,GAAiB,SAAC,GAAD,IAAcC,EAAd,EAAGvS,UAAsBiR,EAAzB,EAAyBA,SAAauB,EAAtC,+CAMnB,cAAC,IAAD,2BAAWA,GAAX,IAAiBC,OAAQ,SAAAxW,GAAK,OAC5BgV,EACI,cAACsB,EAAD,eAAetW,IACf,cAAC,IAAD,CAAUiV,GAAG,gBAMVjM,GAAcF,IAAM2N,cAA4B,CAC3DxN,KAAM,CACJ+L,UAAU,EACV7B,KAAM,GACNjO,MAAO,IAETgE,QAAS,aACTC,cAAe,eAKF,SAASuN,KAEtB,IAF4B,EAyBJpG,sBAvBR,SAACnQ,EAAaoQ,GAC5B,MAAoB,UAAhBA,EAAOzF,MAAoByF,EAAOwE,SACpC3M,aAAauO,QAAQ,OAAQpG,EAAOwE,QAAQ5B,MAC5C/K,aAAauO,QAAQ,QAASpG,EAAOwE,QAAQ7P,OACtC,2BACF/E,GADL,IAEE6U,UAAU,EACV7B,KAAM5C,EAAOwE,QAAQ5B,KACrBjO,MAAOqL,EAAOwE,QAAQ7P,SAEC,WAAhBqL,EAAOzF,MAChB1C,aAAaP,QACN,2BACF1H,GADL,IAEE6U,UAAU,EACV7B,KAAM,GACNjO,MAAO,MAGF/E,IAIiC,CAC1C6U,UAAU,EACV7B,KAAM,GACNjO,MAAO,KA5BmB,mBAyBrB+D,EAzBqB,KAyBfC,EAzBe,OA+BQjJ,mBAAyB,CAC3DsK,cAAUqM,EACVpM,QAAS,GACTC,MAAM,IAlCoB,mBA+BrBoM,EA/BqB,KA+BT1N,EA/BS,KA2D5B,OArBApI,qBAAU,WACR,IAAMmE,EAAQkD,aAAaC,QAAQ,SAC7B8K,EAAO/K,aAAaC,QAAQ,QAC9BnD,GACFF,EAAI4B,UAAU1B,GACXM,MAAK,SAAAf,GAAG,OAAIyE,EAAQ,CAAE4B,KAAM,QAASiK,QAAS,CAAE5B,KAAM1O,EAAIyP,SAAUhP,MAAOA,QAC3E4R,OAAM,SAAA3G,GACe,iBAAhBA,EAAI3F,QACNtB,EAAQ,CAAE4B,KAAM,WAEhB5B,EAAQ,CAAE4B,KAAM,QAASiK,QAAS,CAAE5B,KAAMA,GAAQ,GAAIjO,MAAOA,GAAS,WAI7E,IAGHnE,qBAAU,YZ3GL,WAAP,wBY4GIgW,MAIA,eAACC,GAAA,EAAD,CAAejY,MAAOA,GAAtB,UACE,cAACkY,GAAA,EAAD,IACA,eAACjO,GAAYkO,SAAb,CACExW,MAAO,CAAEuI,OAAMC,UAASC,iBAD1B,UAIE,eAAC,IAAD,WACE,cAAC,GAAD,CAAgBgO,KAAK,IACnBnC,SAAU/L,EAAK+L,SACfoC,YAAalO,EAEbnF,UAAW6K,KAEb,cAAC,IAAD,CAAOyI,OAAK,EAACF,KAAK,SAAlB,SACE,cAAC3C,GAAD,SAGJ,cAACa,GAAD,CACElV,MAAO0W,EACPzW,SAAU+I,UCpLpB,IAAMmO,GAAcC,QACW,cAA7B5O,OAAO6O,SAASC,UAEe,UAA7B9O,OAAO6O,SAASC,UAEhB9O,OAAO6O,SAASC,SAASC,MAAM,2DA0CnC,SAASC,GAAgBC,EAAeC,GACtC3Q,UAAU4Q,cACPC,SAASH,GACTpS,MAAK,SAACwS,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/X,QACf+G,UAAU4Q,cAAcO,YAI1B5P,QAAQ8E,IACN,+GAKEsK,GAAUA,EAAOS,UACnBT,EAAOS,SAASN,KAMlBvP,QAAQ8E,IAAI,sCAGRsK,GAAUA,EAAOU,WACnBV,EAAOU,UAAUP,WAO5BlB,OAAM,SAACpO,GACND,QAAQC,MAAM,4CAA6CA,MCjGjE,IAYe8P,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlT,MAAK,YAAkD,IAA/CmT,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASxC,OAEL,cAAC,GAAD,IAEFyC,SAASC,eAAe,SFcnB,SAAkBrB,GACvB,GAA6C,kBAAmB3Q,UAAW,CAGzE,GADkB,IAAIiS,IAAIC,GAAwBzQ,OAAO6O,SAAS6B,MACpDC,SAAW3Q,OAAO6O,SAAS8B,OAIvC,OAGF3Q,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMgP,EAAK,UAAMwB,GAAN,sBAEP9B,KAgEV,SAAiCM,EAAeC,GAE9C1S,MAAMyS,EAAO,CACXvS,QAAS,CAAE,iBAAkB,YAE5BG,MAAK,SAACqK,GAEL,IAAM0J,EAAc1J,EAASxK,QAAQmU,IAAI,gBAEnB,MAApB3J,EAASlL,QACO,MAAf4U,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CvS,UAAU4Q,cAAc4B,MAAMlU,MAAK,SAACwS,GAClCA,EAAa2B,aAAanU,MAAK,WAC7BmD,OAAO6O,SAASoC,eAKpBjC,GAAgBC,EAAOC,MAG1Bf,OAAM,WACLrO,QAAQ8E,IAAI,oEAtFVsM,CAAwBjC,EAAOC,GAI/B3Q,UAAU4Q,cAAc4B,MAAMlU,MAAK,WACjCiD,QAAQ8E,IACN,+GAMJoK,GAAgBC,EAAOC,OEpC/BiC,GAKAtB,O","file":"static/js/main.c509b0db.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DataListStateType, TableDataEntry, AllDataListsType } from '../interfaces/Interfaces'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { IconButton, TableCell, TableRow, TextField, InputAdornment } from '@material-ui/core'\r\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { blueGrey } from '@material-ui/core/colors';\r\n\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        body: {\r\n            fontSize: 14,\r\n            padding: 0,\r\n            maxWidth: '10ch',\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.background.default,\r\n            },\r\n            '&:nth-of-type(even)': {\r\n                backgroundColor: blueGrey[800],\r\n            },\r\n            '& input': {\r\n                backgroundColor: 'inherit',\r\n                paddingLeft: 0,\r\n            }\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nexport default function InputRow(props:\r\n    {\r\n        entry: TableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n        dataLists?: AllDataListsType\r\n        handleChange: Function,\r\n        handleUpdate: Function,\r\n        deleteEntry: Function\r\n    }) {\r\n\r\n    const [state, setState] = useState<TableDataEntry>({ amount: \"\" })\r\n\r\n    function makeDataList(propsState: DataListStateType[], id: string) {\r\n        return (\r\n            <datalist id={id}>\r\n                {propsState.map((entry: DataListStateType) => {\r\n                    return (\r\n                        <option\r\n                            value={entry.name}\r\n                            key={entry.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </datalist>\r\n        )\r\n    }\r\n\r\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        let { name, value } = event.target;\r\n        setState({ ...state, [name]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(props.entry)\r\n    }, [props.entry])\r\n\r\n    return (\r\n        <StyledTableRow>\r\n            {props.fields\r\n                .filter(column => !column.name.includes(\"id\"))\r\n                .map(column => {\r\n                    return (\r\n                        <StyledTableCell\r\n\r\n                        >\r\n                            <TextField\r\n                                name={column.name}\r\n                                onBlur={(e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n                                    props.handleChange(e, props.i)\r\n                                }}\r\n                                onChange={handleInputRowChange}\r\n                                className=\"tableInput\"\r\n                                value={state[column.name as keyof TableDataEntry] || \"\"}\r\n                                inputProps={{\r\n                                    list: column.name\r\n                                }}\r\n                                InputProps={\r\n                                     {\r\n                                    startAdornment: <InputAdornment position=\"start\">{column.name === 'amount' ? \"$\" : null}</InputAdornment>,\r\n                                    disableUnderline: true\r\n                                }\r\n                            }\r\n                                style={{ width: '80%' }}\r\n                            />\r\n                            {column.name === 'person' && props.dataLists?.persons ? (\r\n                                makeDataList(props.dataLists?.persons, column.name)\r\n                            ) : null}\r\n                            {column.name === 'narrow_category' && props.dataLists?.narrow_categories ? (\r\n                                makeDataList(props.dataLists?.narrow_categories, column.name)\r\n                            ) : null}\r\n                            {column.name === 'broad_category' && props.dataLists?.broad_categories ? (\r\n                                makeDataList(props.dataLists?.broad_categories, column.name)\r\n                            ) : null}\r\n                        </StyledTableCell>\r\n                    )\r\n                })}\r\n            <StyledTableCell>\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    onClick={() => props.handleUpdate(props.i)}\r\n                >\r\n                    <SaveIcon />\r\n                </IconButton>\r\n            </StyledTableCell>\r\n            <StyledTableCell>\r\n                <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    onClick={() => props.deleteEntry(state.id)}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </StyledTableCell>\r\n        </StyledTableRow>\r\n    )\r\n}","import React, {useEffect, createRef} from 'react'\r\nimport InputRow from './InputRow'\r\nimport type { TableDataEntry, AllDataListsType } from \"../interfaces/Interfaces\"\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { makeStyles, createStyles, withStyles, Theme } from '@material-ui/core/styles';\r\n\r\nexport default function ReportTable(props:\r\n    {\r\n        state:\r\n        {\r\n            schema:\r\n            {\r\n                fields: { name: string }[]\r\n            },\r\n            data: TableDataEntry[]\r\n\r\n        },\r\n        dataLists?: AllDataListsType\r\n        handleChange: Function,\r\n        handleUpdate: Function,\r\n        deleteEntry: Function,\r\n        form?: string\r\n    }) {\r\n\r\n        const StyledTableCell = withStyles((theme: Theme) =>\r\n        createStyles({\r\n            head: {\r\n                backgroundColor: theme.palette.primary.main,\r\n                color: theme.palette.common.white,\r\n                padding: 10,\r\n                fontSize: 16\r\n            },\r\n        }),\r\n        )(TableCell);\r\n\r\n        const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            table: {\r\n                minWidth: 650,\r\n            },\r\n        })\r\n        );\r\n        const classes = useStyles();\r\n\r\n        // Component scrolls into view on mount\r\n        const myRef = createRef<HTMLTableElement>()\r\n        const executeScroll = () => {\r\n            if (myRef.current) {\r\n                myRef.current.scrollIntoView({behavior: 'smooth'})\r\n            }\r\n        }\r\n    \r\n        useEffect(() => {\r\n            executeScroll()\r\n        }, [])\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} ref={myRef}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {props.state.schema.fields\r\n                            .filter(column => !column.name.includes(\"id\"))\r\n                            .map(column => {\r\n                                return (\r\n                                    <StyledTableCell key={column.name}>\r\n                                        {column.name.replace(\"_\", \" \")}\r\n                                    </StyledTableCell>\r\n                                )\r\n                            })}\r\n                        <StyledTableCell><span>Save</span></StyledTableCell>\r\n                        <StyledTableCell><span>Delete</span></StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"tableBody\">\r\n                    {(props.state.data).map((entry: TableDataEntry, i: number) => (\r\n                            <InputRow\r\n                                entry={entry}\r\n                                i={i}\r\n                                key={i}\r\n                                fields={props.state.schema.fields}\r\n                                handleChange={props.handleChange}\r\n                                handleUpdate={props.handleUpdate}\r\n                                dataLists={props.dataLists}\r\n                                deleteEntry={props.deleteEntry}\r\n                            />\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import type {\r\n    AllDataListsType, \r\n    FormStateType, \r\n    TableDataEntry, \r\n    TableType,\r\n    ExpensesFormType,\r\n    IncomeFormType,\r\n    EditFormType,\r\n    WallChartDataType} from '../interfaces/Interfaces'\r\n\r\n\r\nfunction checkStatus<T>(res: Response, parseMethod: string): Promise<T> {\r\n    if (res.status === 401) {\r\n        throw new Error(\"Unauthorized\")\r\n    }\r\n    if (res.status === 404) {\r\n        throw new Error(\"No Data\")\r\n    }\r\n    if (res.status !== 200) {\r\n        throw new Error(\"Error! \" + res.status)\r\n    }\r\n    if (parseMethod === 'json'){\r\n        return res.json() as Promise<T>\r\n    } else {\r\n        return res.text() as unknown as Promise<T>\r\n    }\r\n}\r\n\r\nconst API = {\r\n    addCategories: function (token: string | null, data: EditFormType): Promise<Response | string> {\r\n        return fetch(`/api/categories/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    getCategories: function (token: string | null): Promise<AllDataListsType> {\r\n        return fetch(`/api/categories/`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n            },\r\n        }).then(res=>checkStatus<AllDataListsType>(res, 'json'))\r\n    },\r\n    expenses: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\r\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<TableType>(res, 'json'))\r\n    },\r\n    postExpenses: function (token: string | null, data:ExpensesFormType): Promise<Response | string> {\r\n        return fetch(`/api/expenses/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    postBatchExpenses: function (token: string | null, data:ExpensesFormType[]): Promise<Response | string> {\r\n        return fetch(`/api/expenses/batch`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    postIncome: function (token: string | null, data:IncomeFormType): Promise<Response | string> {\r\n        return fetch(`/api/income/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    postBatchIncome: function (token: string | null, data:IncomeFormType[]): Promise<Response | string> {\r\n        return fetch(`/api/income/batch`, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    deleteExpenses: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    updateExpenses: function (token: string | null, data: TableDataEntry): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${data.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    income: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\r\n        return fetch(`/api/income/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<TableType>(res, 'json'))\r\n    },\r\n    updateIncome: function (token: string | null, data: TableDataEntry): Promise<Response | string> {\r\n        return fetch(`/api/income/${data.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    deleteIncome: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/income/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    pivot: function (token: string | null, yearMonthObj: FormStateType): Promise<{schema: { fields: [] }, data: TableDataEntry[]}> {\r\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<TableType>(res, 'json'))\r\n    },\r\n    wallchart: function (token: string | null): Promise<WallChartDataType> {\r\n        return fetch(`/wallchart`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<WallChartDataType>(res, 'json'))\r\n    },\r\n\r\n    dataList: function (token: string | null): Promise<AllDataListsType> {\r\n        return fetch(`/api/datalists`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<AllDataListsType>(res, 'json'))\r\n    },\r\n    signup: function (data: { username: string, password: string }): Promise<Response | string> {\r\n        return fetch('/auth/signup', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => checkStatus<string>(res, 'text'))\r\n    },\r\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\r\n        return fetch('/auth/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => checkStatus<{ token: string }>(res, 'json'))\r\n    },\r\n    checkAuth: function (token: string | null): Promise<{username: string, token: string}> {\r\n        return fetch(`/auth/checkAuth`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res =>checkStatus<{username: string, token: string}>(res, 'json'))\r\n    }\r\n}\r\n\r\nexport default API","import { openDB, DBSchema, IDBPDatabase } from 'idb'\nimport { AllDataListsType, ExpensesFormType, IncomeFormType, WallChartDataType } from '../interfaces/Interfaces';\nimport API from './API';\n\ninterface financesDB extends DBSchema {\n  expenses: {\n    value: {\n      amount: number,\n      date: Date | null,\n      person_id: number,\n      vendor: string,\n      broad_category_id: number,\n      narrow_category_id: number,\n      notes: string\n    },\n    key: string\n  },\n  income: {\n    value: {\n      date: Date | null,\n      amount: number,\n      person_id: number,\n      source: string,\n    },\n    key: string\n  },\n  broad_categories: {\n    value: {\n      name: string,\n      id: number,\n      person: boolean\n    },\n    key: string\n  },\n  narrow_categories: {\n    value: {\n      name: string,\n      id: number,\n      broad_category_id: number\n    },\n    key: string\n  },\n  persons: {\n    value: {\n      name: string,\n      id: number\n    },\n    key: string\n  },\n  wallchart: {\n    value: {\n      labels: string[],\n      income: number[],\n      expenses: number[]\n    },\n    key: string\n  },\n}\n\n\nlet db: IDBPDatabase<financesDB>;\nexport async function testDatabase() {\n  db = await openDB<financesDB>(\"finances\", 1, {\n    async upgrade(db) {\n      db.createObjectStore('expenses', { autoIncrement: true })\n      db.createObjectStore('income', { autoIncrement: true })\n      db.createObjectStore('broad_categories', { autoIncrement: true })\n      db.createObjectStore('narrow_categories', { autoIncrement: true })\n      db.createObjectStore('persons', { autoIncrement: true })\n      db.createObjectStore('wallchart', { autoIncrement: true })\n    }\n  });\n\n  if (navigator.onLine) {\n    checkDatabase();\n  }\n}\n\nexport async function saveRecord(table: 'income' | 'expenses', record: ExpensesFormType | IncomeFormType) {\n  await db.put(table, record);\n}\n\nexport async function saveCategories(categories: AllDataListsType) {\n  (Object.keys(categories) as Array<keyof AllDataListsType>).map((category: keyof AllDataListsType) => {\n    db.clear(category)\n    categories[category as keyof AllDataListsType]?.map(c => {\n      db.put(category, c)\n    })\n  })\n}\n\nexport async function loadCategories() {\n  let tables: Array<keyof AllDataListsType> = ['broad_categories', 'narrow_categories', 'persons']\n  let categories: AllDataListsType = {\n    'broad_categories': [],\n    'narrow_categories': [],\n    'persons': []\n  };\n  tables.map(async table => {\n    let category = await db.getAll(table)\n    categories[table] = category\n  })\n  return categories\n}\n\nexport async function saveWallChartData(data: WallChartDataType) {\n  await db.clear('wallchart');\n  db.put('wallchart', data);\n}\n\nexport async function loadWallChartData(): Promise<WallChartDataType> {\n  let data = await db.getAll('wallchart');\n  return data[0];\n}\n\nexport async function emptyDatabase(): Promise<string> {\n  try {\n    await db.clear('expenses')\n    await db.clear('income')\n    return \"pendingFinances cleared!\"\n  } catch (err) {\n    return err\n  }\n}\n\nasync function checkDatabase() {\n  let token = localStorage.getItem('token')\n  try {\n    const pendingExpenses = await db.getAll(\"expenses\");\n    if (pendingExpenses.length > 0) {\n      await API.postBatchExpenses(token, pendingExpenses)\n      // delete records if successful\n      db.clear('expenses')\n    }\n    const pendingIncome = await db.getAll(\"income\");\n    if (pendingIncome.length > 0) {\n      await API.postBatchIncome(token, pendingIncome)\n      // delete records if successful\n      db.clear('income')\n    }\n  } catch (err) {\n    console.error(err)\n  }\n}\n\n// listen for app coming back online\nwindow.addEventListener(\"online\", checkDatabase);","import React, { useState } from 'react'\r\nimport API from '../utils/API'\r\nimport { saveRecord } from '../utils/db'\r\nimport { AuthContext } from '../App'\r\nimport { ExpensesFormType, AllDataListsType, DataListStateType } from '../interfaces/Interfaces'\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    InputAdornment,\r\n    Typography,\r\n    DialogContent\r\n} from '@material-ui/core';\r\n// import 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\n\r\nexport default function AddRecordsForm(props: {\r\n    classes: { root: string, formControl: string},\r\n    handleClose: Function,\r\n    categories: AllDataListsType,\r\n    setOpenBackdrop: Function,\r\n    reloadWallChart: Function\r\n}) {\r\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\r\n\r\n    const initialFormState = {\r\n        date: new Date(Date.now()),\r\n        amount: NaN,\r\n        person_id: NaN,\r\n        broad_category_id: NaN,\r\n        narrow_category_id: NaN,\r\n        vendor: \"\",\r\n        notes: \"\"\r\n    }\r\n\r\n    // Form control state\r\n    const [formState, setFormState] = useState<ExpensesFormType>(initialFormState)\r\n\r\n    // State to hold category info\r\n    const [currentBroadCategory, setCurrentBroadCategory] = useState<DataListStateType>({\r\n        name: \"\",\r\n        id: NaN,\r\n    })\r\n\r\n    const [currentNarrowCategories, setCurrentNarrowCategories] = useState<DataListStateType[]>([])\r\n\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\r\n        let name = event.target.name as keyof typeof formState\r\n        setFormState({ ...formState, [name]: event.target.value })\r\n        if (name === 'broad_category_id') {\r\n            let category = props.categories.broad_categories.filter(i => i.id === event.target.value)[0]\r\n            setCurrentBroadCategory(category)\r\n            let narrowCategories = props.categories.narrow_categories.filter(i => i.broad_category_id === category.id)\r\n            setCurrentNarrowCategories(narrowCategories)\r\n        }\r\n    }\r\n\r\n    function handleDateChange(date: Date | null) {\r\n        setFormState({ ...formState, date: date });\r\n    };\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        event.preventDefault()\r\n        if (!formState.date || !formState.amount || !formState.broad_category_id || !formState.vendor) {\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Please fill out all fields\",\r\n                open: true\r\n            })\r\n            return\r\n        }\r\n        let formStateConvertedDate: any = { ...formState }\r\n        formStateConvertedDate.date = formStateConvertedDate.date?.toLocaleDateString(\"en-US\")\r\n        try {\r\n            props.setOpenBackdrop(true)\r\n            await API.postExpenses(Auth.token, formStateConvertedDate)\r\n            props.setOpenBackdrop(false)\r\n            setAlertState({\r\n                severity: \"success\",\r\n                message: \"Record Saved!\",\r\n                open: true\r\n            })\r\n            props.reloadWallChart()\r\n        } catch (err) {\r\n            props.setOpenBackdrop(false)\r\n            if (err.message === \"Error! 500\") {\r\n                setAlertState({\r\n                    severity: \"error\",\r\n                    message: \"Server Error! Contact Eli\",\r\n                    open: true\r\n                })\r\n                return\r\n            } else {\r\n                saveRecord('expenses', formStateConvertedDate)\r\n                if (err.message === \"Unauthorized\") {\r\n                    setAuth({ type: 'LOGOUT' })\r\n                }\r\n                setAlertState({\r\n                    severity: \"warning\",\r\n                    message: \"Record Saved Locally\",\r\n                    open: true\r\n                })\r\n            }\r\n        } finally {\r\n            setFormState(initialFormState)\r\n            setCurrentBroadCategory({\r\n                name: \"\",\r\n                id: NaN\r\n            })\r\n        }\r\n    }\r\n \r\n    return (\r\n            <DialogContent>\r\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Log Expense</Typography>\r\n            <form className={props.classes.root} onSubmit={handleFormSubmit}>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        fullWidth\r\n                        variant=\"inline\"\r\n                        format=\"MM/dd/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n                        name=\"Date\"\r\n                        label=\"Date\"\r\n                        value={formState.date}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}                        \r\n                        />\r\n                </MuiPickersUtilsProvider>\r\n                <TextField\r\n                    onChange={handleFormChange}\r\n                    value={formState.vendor}\r\n                    label=\"Vendor\"\r\n                    name=\"vendor\"\r\n                    type=\"string\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    />\r\n                <TextField\r\n                    onChange={handleFormChange}\r\n                    value={formState.amount}\r\n                    label=\"Amount\"\r\n                    name=\"amount\"\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                    }}\r\n                    inputProps={{ step: \"0.01\" }}\r\n                    />\r\n                <FormControl\r\n                    className={props.classes.formControl}>\r\n                    <InputLabel htmlFor=\"broad_category\">Broad Category</InputLabel>\r\n                    <Select\r\n                        onChange={handleFormChange}\r\n                        value={formState.broad_category_id}\r\n                        name=\"broad_category_id\"\r\n                        labelId=\"broad_category\"\r\n                        label=\"Broad Category\"\r\n                        >\r\n                        {props.categories.broad_categories.map(i => (\r\n                            <MenuItem value={i.id}>{i.name}</MenuItem>\r\n                            ))}\r\n                    </Select>\r\n                </FormControl>\r\n                {currentNarrowCategories.length > 0 ? (\r\n                    <FormControl className={props.classes.formControl}>\r\n                        <InputLabel htmlFor=\"narrow_category\">Narrow Category</InputLabel>\r\n                        <Select\r\n                            onChange={handleFormChange}\r\n                            value={formState.narrow_category_id}\r\n                            name=\"narrow_category_id\"\r\n                            labelId=\"narrow_category\"\r\n                            label=\"Narrow Category\"\r\n                            >\r\n                            {/* Get the list of narrow categories corresponding to the selected broad category */}\r\n                            {currentNarrowCategories?.map(i => (\r\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                ) : null}\r\n                {currentBroadCategory.person ? (\r\n                    \r\n                    <FormControl className={props.classes.formControl}>\r\n                        <InputLabel htmlFor=\"person_id\">Person</InputLabel>\r\n                        <Select\r\n                            onChange={handleFormChange}\r\n                            value={formState.person_id}\r\n                            name=\"person_id\"\r\n                            labelId=\"person_id\"\r\n                            label=\"Person\"\r\n                            >\r\n                            {props.categories.persons.map(i => (\r\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\r\n                                ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                ) : null}\r\n                <TextField\r\n                    onChange={handleFormChange}\r\n                    value={formState.notes}\r\n                    label=\"Notes\"\r\n                    name=\"notes\"\r\n                    type=\"string\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    />\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    >Submit</Button>\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={() => {\r\n                        setFormState(initialFormState)\r\n                        props.handleClose()\r\n                    }\r\n                }\r\n                >Close</Button>\r\n            </form>\r\n                </DialogContent>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport API from '../utils/API'\r\nimport { AuthContext } from '../App'\r\nimport type { IncomeFormType, AllDataListsType } from '../interfaces/Interfaces'\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    InputAdornment,\r\n    Typography,\r\n    DialogContent\r\n} from '@material-ui/core';\r\n// import 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { saveRecord } from '../utils/db';\r\n\r\n\r\nexport default function AddRecordsForm(props: {\r\n    classes: { root: string, formControl: string, dialog: string },\r\n    handleClose: Function,\r\n    categories: AllDataListsType,\r\n    setOpenBackdrop: Function,\r\n    reloadWallChart: Function\r\n}) {\r\n\r\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\r\n\r\n    const initialFormState = {\r\n        date: new Date(Date.now()),\r\n        amount: NaN,\r\n        person_id: NaN,\r\n        source: \"\",\r\n    }\r\n\r\n    // Form control state\r\n    const [formState, setFormState] = useState<IncomeFormType>(initialFormState)\r\n\r\n    \r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\r\n        let name = event.target.name as keyof typeof formState\r\n        setFormState({ ...formState, [name]: event.target.value })\r\n    }\r\n    \r\n    function handleDateChange(date: Date | null) {\r\n        setFormState({ ...formState, date: date });\r\n    };\r\n    \r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        event.preventDefault()\r\n        if (!formState.date || !formState.amount || !formState.person_id || !formState.source) {\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Please fill out all fields\",\r\n                open: true\r\n            })\r\n            return\r\n        }\r\n        let formStateConvertedDate: any = { ...formState }\r\n        try {\r\n            formStateConvertedDate.date = formStateConvertedDate.date?.toLocaleDateString(\"en-US\")\r\n            props.setOpenBackdrop(true)\r\n            await API.postIncome(Auth.token, formStateConvertedDate)\r\n            props.setOpenBackdrop(false)\r\n            setAlertState({\r\n                severity: \"success\",\r\n                message: \"Record Saved!\",\r\n                open: true\r\n            })\r\n            props.reloadWallChart()\r\n        } catch (err) {\r\n            props.setOpenBackdrop(false)\r\n            if (err.message === \"Error! 500\") {\r\n                setAlertState({\r\n                    severity: \"error\",\r\n                    message: \"Server Error!\",\r\n                    open: true\r\n                })\r\n                return\r\n            } else {\r\n                saveRecord('income', formStateConvertedDate)\r\n                setAlertState({\r\n                    severity: \"warning\",\r\n                    message: \"Record Saved Locally\",\r\n                    open: true\r\n                })\r\n                if (err.message === \"Unauthorized\") {\r\n                    setAuth({ type: 'LOGOUT' })\r\n                }\r\n            }\r\n        } finally {\r\n            setFormState(initialFormState)\r\n        }\r\n    }\r\n    \r\n    return (\r\n            <DialogContent>\r\n                <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Log Income</Typography>\r\n                <form className={props.classes.root} onSubmit={handleFormSubmit}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"MM/dd/yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            name=\"Date\"\r\n                            label=\"Date\"\r\n                            value={formState.date}\r\n                            onChange={handleDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <TextField\r\n                        onChange={handleFormChange}\r\n                        value={formState.source}\r\n                        label=\"Source\"\r\n                        name=\"source\"\r\n                        type=\"string\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                    />\r\n                    <TextField\r\n                        onChange={handleFormChange}\r\n                        value={formState.amount}\r\n                        label=\"Amount\"\r\n                        name=\"amount\"\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                        }}\r\n                        inputProps={{ step: \"0.01\" }}\r\n                    />\r\n                    <FormControl className={props.classes.formControl}>\r\n                        <InputLabel htmlFor=\"person_id\">Person</InputLabel>\r\n                        <Select\r\n                            onChange={handleFormChange}\r\n                            value={formState.person_id}\r\n                            name=\"person_id\"\r\n                            labelId=\"person_id\"\r\n                            label=\"Person\"\r\n                        >\r\n                            {props.categories.persons.map(i => (\r\n                                <MenuItem value={i.id}>{i.name}</MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >Submit</Button>\r\n                    <Button\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => {\r\n                            setFormState(initialFormState)\r\n                            props.handleClose()\r\n                        }}\r\n                    >Close</Button>\r\n                </form>\r\n            </DialogContent>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Paper, Table, TableBody, TableContainer, TableCell, TableRow, TableHead } from '@material-ui/core';\r\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport { TableDataEntry } from '../interfaces/Interfaces';\r\nimport { blueGrey } from '@material-ui/core/colors';\r\n\r\n// import StaticRow from './StaticRow';\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        head: {\r\n            backgroundColor: theme.palette.primary.main,\r\n            color: theme.palette.common.white,\r\n            padding: 10,\r\n            fontSize: 16\r\n        },\r\n        body: {\r\n            padding: 10,\r\n            fontSize: 14,\r\n        },\r\n    }),\r\n)(TableCell);\r\n\r\nconst DarkTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.background.default,\r\n            cursor: 'pointer'\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nconst LightTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: blueGrey[800],\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nconst ExtraLightTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: blueGrey[700],\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\nexport default function PivotTable(props: {\r\n    state:\r\n    {\r\n        schema:\r\n        {\r\n            fields: { name: string }[]\r\n        },\r\n        data: TableDataEntry[]\r\n\r\n    },\r\n}) {\r\n\r\n    const [show, setShow] = useState<boolean[]>([false])\r\n\r\n    function toggleShowRow(i: number) {\r\n        let newShow = [...show]\r\n        newShow[i] = !newShow[i]\r\n        setShow(newShow)\r\n    }\r\n\r\n    const pivotState = props.state.data.reduce((a, b) => {\r\n        if (b.broad_category) {\r\n            if (a[b.broad_category]) {\r\n                a[b.broad_category].total += parseFloat(b.amount);\r\n            } else {\r\n                a[b.broad_category] = { total: parseFloat(b.amount), narrow_categories: {} };\r\n            }\r\n            if (b.narrow_category) {\r\n                if (a[b.broad_category].narrow_categories[b.narrow_category]) {\r\n                    a[b.broad_category].narrow_categories[b.narrow_category].total += parseFloat(b.amount);\r\n                } else {\r\n                    a[b.broad_category].narrow_categories[b.narrow_category] = {total: parseFloat(b.amount), persons: {}}   ;\r\n                }\r\n                if (b.person) {\r\n                    if (a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person]) {\r\n                        a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person] += parseFloat(b.amount);\r\n                    } else {\r\n                        a[b.broad_category].narrow_categories[b.narrow_category].persons[b.person] = parseFloat(b.amount);\r\n                    }\r\n                }\r\n            } else if (b.person) {\r\n                if (a[b.broad_category].narrow_categories[\"--\"]?.persons[b.person]) {\r\n                    a[b.broad_category].narrow_categories[\"--\"].persons[b.person] += parseFloat(b.amount);\r\n                    a[b.broad_category].narrow_categories[\"--\"].total += parseFloat(b.amount);\r\n                } else {\r\n                a[b.broad_category].narrow_categories = {...a[b.broad_category].narrow_categories, \"--\": {persons: {[b.person]: parseFloat(b.amount)}, total: parseFloat(b.amount)}}\r\n                }\r\n            }\r\n        }\r\n        return a\r\n    }, {} as any)\r\n\r\n    console.log(pivotState)\r\n\r\n    useEffect(() => {\r\n        let showState = Object.keys(pivotState).map((i: any) => false)\r\n        setShow(showState)\r\n    }, [props])\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>\r\n                            Broad category\r\n                        </StyledTableCell>\r\n                        <StyledTableCell>\r\n                            Narrow Category\r\n                        </StyledTableCell>\r\n                        <StyledTableCell>\r\n                            person\r\n                        </StyledTableCell>\r\n                        <StyledTableCell>\r\n                            amount\r\n                        </StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {Object.keys(pivotState).map((bCat, i) => (\r\n                        <>\r\n                            <DarkTableRow key={i} onClick={() => toggleShowRow(i)}>\r\n                                <StyledTableCell>\r\n                                    {bCat}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                    TOTAL\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                    {/* Empty Cell */}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                    ${pivotState[bCat].total.toFixed(2)}\r\n                                </StyledTableCell>\r\n                            </DarkTableRow>\r\n                            {pivotState[bCat].narrow_categories && show[i] ? (\r\n                                Object.keys(pivotState[bCat].narrow_categories).map(nCat => (\r\n                                    <>\r\n                                        <LightTableRow>\r\n                                            <StyledTableCell>\r\n                                                {/* Empty Cell */}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                {nCat}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                TOTAL\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                ${pivotState[bCat].narrow_categories[nCat].total.toFixed(2)}\r\n                                            </StyledTableCell>\r\n                                        </LightTableRow>\r\n                                        {pivotState[bCat].narrow_categories[nCat].persons ? (\r\n                                            Object.keys(pivotState[bCat].narrow_categories[nCat].persons).map((person: string) => (\r\n                                                <ExtraLightTableRow>\r\n                                                    <StyledTableCell>\r\n                                                    </StyledTableCell>\r\n                                                    <StyledTableCell>\r\n                                                    </StyledTableCell>\r\n                                                    <StyledTableCell>\r\n                                                        {person}\r\n                                                    </StyledTableCell>\r\n                                                    <StyledTableCell>\r\n                                                        ${pivotState[bCat].narrow_categories[nCat].persons[person].toFixed(2)}\r\n\r\n                                                    </StyledTableCell>\r\n                                                </ExtraLightTableRow>\r\n                                            ))\r\n                                            ) : null\r\n                                        }\r\n                                    </>\r\n                                ))\r\n                            ) : null}\r\n                        </>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import React from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    TextField,\r\n    MenuItem,\r\n    Button\r\n} from '@material-ui/core'\r\nimport {FormStateType} from '../interfaces/Interfaces'\r\n\r\nexport default function Form({\r\n    classes, \r\n    handleFormSubmit, \r\n    handleFormChange, \r\n    formState }: {\r\n    classes: {\r\n        root: string, \r\n        formControl: string\r\n    },\r\n    handleFormSubmit: (event: React.FormEvent<HTMLFormElement>) => void,\r\n    handleFormChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>)=> void,\r\n    formState: FormStateType\r\n}) {\r\n    return (\r\n        <Container className={classes.root}>\r\n                    <Card variant=\"outlined\">\r\n                        <h2 className={classes.root}>Reports</h2>\r\n                        <form onSubmit={handleFormSubmit} className={classes.root}>\r\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"form\">Report</InputLabel>\r\n                                <Select\r\n                                    name=\"form\"\r\n                                    label=\"Report\"\r\n                                    labelId=\"form\"\r\n                                    value={formState.form}\r\n                                    onChange={handleFormChange}>\r\n                                    <MenuItem value=\"income\">Income</MenuItem>\r\n                                    <MenuItem value=\"expenses\">Expenses</MenuItem>\r\n                                    <MenuItem value=\"pivot\">Pivot Table</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                            <TextField\r\n                                onChange={handleFormChange}\r\n                                value={formState.year}\r\n                                label=\"Year\"\r\n                                name=\"year\"\r\n                                type=\"number\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"month2\">Month</InputLabel>\r\n                                <Select\r\n                                    onChange={handleFormChange}\r\n                                    value={formState.month}\r\n                                    name=\"month\"\r\n                                    labelId=\"month2\"\r\n                                    label=\"Month\"\r\n                                >\r\n                                    <MenuItem value={1}>January</MenuItem>\r\n                                    <MenuItem value={2}>February</MenuItem>\r\n                                    <MenuItem value={3}>March</MenuItem>\r\n                                    <MenuItem value={4}>April</MenuItem>\r\n                                    <MenuItem value={5}>May</MenuItem>\r\n                                    <MenuItem value={6}>June</MenuItem>\r\n                                    <MenuItem value={7}>July</MenuItem>\r\n                                    <MenuItem value={8}>August</MenuItem>\r\n                                    <MenuItem value={9}>September</MenuItem>\r\n                                    <MenuItem value={10}>October</MenuItem>\r\n                                    <MenuItem value={11}>November</MenuItem>\r\n                                    <MenuItem value={12}>December</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                            >\r\n                                View\r\n                        </Button>\r\n                        </form>\r\n                    </Card>\r\n                </Container>\r\n    )\r\n}","import React from \"react\";\r\nimport { Container } from '@material-ui/core';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { ChartJSDataType } from \"../interfaces/Interfaces\";\r\n\r\n\r\nexport default function WallChart({data}: {data: ChartJSDataType}) {\r\n    return (\r\n        <Container>\r\n            <Line data={data} />\r\n        </Container>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport {\r\n    DialogContent,\r\n    Typography,\r\n    Button,\r\n    TextField,\r\n    FormControl,\r\n    FormControlLabel,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Checkbox\r\n} from '@material-ui/core'\r\nimport { AllDataListsType, EditFormType } from '../interfaces/Interfaces'\r\nimport API from '../utils/API'\r\nimport { AuthContext } from '../App'\r\n\r\nexport default function Edit(props: {\r\n    handleClose: Function,\r\n    classes: { root: string, formControl: string },\r\n    categories: AllDataListsType,\r\n    setCategories: Function,\r\n    setOpenBackdrop: Function\r\n}) {\r\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\r\n\r\n    const initialFormState = {\r\n        person: \"\",\r\n        broad_category: \"\",\r\n        broad_category_id: NaN,\r\n        narrow_category: \"\",\r\n        has_person: false\r\n    }\r\n\r\n    // Form control state\r\n    const [formState, setFormState] = useState<EditFormType>(initialFormState)\r\n\r\n\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }>): void {\r\n        let name = event.target.name as keyof EditFormType\r\n        let value = event.target.value\r\n        if (name === 'has_person') {\r\n            // Casting event.target so that ts knows check property will be there\r\n            value = (event.target as HTMLInputElement).checked\r\n        }\r\n        setFormState({ ...formState, [name]: value })\r\n    }\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent, form: 'person' | 'narrow_category' | 'broad_category'): Promise<any> {\r\n        event.preventDefault()\r\n        props.setOpenBackdrop(true)\r\n        let data\r\n        try {\r\n            switch (form) {\r\n                case 'person':\r\n                    data = { person: formState.person }\r\n                    if (!data.person) {\r\n                        throw new Error(\"Empty Input\")\r\n                    }\r\n                    break;\r\n                case 'broad_category':\r\n                    data = {\r\n                        broad_category: formState.broad_category,\r\n                        has_person: formState.has_person\r\n                    }\r\n                    if (!data.broad_category) {\r\n                        throw new Error(\"Empty Input\")\r\n                    }\r\n                    break;\r\n                case 'narrow_category':\r\n                    data = {\r\n                        narrow_category: formState.narrow_category,\r\n                        broad_category_id: formState.broad_category_id,\r\n                        has_person: formState.has_person\r\n                    }\r\n                    if (!data.narrow_category || !data.broad_category_id) {\r\n                        throw new Error(\"Empty Input\")\r\n                    }\r\n                    break;\r\n            }\r\n            await API.addCategories(Auth.token, data)\r\n            setAlertState({\r\n                severity: \"success\",\r\n                message: \"Category Added!\",\r\n                open: true\r\n            })\r\n            let updatedCategories = await API.getCategories(Auth.token)\r\n            props.setCategories(updatedCategories);\r\n\r\n        } catch (err) {\r\n            switch (err.message) {\r\n                case \"Error! 500\":\r\n                    setAlertState({\r\n                        severity: \"error\",\r\n                        message: \"Server Error!\",\r\n                        open: true\r\n                    })\r\n                    break;\r\n                case \"Unauthorized\":\r\n                    setAuth({ type: 'LOGOUT' })\r\n                    break;\r\n                case \"Empty Input\":\r\n                    setAlertState({\r\n                        severity: \"error\",\r\n                        message: \"Please fill out all fields\",\r\n                        open: true\r\n                    })\r\n                    break;\r\n                default:\r\n                    setAlertState({\r\n                        severity: \"error\",\r\n                        message: \"You must be connected to the internet to add categories\",\r\n                        open: true\r\n                    })\r\n            }\r\n        } finally {\r\n            props.setOpenBackdrop(false)\r\n            setFormState(initialFormState)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DialogContent>\r\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Person</Typography>\r\n            <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'person')}>\r\n                <TextField\r\n                    onChange={handleFormChange}\r\n                    value={formState.person}\r\n                    label=\"Person\"\r\n                    name=\"person\"\r\n                    type=\"string\"\r\n                />\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >Add</Button>\r\n            </form>\r\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Broad Category</Typography>\r\n            <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'broad_category')}>\r\n                <TextField\r\n                    onChange={handleFormChange}\r\n                    value={formState.broad_category}\r\n                    label=\"Broad Category\"\r\n                    name=\"broad_category\"\r\n                    type=\"string\"\r\n                />\r\n                <FormControlLabel control={<Checkbox\r\n                    checked={formState.has_person}\r\n                    onChange={handleFormChange}\r\n                    name=\"has_person\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />}\r\n                    label=\"Person\"\r\n                />\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >Add</Button>\r\n            </form>\r\n            <Typography variant=\"h5\" component=\"h5\" className={props.classes.root}>Add a Narrow Category</Typography>\r\n            <form className={props.classes.root} onSubmit={(e: React.SyntheticEvent) => handleFormSubmit(e, 'narrow_category')}>\r\n                <FormControl\r\n                    className={props.classes.formControl}>\r\n                    <InputLabel htmlFor=\"broad_category\">Broad Category</InputLabel>\r\n                    <Select\r\n                        onChange={handleFormChange}\r\n                        name=\"broad_category_id\"\r\n                        labelId=\"broad_category_id\"\r\n                        label=\"Broad Category\"\r\n                    >\r\n                        {props.categories.broad_categories.map(i => (\r\n                            <MenuItem value={i.id}>{i.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    onChange={handleFormChange}\r\n                    value={formState.narrow_category}\r\n                    label=\"Narrow Category\"\r\n                    name=\"narrow_category\"\r\n                    type=\"string\"\r\n                />\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >Add</Button>\r\n            </form>\r\n            <div className={props.classes.root}>\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={() => {\r\n                        // setFormState(initialFormState)\r\n                        props.handleClose()\r\n                    }\r\n                    }\r\n                >Close</Button>\r\n            </div>\r\n        </DialogContent>\r\n    )\r\n}","import React, { useState, useEffect, useReducer } from 'react';\r\nimport ReportTable from '../components/Table';\r\nimport AddExpensesForm from '../components/AddExpensesForm'\r\nimport AddIncomeForm from '../components/AddIncomeForm'\r\nimport API from '../utils/API'\r\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\r\nimport { AuthContext } from '../App'\r\nimport type {\r\n    TableDataEntry,\r\n    DataListStateType,\r\n    AllDataListsType,\r\n    FormStateType,\r\n    InputName,\r\n    ChartJSDataType,\r\n    WallChartDataType\r\n} from '../interfaces/Interfaces'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Backdrop,\r\n    CircularProgress,\r\n    Dialog,\r\n    Box\r\n} from '@material-ui/core';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { \r\n    emptyDatabase, \r\n    saveCategories, \r\n    loadCategories, \r\n    saveWallChartData, \r\n    loadWallChartData \r\n} from '../utils/db';\r\n\r\nimport PivotTable from '../components/PivotTable';\r\nimport Form from '../components/Form';\r\nimport WallChart from '../components/Chart'\r\nimport Edit from '../components/Edit';\r\n\r\nfunction Home() {\r\n    const theme = useTheme();\r\n\r\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\r\n\r\n    // Form control state\r\n    const [formState, setFormState] = useState<FormStateType>(\r\n        {\r\n            form: \"expenses\",\r\n            year: new Date(Date.now()).getUTCFullYear(),\r\n            month: new Date(Date.now()).getUTCMonth() + 1\r\n        }\r\n    )\r\n\r\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: TableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                amount: \"\",\r\n                date: \"\",\r\n                source: \"\",\r\n                person: \"\",\r\n                id: NaN,\r\n                person_id: NaN\r\n            }]\r\n        }\r\n    )\r\n\r\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: TableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                amount: \"\",\r\n                date: \"\",\r\n                source: \"\",\r\n                vendor: \"\",\r\n                broad_category: \"\",\r\n                narrow_category: \"\",\r\n                person: \"\",\r\n                notes: \"\",\r\n                id: NaN\r\n            }]\r\n        }\r\n\r\n    )\r\n\r\n\r\n    // State for datalists\r\n    const [categoriesState, setCategoriesState] = useState<AllDataListsType>({\r\n        persons: [],\r\n        narrow_categories: [],\r\n        broad_categories: [],\r\n    })\r\n\r\n    // Loading Backdrop display state\r\n    const [openBackdrop, setOpenBackdrop] = useState(false);\r\n\r\n    // Converts dates to human-readable format\r\n    function formatDates(entry: TableDataEntry): TableDataEntry {\r\n        if (!entry.date) {\r\n            return entry\r\n        } else {\r\n            let date = new Date(entry.date);\r\n            let year = date.getUTCFullYear();\r\n            let month = (1 + date.getUTCMonth()).toString();\r\n            month = month.length > 1 ? month : '0' + month;\r\n            let day = date.getUTCDate().toString();\r\n            day = day.length > 1 ? day : '0' + day;\r\n            let dateString = month + '/' + day + '/' + year;\r\n            entry.date = dateString\r\n            return entry\r\n        }\r\n    }\r\n\r\n    // Form control\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>): void {\r\n        let name = event.target.name as keyof typeof formState\r\n        setFormState({ ...formState, [name]: event.target.value })\r\n    }\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        try {\r\n            event.preventDefault()\r\n            let route = formState.form\r\n            setOpenBackdrop(true)\r\n            let response = await API[route](Auth.token, formState)\r\n            setOpenBackdrop(false)\r\n            // Formatting the dates the hard way because javascript doesn't support strftime...\r\n            if (route !== 'pivot') {\r\n                response.data = response.data.map(formatDates)\r\n            }\r\n            switch (route) {\r\n                case \"expenses\":\r\n                    setExpensesTableState(response)\r\n                    break;\r\n                case \"income\":\r\n                    setIncomeTableState(response)\r\n                    break;\r\n                case \"pivot\":\r\n                    setExpensesTableState(response)\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            if (err.message === \"Unauthorized\") {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n            setOpenBackdrop(false)\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Error Fetching Data\",\r\n                open: true\r\n            })\r\n        }\r\n    }\r\n\r\n    // Helper function for assigning an id to a TableDataEntry if user input matches an existing record\r\n    function assignId(\r\n        name: InputName,\r\n        value: string) {\r\n\r\n        let state;\r\n        let id;\r\n\r\n        switch (name) {\r\n            case \"person\":\r\n                state = categoriesState.persons;\r\n                id = 'person_id';\r\n                break;\r\n            case \"broad_category\":\r\n                state = categoriesState.broad_categories;\r\n                id = 'broad_category_id';\r\n                break;\r\n            case \"narrow_category\":\r\n                state = categoriesState.narrow_categories;\r\n                id = 'narrow_category_id';\r\n                break;\r\n        }\r\n        let dataListItem = state.filter((i: DataListStateType) => i.name === value)[0]\r\n        if (dataListItem) {\r\n            return { id: id, dataListItem: dataListItem }\r\n        } else {\r\n            return { id: null, dataListItem: null }\r\n        }\r\n    }\r\n\r\n    // Keep global state synced with InputRow state\r\n    async function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\r\n        try {\r\n            let { name, value } = event.target;\r\n            let newExpensesTableStateData: TableDataEntry[] = [...expensesTableState.data]\r\n            let updatedRow: TableDataEntry = { ...newExpensesTableStateData[index], [name]: value }\r\n            if (name === \"person\" || name === \"broad_category\" || name === \"narrow_category\") {\r\n                let { id, dataListItem } = assignId(name as InputName, value)\r\n                if (id && dataListItem) {\r\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n                }\r\n            }\r\n            newExpensesTableStateData[index] = updatedRow\r\n            setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err.message === \"Unauthorized\") {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    // Keep global state synced with InputRow state\r\n    async function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\r\n        try {\r\n            let { name, value } = event.target;\r\n            let newIncomeTableStateData: TableDataEntry[] = [...incomeTableState.data]\r\n            let updatedRow: TableDataEntry = { ...newIncomeTableStateData[index], [name]: value }\r\n            if (name === \"person\") {\r\n                let { id, dataListItem } = assignId(name as InputName, value)\r\n                if (id && dataListItem) {\r\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n                }\r\n            }\r\n            newIncomeTableStateData[index] = updatedRow\r\n            setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    // Update an row altered by the user\r\n    async function updateExpensesRow(index: number): Promise<void> {\r\n        try {\r\n            await API.updateExpenses(Auth.token, expensesTableState.data[index])\r\n            setAlertState({\r\n                severity: \"success\",\r\n                message: \"Record updated!\",\r\n                open: true\r\n            })\r\n            reloadWallChartData()\r\n        } catch (err) {\r\n            console.log(err)\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Error: Failed to save!\",\r\n                open: true\r\n            })\r\n        }\r\n    }\r\n\r\n    // Update an row altered by the user\r\n    async function updateIncomeRow(index: number): Promise<void> {\r\n        try {\r\n            await API.updateIncome(Auth.token, incomeTableState.data[index])\r\n            setAlertState({\r\n                severity: \"success\",\r\n                message: \"Record updated!\",\r\n                open: true\r\n            })\r\n            reloadWallChartData()\r\n        } catch (err) {\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Error: Failed to save!\",\r\n                open: true\r\n            })\r\n        }\r\n    }\r\n\r\n    // State For WallChart\r\n    function reducer(state: ChartJSDataType, action: WallChartDataType): ChartJSDataType {\r\n        if (action.labels.length > 0) {\r\n            state = {\r\n                labels: action.labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"Income\",\r\n                        data: action.income,\r\n                        fill: false,\r\n                        borderColor: theme.palette.primary.main\r\n                    },\r\n                    {\r\n                        label: \"Expenses\",\r\n                        data: action.expenses,\r\n                        fill: false,\r\n                        borderColor: theme.palette.secondary.main\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        return state\r\n    }\r\n\r\n    const [wallChartData, setWallChartData] = useReducer(reducer, {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: \"Income\",\r\n                data: [],\r\n                fill: false,\r\n                borderColor: theme.palette.primary.main\r\n            },\r\n            {\r\n                label: \"Expenses\",\r\n                data: [],\r\n                fill: false,\r\n                borderColor: theme.palette.secondary.main\r\n            }\r\n        ]\r\n    })\r\n\r\n    // Reload data for Wallchart\r\n    async function reloadWallChartData(): Promise<void> {\r\n        console.log(\"Reloading Wallchart\")\r\n        try {\r\n            let res = await API.wallchart(Auth.token)\r\n            console.log(res)\r\n            setWallChartData(res)\r\n            saveWallChartData(res)\r\n        } catch (err) {\r\n            if (err.message === \"No Data\") {\r\n                console.log(\"No Data!\")\r\n            } else {\r\n                loadWallChartData().then((data: WallChartDataType) => setWallChartData(data))\r\n            }\r\n        }\r\n    }\r\n\r\n    // Delete a row from the database\r\n    async function deleteEntry(id: number | undefined) {\r\n        try {\r\n            if (formState.form === \"expenses\") {\r\n                await API.deleteExpenses(Auth.token, id);\r\n                let newExpensesTableStateData = expensesTableState.data.filter(entry => entry.id !== id)\r\n                setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n            } else if (formState.form === \"income\") {\r\n                await API.deleteIncome(Auth.token, id);\r\n                let newIncomeTableStateData = incomeTableState.data.filter(entry => entry.id !== id)\r\n                setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n            }\r\n            reloadWallChartData()\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err === 'Unauthorized') {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create classes to use for styling\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: '10em'\r\n            },\r\n            selectEmpty: {\r\n                marginTop: theme.spacing(2),\r\n            },\r\n            root: {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                flexWrap: 'wrap',\r\n                [theme.breakpoints.up('md')]: {\r\n                    flexWrap: 'noWrap',\r\n                },\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                    [theme.breakpoints.down('xs')]: {\r\n                        width: '100%',\r\n                    },\r\n                },\r\n            },\r\n            wallchart: {\r\n                width: '100%'\r\n            },\r\n            logoutBtn: {\r\n                float: 'right',\r\n                margin: '1em',\r\n            },\r\n            editBtn: {\r\n                float: 'left',\r\n                margin: '1em',\r\n            },\r\n            offline: {\r\n                backgroundColor: theme.palette.secondary.main,\r\n                color: 'white',\r\n                textAlign: 'center',\r\n                position: 'sticky'\r\n            },\r\n            backdrop: {\r\n                zIndex: 1301, // To be in front of Dialog at 1300\r\n                color: '#fff',\r\n            },\r\n            speedDial: {\r\n                position: 'fixed',\r\n                bottom: theme.spacing(2),\r\n                right: theme.spacing(2),\r\n            },\r\n            dialog: {\r\n                width: '100%',\r\n            },\r\n            datePicker: {\r\n                [theme.breakpoints.down('sm')]: {\r\n                    marginLeft: '-10px'\r\n                },\r\n            }\r\n        })\r\n    );\r\n    const classes = useStyles();\r\n\r\n    // SpeedDial controls\r\n    const [speedDialOpen, setSpeedDialOpen] = React.useState(false);\r\n\r\n    const actions = [\r\n        { icon: <AddIcon />, name: 'Expenses', action: handleExpensesOpen, operation: 'product' },\r\n        { icon: <AddIcon />, name: 'Income', action: handleIncomeOpen, operation: 'tag' }\r\n    ]\r\n\r\n    const handleSpeedDialClose = () => {\r\n        setSpeedDialOpen(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setSpeedDialOpen(true);\r\n    };\r\n\r\n    function handleExpensesOpen(): void {\r\n        setAddExpensesOpen(true)\r\n        setSpeedDialOpen(false)\r\n    }\r\n\r\n    function handleIncomeOpen(): void {\r\n        setAddIncomeOpen(true)\r\n        setSpeedDialOpen(false)\r\n    }\r\n\r\n    // Controls for Dialogs\r\n    const [addExpensesOpen, setAddExpensesOpen] = useState(false)\r\n    const [addIncomeOpen, setAddIncomeOpen] = useState(false)\r\n    const [editOpen, setEditOpen] = useState(false)\r\n    function handleClose() {\r\n        setAddExpensesOpen(false)\r\n        setAddIncomeOpen(false)\r\n        setEditOpen(false)\r\n    }\r\n\r\n    // Control display of Offline banner\r\n    const [offline, setOffline] = useState<boolean>(false)\r\n    window.addEventListener(\"offline\", () => setOffline(true))\r\n    window.addEventListener(\"online\", () => setOffline(false))\r\n\r\n    useEffect(() => {\r\n        async function getCategories(): Promise<void> {\r\n            try {\r\n                let categories = await API.getCategories(Auth.token)\r\n                setCategoriesState(categories)\r\n                saveCategories(categories)\r\n            } catch (err) {\r\n                let categories = await loadCategories()\r\n                setCategoriesState(categories)\r\n            }\r\n        }\r\n        getCategories()\r\n        if (!navigator.onLine) {\r\n            setOffline(true)\r\n        }\r\n        reloadWallChartData()\r\n        }, [])\r\n\r\n\r\n    return (\r\n        <Box component='div' className=\"Home\">\r\n            {offline ? (\r\n                <AppBar className={classes.offline} position='sticky'>\r\n                    Offline\r\n                </AppBar>\r\n            ) : null}\r\n            <Box component='header' className=\"header\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.editBtn}\r\n                    onClick={()=>setEditOpen(true)}\r\n                >Edit\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.logoutBtn}\r\n                    onClick={async () => {\r\n                        setAuth({ type: 'LOGOUT' })\r\n                        let res = await emptyDatabase()\r\n                        console.log(res)\r\n                    }}\r\n                >Logout\r\n                </Button>\r\n                <Container className={classes.root}>\r\n                    <h1 style={{ textAlign: 'center' }}>{Auth.user} Finances</h1>\r\n                </Container>\r\n                    <WallChart data={wallChartData}/>\r\n                <Form\r\n                    classes={classes}\r\n                    handleFormSubmit={handleFormSubmit}\r\n                    handleFormChange={handleFormChange}\r\n                    formState={formState}\r\n                />\r\n            </Box >\r\n            <div className=\"body\">\r\n                {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\r\n                    <ReportTable\r\n                        state={incomeTableState}\r\n                        dataLists={categoriesState}\r\n                        handleChange={handleIncomeChange}\r\n                        handleUpdate={updateIncomeRow}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"expenses\" && expensesTableState.data[0]?.id ? (\r\n                    <ReportTable\r\n                        state={expensesTableState}\r\n                        dataLists={categoriesState}\r\n                        handleChange={handleExpensesChange}\r\n                        handleUpdate={updateExpensesRow}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"pivot\" && expensesTableState.data[0]?.id ? (\r\n                    <PivotTable state={expensesTableState} />\r\n                ) : null}\r\n            </div>\r\n            <Dialog onClose={handleClose} open={editOpen} maxWidth='xl'>\r\n                <Edit \r\n                    classes={classes} \r\n                    handleClose={handleClose}\r\n                    categories={categoriesState}\r\n                    setCategories={setCategoriesState}\r\n                    setOpenBackdrop={setOpenBackdrop}\r\n                    />\r\n            </Dialog>\r\n            <Dialog onClose={handleClose} open={addExpensesOpen} maxWidth='xl'>\r\n                <AddExpensesForm \r\n                classes={classes} \r\n                handleClose={handleClose}\r\n                categories={categoriesState}\r\n                setOpenBackdrop={setOpenBackdrop}\r\n                reloadWallChart={reloadWallChartData}\r\n                />\r\n            </Dialog>\r\n            <Dialog onClose={handleClose} open={addIncomeOpen} maxWidth='xl'>\r\n                <AddIncomeForm \r\n                classes={classes} \r\n                handleClose={handleClose}\r\n                categories={categoriesState}\r\n                setOpenBackdrop={setOpenBackdrop}\r\n                reloadWallChart={reloadWallChartData}\r\n                />\r\n            </Dialog>\r\n            <SpeedDial\r\n                ariaLabel=\"SpeedDial example\"\r\n                className={classes.speedDial}\r\n                // hidden={hidden}\r\n                icon={<SpeedDialIcon />}\r\n                onClose={handleSpeedDialClose}\r\n                onOpen={handleOpen}\r\n                open={speedDialOpen}\r\n                onMouseLeave={() => { }}\r\n            >\r\n                {actions.map((action) => (\r\n                    <SpeedDialAction\r\n                        key={action.name}\r\n                        icon={action.icon}\r\n                        tooltipTitle={action.name}\r\n                        tooltipOpen\r\n                        onClick={action.action}\r\n                    />\r\n                ))}\r\n            </SpeedDial>\r\n            <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                <CircularProgress disableShrink color=\"inherit\" />\r\n            </Backdrop>\r\n        </Box >\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport API from '../utils/API'\r\nimport { AuthContext } from '../App'\r\nimport { Button, DialogContent, TextField, Container } from '@material-ui/core';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexWrap: 'wrap',\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                [theme.breakpoints.down('xs')]: {\r\n                    width: '100%',\r\n                },\r\n            }\r\n        }\r\n    })\r\n);\r\n\r\nexport default function Signup({handleClose}: {handleClose: Function}) {\r\n    const { setAlertState } = React.useContext(AuthContext)\r\n\r\n    const [signupFormState, setSignupFormState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        setSignupFormState({\r\n            ...signupFormState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const formSubmit = async (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        try {\r\n            await API.signup(signupFormState)\r\n            setAlertState({\r\n                severity: \"success\",\r\n                message: \"You're signed up! Please log in\",\r\n                open: true\r\n            })\r\n            handleClose()\r\n        } catch (err) {\r\n            console.error(err)\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Error Signing Up!\",\r\n                open: true\r\n            })\r\n        }\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <DialogContent>\r\n            <div style={{ textAlign: 'center' }}>\r\n                <h4>Signup</h4>\r\n                <form className={classes.root} onSubmit={formSubmit}>\r\n                    <TextField\r\n                        onChange={handleChange}\r\n                        value={signupFormState.username}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        label=\"username\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        onChange={handleChange}\r\n                        value={signupFormState.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        label=\"password\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\" name=\"signup\" type=\"submit\">Sign Up</Button>\r\n                </form>\r\n            </div>\r\n        </DialogContent>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport API from '../utils/API'\r\nimport { AuthContext } from '../App'\r\nimport { Button, TextField, Dialog, Container } from '@material-ui/core';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport Signup from '../components/Signup'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            textAlign: 'center',\r\n            flexWrap: 'wrap',\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                [theme.breakpoints.down('xs')]: {\r\n                    width: '100%',\r\n                },\r\n            }\r\n        },\r\n        signupBtn: {\r\n            float: 'right',\r\n            margin: '1em',\r\n        },\r\n    })\r\n);\r\n\r\nexport default function Login() {\r\n    const { Auth, setAuth, setAlertState } = React.useContext(AuthContext)\r\n\r\n    const [loginFormState, setLoginFormState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const [signupOpen, setSignupOpen] = useState<boolean>(false)\r\n\r\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        setLoginFormState({\r\n            ...loginFormState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const formSubmit = async (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        try {\r\n            await API.login(loginFormState).then(newToken => {\r\n                setAuth({ type: 'LOGIN', payload: { user: loginFormState.username, token: newToken.token } })\r\n            })\r\n        } catch (err) {\r\n            console.error(err)\r\n            setAlertState({\r\n                severity: \"error\",\r\n                message: \"Incorrect username or password\",\r\n                open: true\r\n            })\r\n        }\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    function handleClose() {\r\n        setSignupOpen(false)\r\n    }\r\n\r\n    if (Auth.loggedIn) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                className={classes.signupBtn}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setSignupOpen(true)}\r\n            >Sign Up</Button>\r\n            <Container className={classes.root}>\r\n                <h4>Login</h4>\r\n                <form className={classes.root} onSubmit={formSubmit}>\r\n                    <TextField\r\n                        onChange={inputChange}\r\n                        value={loginFormState.username}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        label=\"username\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        onChange={inputChange}\r\n                        value={loginFormState.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        label=\"password\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\" name=\"login\" type=\"submit\">Login</Button>\r\n                </form>\r\n            </Container>\r\n            <Dialog onClose={handleClose} open={signupOpen} maxWidth='xl'>\r\n                <Signup handleClose={handleClose}/>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\n\r\nexport default function Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from './Alert'\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AlertStateType } from '../interfaces/Interfaces';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    snackbar: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function CustomizedSnackbar({ state, setState }: {\r\n    state: AlertStateType,\r\n    setState: React.Dispatch<React.SetStateAction<AlertStateType>>\r\n    }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setState({ ...state, open: false });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.snackbar}>\r\n            <Snackbar\r\n                open={state.open}\r\n                autoHideDuration={3000}\r\n                onClose={handleClose}\r\n\r\n            >\r\n                <Alert onClose={handleClose} severity={state.severity}>\r\n                    {state.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState, useReducer } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport { testDatabase } from './utils/db'\nimport './App.css';\nimport CustomizedSnackbar from './components/SnackBar'\nimport { AlertStateType, Auth, ContextState } from './interfaces/Interfaces'\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { green, blueGrey, red, purple } from '@material-ui/core/colors'\n\nimport { MuiPickersOverrides } from '@material-ui/pickers/typings/overrides';\nimport { CssBaseline, ThemeOptions } from '@material-ui/core'\n\n// Types to allow for theme customization\ntype overridesNameToClassKey = {\n  [P in keyof MuiPickersOverrides]: keyof MuiPickersOverrides[P];\n};\n\ntype CustomType = {\n  MuiPickersBasePicker: {\n    pickerView: {\n      maxWidth?: string;\n    };\n  };\n};\n\ndeclare module '@material-ui/core/styles/overrides' {\n  interface ComponentNameToClassKey extends overridesNameToClassKey { }\n  export interface ComponentNameToClassKey extends CustomType { }\n};\n\n// Instantiating default theme to use breakpoints\nconst defaultTheme = createMuiTheme();\n\n// Theme factory\nfunction createMyTheme(options: ThemeOptions) {\n  return createMuiTheme({\n    overrides: {\n      MuiPickersBasePicker: {\n        container: {\n          backgroundColor: blueGrey[900],\n          [defaultTheme.breakpoints.down(\"xs\")]: {\n          marginLeft: '-10px',\n          }\n        },\n      },\n      MuiCard: {\n        root: {\n          backgroundColor: blueGrey[900]\n        }\n      },\n      MuiDialogContent: {\n        root: {\n          backgroundColor: blueGrey[900]\n        }\n      },\n      MuiPickersCalendarHeader: {\n        iconButton: {\n          backgroundColor: blueGrey[900]\n        }\n      }\n    },\n    ...options\n  })\n};\n\nconst theme = createMyTheme({\n  palette: {\n    type: 'dark',\n    background: {\n      default: blueGrey[900],\n    },\n    primary: {\n      main: green[900]\n    },\n    secondary: {\n      main: purple[800]\n    }\n  },\n});\n\n\n\n// Check if user is logged in before returning protected component/page\nconst ProtectedRoute = ({ component: Component, loggedIn, ...rest }: {\n  path: string,\n  loggedIn: boolean,\n  setLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n    <Route {...rest} render={props => (\n      loggedIn\n        ? <Component {...props} />\n        : <Redirect to='/login' />\n    )\n    } />\n\n  )\n\nexport const AuthContext = React.createContext<ContextState>({\n  Auth: {\n    loggedIn: false,\n    user: \"\",\n    token: \"\"\n  },\n  setAuth: (): void => { },\n  setAlertState: (): void => { }\n})\n\n\n\nexport default function App() {\n\n  const reducer = (state: Auth, action: { type: string, payload?: { user: string, token: string } }): Auth => {\n    if (action.type === 'LOGIN' && action.payload) {\n      localStorage.setItem(\"user\", action.payload.user);\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        loggedIn: true,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    } else if (action.type === 'LOGOUT') {\n      localStorage.clear();\n      return {\n        ...state,\n        loggedIn: false,\n        user: \"\",\n        token: \"\",\n      };\n    } else {\n      return state;\n    }\n  };\n\n  const [Auth, setAuth] = useReducer(reducer, {\n    loggedIn: false,\n    user: \"\",\n    token: \"\"\n  })\n\n  const [alertState, setAlertState] = useState<AlertStateType>({\n    severity: undefined,\n    message: \"\",\n    open: false,\n  })\n\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    const user = localStorage.getItem(\"user\")\n    if (token) {\n      API.checkAuth(token)\n        .then(res => setAuth({ type: 'LOGIN', payload: { user: res.username, token: token } }))\n        .catch(err => {\n          if (err.message === \"Unauthorized\") {\n            setAuth({ type: 'LOGOUT' })\n          } else {\n            setAuth({ type: 'LOGIN', payload: { user: user || \"\", token: token || \"\" } })\n          }\n        })\n    }\n  }, [])\n\n\n  useEffect(() => {\n    testDatabase()\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthContext.Provider\n        value={{ Auth, setAuth, setAlertState }}\n      >\n\n        <Router>\n          <ProtectedRoute path=\"/\"\n            loggedIn={Auth.loggedIn}\n            setLoggedIn={setAuth}\n            // offline={offline}\n            component={Home}\n          />\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n        </Router>\n        <CustomizedSnackbar\n          state={alertState}\n          setState={setAlertState}\n        />\n      </AuthContext.Provider>\n    </ThemeProvider>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}